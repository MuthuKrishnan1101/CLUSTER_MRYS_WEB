using CLUSTER_MRTS.CommonFunction;
using G10CertificateValidation;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

namespace CLUSTER_MRTS
{
    public partial class FC0001R1V1 : System.Web.UI.Page
    {

        #region Declaration

        public DataSet objDatasetAppsVariables;
        public int intrecFrom = 0;
        public int intrecFromcopyreq = 0;
        public int intrecFromPendingItems = 0;
        public int intrecFromEnquiry = 0;
        public int intrecFromRemarks = 0;
        public int intrecFromProcessHistory = 0;
        public int intrecFromdocselection = 0;
        public int intrecFromdropdownpopup = 0; 

        public int intrecTo = 0;
        public int intrecTocopyreq = 0;
        public int intrecToPendingItems = 0;
        public int intrecToEnquiry = 0;
        public int intrecToRemarks = 0;
        public int intrecToProcessHistory = 0;
        public int intrecTodocselection = 0;
        public int intrecTodropdownpopup = 0;

        public int intpageIndex = 0;
        public int intpageIndexcopyreq = 0;
        public int intpageIndexPendingItems = 0;
        public int intpageIndexEnquiry = 0;
        public int intpageIndexRemarks = 0;
        public int intpageIndexProcessHistory = 0;
        public int intpageIndexdocselection = 0;
        public int intpageIndexdropdownpopup = 0;

        public string stringformIdPaging = "RegistrationBiodataPopupPaging";
        public string stringformIdPagingcopyreq = "RegistrationCopyreqPopupPaging";
        public string stringformIdPagingPendingItems = "RegistrationPendingItemsPopupPaging";
        public string stringformIdEnquiry = "RegistrationEnquiryPopupPaging";
        public string stringformIdRemarks = "RegistrationRemarksPopupPaging";
        public string stringformIdProcessHistory = "RegistrationProcessHistoryPopupPaging";
        public string stringformIdPagingDocsel = "FC0004R1V1DOCSELECTIONgridviewpagesize";
        public string stringformIdddlpopup = "FC0001RropdownpopupPaging";

        #endregion 
        protected void Page_Load(object sender, EventArgs e)
        {
            if (CommonFunctions.IsActive())
            {
                string stringRequestID = "";
                string stringTYPE = "";
                try
                {
                    intrecTocopyreq = CommonFunctions.GridViewPagesize(stringformIdPagingcopyreq);
                    intrecTo = CommonFunctions.GridViewPagesize(stringformIdPaging);
                    intrecTodropdownpopup = CommonFunctions.GridViewPagesize(stringformIdddlpopup);
                    intrecTodocselection = CommonFunctions.GridViewPagesize(stringformIdPagingDocsel);
                    intrecToEnquiry = CommonFunctions.GridViewPagesize(stringformIdEnquiry);
                    intrecToRemarks = CommonFunctions.GridViewPagesize(stringformIdRemarks);
                    intrecToPendingItems = CommonFunctions.GridViewPagesize(stringformIdPagingPendingItems);
                    intrecToProcessHistory = CommonFunctions.GridViewPagesize(stringformIdProcessHistory);

                    HtmlGenericControl home = (HtmlGenericControl)this.Page.Master.FindControl("hdrPageTitle");
                    home.InnerText = "MR Registration";
                    if (!IsPostBack)
                    {
                        VerifyAccessRights();
                        HideDateResstrictions();

                        if ((Request.QueryString["QUERYCASE"] == null) || (Request.QueryString["QUERYCASE"] != null && Request.QueryString["QUERYCASE"].ToString() == "N")) 
                        {
                            Session["boolModifyRights"] = null;
                        } 
                        if (Request.QueryString["Load"] != null && Request.QueryString["Load"].Trim().Length > 0) 
                        {
                            Session["REQUEST_FromSummary"] = null;
                            rbtEMR.Checked = true;
                            updpnlEMR.Update();
                        }
                        if (txtReqNo.Text.Trim().Length > 0 && txtMRStatus.Text.ToString() != "DRAFT")
                        {
                            ControlsDropdownValues("REQUESTORTYPE", false);
                        }
                        Session["AuditLogFC0001R1V1"] = null;
                        Session["CURRENTACTIVETABNAME"] = null;
                        Session["ADD_ATTACHMENTS"] = null;
                        Session["stringDMLIndicator"] = "I";
                        Session["PARTICULARPATIENTPROFILE"] = null; 
                        Session["LoadDataFC0001"] = null;
                        Session["LoadattachmentFC0001"] = null;
                        Session["LoadDocterandVerifiersFC0001"] = null;
                        Session["LoadNonMRDetailFC0001"] = null;
                        Session["LoadPaymentReceiptsGridFC0001"] = null;
                        Session["LoadPendingItemsFC0001"] = null;
                        Session["LoadEnquiryFC0001"] = null;
                        Session["ADD_REMARKS"] = null;
                        Session["LoadProcessHistoryFC0001"] = null; 
                        Session["ADD_BATCHPROFILE"] = null;
                        Session["ADD_BATCHREQUEST"] = null;
                        chkCOPYQUERY.Checked = false;
                        pnlAfterRequest.Visible = false;
                        pnlBeforeRequest.Visible = true;
                        imgbtnInstTransfer.Visible = false;
                        imgbtnSearch.Visible = false;
                        btnthreedot.Visible = false;
                        pnlprocess.Visible = false;
                        pnlprofilesummary.Visible = false;
                        DefaultEnable();
                        ClearHeaderValues();
                        ClearAllControls();
                        ClearValuesRemarks();
                        ClearValuesENQ(); 
                        ClearValuesPendingItems(); 
                        LoadSOURCEOFREFERENCE();
                        LoadFinancialAssistanceStatus();
                        Loadcontactpreference();
                        if (Session["REQUEST_FromSummary"] != null && Session["REQUEST_FromSummary"].ToString().Trim().Length > 0)
                        {
                            ddlApplicationStatus.SelectedIndex = 0;
                            stringRequestID = Session["REQUEST_FromSummary"].ToString();
                            stringTYPE = "NONLOAD";
                            LoadRemarks();
                            LoadTarget();
                            LoadEnquiryStatus();
                            LoadAllDATA(stringRequestID, out stringTYPE);
                            LoadData(stringRequestID, stringTYPE, "");
                            Loadattachment(stringRequestID, stringTYPE);//1
                            LoadDocterandVerifiers(stringRequestID, stringTYPE);//2
                            LoadNonMRDetail(stringRequestID, stringTYPE);//3
                            Session["stringDMLIndicator"] = "U"; 
                        }
                        else
                        {
                            Session["stringDMLIndicator"] = "I";
                            Session["REQUEST_FromSummary"] = null;
                        }
                        UpdatePanelModal6success.Visible = false;
                        UpdatePanelRecall.Visible = false;
                        UpdatePanelDelayReason.Visible = false;
                        updtpnldocterselection.Visible = false;

                        if (Session["boolModifyRights"] != null)
                        {
                            bool boolModifyRights = (bool)Session["boolModifyRights"];
                            if (!boolModifyRights)
                            {
                                ControlsEnabledByProStatus("VIEWONLY");
                            }
                        }

                        btnpatientprofile_Click(null, null);
                    }
                    if (txtFirstRemPrintedOn.Text.Trim().Length > 0)
                    { txtFirstRemPrintedOn.ReadOnly = true; }
                    else
                    {  txtFirstRemPrintedOn.ReadOnly = false;} 
                    if (txtSecRemPrintedOn.Text.Trim().Length > 0)
                    {  txtSecRemPrintedOn.ReadOnly = true; }
                    else
                    {txtSecRemPrintedOn.ReadOnly = false; }
                }
                catch (Exception objException)
                {
                    CommonFunctions.ShowMessageboot02(objException);
                }
                finally
                {
                    stringTYPE = null;
                    stringRequestID = null;
                }
            } 
        } 
        private void HideDateResstrictions()
        {
            try
            {
                object[] objControlsPREVIOUS = new object[]
       {
                    txtReqStartDate_CalendarExtender,
                    txtReassDate_CalendarExtender,
       };

                object[] objControlsFUTURE = new object[]
      {
                    txtAccidentDate_CalendarExtender,
                    txtDOHA_CalendarExtender,
      };
                CommonFunctions.HideFuturePreviousDates(objControlsPREVIOUS, "PREVIOUS");
                CommonFunctions.HideFuturePreviousDates(objControlsFUTURE, "FUTURE");
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        } 
        #region load datas
        private void LoadAllDATA(string striongREQID, out string stringTYPE)
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "";
            string stringOrderBy = "";
            int intFromRecord = 0;
            stringTYPE = ""; string stringServiceType = "List1R1V1";
            int intToRecord = int.MaxValue; 
            string stringTransType = ""; 
            DataTable objdatatablerequest = null;
            DataRow objdataemptyRow = null; 
            try
            {  
                if (striongREQID.Contains("DRAFT"))
                {
                    stringformid = "FC0001R1V5";
                }
                else
                {
                    stringformid = "FC0001R1V2"; 
                }
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, striongREQID, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0)
                    {
                        stringTYPE = "LOAD";
                        //0.POP0132a0_get_mr_registration_search--- LoadData

                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[0] != null && objDatasetResult.Tables[0].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[0];
                            if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                            {
                                objdatatablerequest.Columns.Add("DML_INDICATOR");
                            }
                            Session["LoadDataFC0001"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["LoadDataFC0001"] = null;
                        }
                        //1.POP0128a0_get_mr_registration_req_search---LoadNonMRDetail
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[1] != null && objDatasetResult.Tables[1].Rows.Count > 0)
                        {
                            stringTransType = "ADDITIONAL MR"; 
                            if (objDatasetResult.Tables[1].Select("trans_type= '" + stringTransType.ToString() + "'").Length > 0)
                            {
                                objdatatablerequest = objDatasetResult.Tables[1].Select("trans_type= '" + stringTransType.ToString() + "'").CopyToDataTable();
                                if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                                {
                                    objdatatablerequest.Columns.Add("DML_INDICATOR");
                                }
                                Session["LoadNonMRDetailFC0001"] = objdatatablerequest;
                            }
                        }
                        else
                        {
                            Session["LoadNonMRDetailFC0001"] = null;
                        }
                        //2.POP0130a0_get_mr_regist_remarks_search---LoadEnquiry
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[2] != null && objDatasetResult.Tables[2].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[2];
                            if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                            {
                                objdatatablerequest.Columns.Add("DML_INDICATOR");
                            }
                            Session["ADD_REMARKS"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["ADD_REMARKS"] = null;
                        }
                        //3.POP0129a0_get_mr_pending_items_search            ---- LoadNonMRDetail
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[3] != null && objDatasetResult.Tables[3].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[3];
                            if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                            {
                                objdatatablerequest.Columns.Add("DML_INDICATOR");
                            }
                            Session["LoadPendingItemsFC0001"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["LoadPendingItemsFC0001"] = null;
                        }
                        //4.POP0178a0_document_attachments_search            ---Loadattachment
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[4] != null && objDatasetResult.Tables[4].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[4];
                            if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                            {
                                objdatatablerequest.Columns.Add("DML_INDICATOR");
                            }
                            Session["LoadattachmentFC0001"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["LoadattachmentFC0001"] = null;
                        }
                        //5.POP0220a0_GET_MR_ASSIGN_DOC_VERIFIER_SEARCH            -----LoadDocterandVerifiers
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[5] != null && objDatasetResult.Tables[5].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[5];
                            if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                            {
                                objdatatablerequest.Columns.Add("DML_INDICATOR");
                            }
                            Session["LoadDocterandVerifiersFC0001"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["LoadDocterandVerifiersFC0001"] = null;
                        }
                        //6.POP0155a0_get_MR_Payment_Receipts_search_2          ---LoadPaymentReceiptsGrid
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[6] != null && objDatasetResult.Tables[6].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[6];
                            if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                            {
                                objdatatablerequest.Columns.Add("DML_INDICATOR");
                            }
                            Session["LoadPaymentReceiptsGridFC0001"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["LoadPaymentReceiptsGridFC0001"] = null;
                        }
                        //7.POP0151a0_get_mr_enquiryhistory_search---LoadEnquiry
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[7] != null && objDatasetResult.Tables[7].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[7];
                            if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                            {
                                objdatatablerequest.Columns.Add("DML_INDICATOR");
                            }
                            Session["LoadEnquiryFC0001"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["LoadEnquiryFC0001"] = null;
                        }
                        //8.POP0133a0_get_mr_process_details_search---LoadProcessHistory
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[8] != null && objDatasetResult.Tables[8].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[8];
                            if (!objdatatablerequest.Columns.Contains("DML_INDICATOR"))
                            {
                                objdatatablerequest.Columns.Add("DML_INDICATOR");
                            }
                            Session["LoadProcessHistoryFC0001"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["LoadProcessHistoryFC0001"] = null;
                        }

                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[9] != null && objDatasetResult.Tables[9].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[9];
                            gv2ndtabqstlevel.DataSource = objdatatablerequest;
                            gv2ndtabqstlevel.DataBind();
                        }
                        else if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[9] != null)
                        {
                            objdatatablerequest = objDatasetResult.Tables[9];
                            objdataemptyRow = objdatatablerequest.NewRow();
                            foreach (DataColumn column in objdatatablerequest.Columns)
                            {
                                objdataemptyRow[column] = DBNull.Value; 
                            }
                            objdatatablerequest.Rows.Add(objdataemptyRow); 
                            gv2ndtabqstlevel.DataSource = objdatatablerequest;
                            gv2ndtabqstlevel.DataBind();
                        }
                        else
                        {
                            gv2ndtabqstlevel.DataSource = null;
                            gv2ndtabqstlevel.DataBind();
                        } 
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables[10] != null && objDatasetResult.Tables[10].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables[10];
                            Session["defauledviewstatus"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["defauledviewstatuss"] = null;
                        }
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t11"] != null && objDatasetResult.Tables["t11"].Rows.Count > 0)
                        {
                            objdatatablerequest = objDatasetResult.Tables["t11"];
                            Session["Cancelledrecord"] = objdatatablerequest;
                        }
                        else
                        {
                            Session["Cancelledrecord"] = null;
                        }
                    }
                    else
                    {
                        stringTYPE = "NONLOAD";
                    }
                }
                else
                {
                    stringTYPE = "NONLOAD";
                    Errorpopup(stringOutputResult);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null; 
                stringTransType = null;
                objdatatablerequest = null;
                objdataemptyRow = null; 
            }
        }

        private void LoadDueDateForQuerycase()//fix
        {
            DataSet objDatasetResult = null;
            DataTable objDataTableProcess = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = 5000;
            string[] stringOutputResult = null;
            string stringOrderBy = "mrstprocs.short_name asc"; 
            string stringformid12 = "FA0001R1V2";
            string stringexp0121 = "";
            string stringServiceType1 = "List1R1V1";
            string stringDueDate = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                if (txtProcessTypeID.Text.Trim().Length > 0)
                {  
                    stringexp0121 = "And mrstprocs.be_id= '" + stringbeid + "' And mrstprocs.mrp_id= '" + txtProcessTypeID.Text.Trim().ToString() + "'";   
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid12, stringexp0121, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objDataTableProcess = objDatasetResult.Tables["t1"];

                            if (txtCreateDate.Text.Trim().Length > 0)
                            {
                                if (objDataTableProcess.Columns.Contains("DUE_DATE") && objDataTableProcess.Rows[0]["DUE_DATE"] != null && objDataTableProcess.Rows[0]["DUE_DATE"].ToString().Trim().Length > 0)
                                { stringDueDate = Convert.ToDateTime(objDataTableProcess.Rows[0]["DUE_DATE"]).ToString("dd-MM-yyyy"); }

                                if (stringDueDate.Length > 0)
                                { txtDueDate.Text = stringDueDate; }
                                else { txtDueDate.Text = DateTime.Now.ToString("dd-MM-yyyy"); }
                            }
                        } 
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    } 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            { 
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                objDataTableProcess = null;
                stringformid12 = null;
                stringexp0121 = null;
                stringServiceType1 = null;
                stringDueDate = null;
                stringbeid = null;
            }
        }
        private void LoadData(string stringRequestID, string stringTYPE, string stringCOPYREQ)//fix
        {
            gvcopyexixtrecord.DataSource = null;
            gvcopyexixtrecord.DataBind();
            pnlcopyexixtrecord.Visible = false;
            DataTable objDataTable = null; 
            DateTime objDueDate01 = new DateTime();
            DataRow objDataRow = null;
            string stringTemp = "";
            string stringreqvalue = "";
            string stringMRSTSTUS = ""; 
            string stringMRamt = "";
            string stringDeliverBy = "";
            string stringduedte = "";
            string stringProcessID = "";  
            string stringdeletemark = "";
            string stringClarrificationRptType = "";
            string stringcancellstatus = "";
            decimal decimalMRamt = 0;  
            try
            {
                if (stringRequestID != null && stringRequestID.Trim().Length > 0)
                {
                    if (stringTYPE == "NONLOAD" || (Session["LoadDataFC0001"] == null && stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                    {
                        objDataTable = GetRequestDetails(stringRequestID, "");
                    }
                    else
                    {
                        if (HttpContext.Current.Session["LoadDataFC0001"] != null)
                        {
                            objDataTable = (DataTable)HttpContext.Current.Session["LoadDataFC0001"];
                        }
                    }
                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        //default load 1st tab 
                        objDataRow = objDataTable.Rows[0]; 
                        Session["AuditLogFC0001R1V1"] = objDataTable.Select();   
                        pnlPendingItems.Visible = false;
                        pnlProcessHistory.Visible = false;
                        pnlEnquiry.Visible = false;
                        stringMRSTSTUS = objDataRow["MR_STATUS"].ToString();
                        if (stringCOPYREQ != "COPYREQUEST" && stringCOPYREQ != "QUERYCASE")
                        {
                            txtReqNo.Text = objDataRow["request_id"].ToString();
                            pnlCreateRequestas.Visible = false;
                            pnlAfterRequest.Visible = true;
                            pnlBeforeRequest.Visible = false;
                            if (stringMRSTSTUS == "MR CREATED" || stringMRSTSTUS == "PENDING TRACING" || stringMRSTSTUS == "PENDING DESPATCH")
                            {
                                imgbtnInstTransfer.Visible = true;
                            }
                            else
                            {
                                imgbtnInstTransfer.Visible = false;
                            }
                            imgbtnSearch.Visible = true;
                            btnthreedot.Visible = true;
                            pnlprofilesummary.Visible = true;
                            rbtEMR.Enabled = false;
                            rbt1EMR.Enabled = false;
                            rbtnboth.Enabled = false;
                            ddlReference.Enabled = false;
                            ddlReference.CssClass = "form-control ReadOnly";
                            stringMRamt = objDataRow["MR_AMOUNT"].ToString();
                            if (stringMRamt.Length > 0)
                            {
                                decimal.TryParse(stringMRamt, out decimalMRamt);
                            }
                            hdfmramount.Value = stringMRamt;
                            LoadPaymentReceiptsGrid(stringRequestID, decimalMRamt, stringTYPE, "");

                            if (stringMRSTSTUS != "DRAFT")
                            {
                                lnkbtnnextassignation.Visible = true;
                                LoadPendingItems(stringRequestID, stringTYPE, false);
                                LoadEnquiry(stringRequestID, stringTYPE, false, true);
                                LoadRemarks(stringRequestID, stringTYPE, false, true, true);
                                LoadProcessHistory(stringRequestID, stringTYPE, false);
                            }
                            else if (stringMRSTSTUS == "DRAFT")
                            {
                                lnkbtnnextassignation.Visible = false;
                            }

                            txtReqNo.Text = objDataRow["request_id"].ToString();
                            hdfappoinmentdate.Value = objDataRow["appointment_date"].ToString();
                            hdfCANRefundamt.Value = objDataRow["REFUND_AMT"].ToString();

                            if (objDataRow["first_rem_print_date"] != null && objDataRow["first_rem_print_date"].ToString().Trim().Length > 0)
                            { txtFirstRemPrintedOn.Text = Convert.ToDateTime(objDataRow["first_rem_print_date"]).ToString("dd-MM-yyyy"); }

                            if (objDataRow["second_rem_printed_date"] != null && objDataRow["second_rem_printed_date"].ToString().Trim().Length > 0)
                            { txtSecRemPrintedOn.Text = Convert.ToDateTime(objDataRow["second_rem_printed_date"]).ToString("dd-MM-yyyy"); }

                            if (txtSecRemPrintedOn.Text.Length > 0)
                            {
                                rbtnpendingitemfirst.Enabled = false;
                            }
                            else
                            {
                                rbtnpendingitemfirst.Enabled = true;
                            }
                            stringDeliverBy = objDataRow["delmod_id"].ToString();

                            if (stringMRSTSTUS == "DRAFT")
                            {
                                lnkbtnAppoint.Enabled = false;
                                lnkbtnpayment.Enabled = false;
                                lnkbtnCancel.Enabled = false;
                                btnenquiry.Enabled = false;
                                btnenquiry.Visible = false;
                                pnlAfterRequest.Visible = false;
                                pnlBeforeRequest.Visible = true;
                                btnpendingitems.Visible = false;
                                lnkbtnViewMedical.Enabled = false;
                                lnkbtnrecalhistory.Enabled = false;
                                imgbtnSaveAsDraft.Visible = true;
                            }
                            else
                            {
                                imgbtnSaveAsDraft.Visible = false;
                                ControlsEnabled(3);
                            }
                            if (objDataRow["end_date"] != null && objDataRow["end_date"].ToString().Trim().Length > 0)
                            {
                                stringduedte = Convert.ToDateTime(objDataRow["end_date"]).ToString("dd-MM-yyyy");
                                objDueDate01 = CommonFunctions.ConvertToDateTime(stringduedte, "dd-MM-yyyy");
                            }

                            stringProcessID = objDataRow["MRP_ID"].ToString();
                            ProcessTABControlProcesstype(stringProcessID, stringTYPE);
                            ProcessControl(stringMRSTSTUS, stringDeliverBy, objDueDate01);


                        }
                        else
                        {
                            txtReqNo.Text = "";
                            if (stringCOPYREQ == "QUERYCASE")
                            {
                                gvcopyexixtrecord.DataSource = objDataTable;
                                gvcopyexixtrecord.DataBind();
                                pnlcopyexixtrecord.Visible = true;
                            }
                        }
                        //load header values
                        if (objDataRow["Bypass_Pen_Items"].ToString() == "Y")
                        {
                            chkBypassPendingItems.Checked = true;
                        }
                        else
                        {
                            chkBypassPendingItems.Checked = false;
                        }
                        if (objDataRow["PRIORITY_FLAG"].ToString() == "Y")
                        {
                            chkpriorityflag.Checked = true;
                        }
                        else
                        {
                            chkpriorityflag.Checked = false;
                        }
                        txtWritingandVerifyingStatus.Text = objDataRow["VERIFY_STATUS"].ToString();
                        txtMRNumberHEADER.Text = objDataRow["MR_ID"].ToString();
                        txtMRStatus.Text = stringMRSTSTUS;
                        if ((stringMRSTSTUS.Trim().ToUpper() == "FORWARDED" || stringMRSTSTUS.Trim().ToUpper() == "COLLECTED") && (stringCOPYREQ != "COPYREQUEST" && stringCOPYREQ != "QUERYCASE"))
                        {
                            ControlsEnabledByProStatus("CANCELLED");
                        }
                        LoadPatientInformations(objDataRow);
                        LoadRequestorInformations(ref stringreqvalue, objDataRow);
                        LoadRequestDetailsInformations(objDataRow);
                        if (stringCOPYREQ != "COPYREQUEST" && stringCOPYREQ != "QUERYCASE")
                        {
                            LoadWaiverInformations(objDataRow);
                        }
                        txtDepartmentOUID.Text = objDataRow["dept_id"].ToString();
                        txtDepartmentOUname.Text = objDataRow["DEP_SHORT_NAME"].ToString();
                        updpnlDepartmentOUID.Update();
                        if (stringMRSTSTUS.Trim() == "PENDING TRACING" || stringMRSTSTUS.Trim() == "PENDING DESPATCH")
                        {
                            ControlsDropdownValues("DEPARTMENTOU", true);
                        }
                        else
                        {
                            ControlsDropdownValues("DEPARTMENTOU", false);
                        }
                        txtReqRef.Text = objDataRow["req_reference"].ToString();
                        stringTemp = objDataRow["received_mode"].ToString();
                        if (ddlRecBy.Items.FindByValue(stringTemp) != null)
                        { ddlRecBy.ClearSelection(); ddlRecBy.Items.FindByValue(stringTemp).Selected = true; }
                        stringdeletemark = objDataRow["delmark"].ToString();
                        if (stringdeletemark != null && stringdeletemark == "Y")
                        {
                            pnlprocess.Visible = false;
                        }
                        chkCOPYQUERY.Checked = false;
                        if (stringCOPYREQ == "QUERYCASE")
                        {
                            txtReqNo.Text = objDataRow["request_id"].ToString();
                            chkCOPYQUERY.Checked = true;
                            //txtReqTypeID.Text = "01";
                            //txtReqTypename.Text = "MEDICAL REPORTS";
                            //updpnltxtReqTypeID.Update();

                            stringClarrificationRptType = "QUERY";
                            if (stringClarrificationRptType.Length > 0)
                            {
                                //txtRptTypeID.Text = stringClarrificationRptType;
                                //txtRptTypename.Text = "DUPLICATION OF NOTES (>1001 PAGES)";
                                //updpnltxtRptTypeID.Update();
                                ControlsEnabledByProStatus("MR CREATED");
                            }

                            txtCreateDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                            txtReqDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                            txtRecDate.Text = DateTime.Now.ToString("dd-MM-yyyy");

                            LoadDueDateForQuerycase();
                            if (stringCOPYREQ != "COPYREQUEST" && stringCOPYREQ != "QUERYCASE")
                            {
                                ControlsDropdownValues("REQUESTOR", false);
                            }
                        }
                        stringcancellstatus = objDataRow["sup_status"].ToString();
                        if (stringMRSTSTUS.Trim().ToUpper() == "CANCELLED" || stringcancellstatus.ToUpper() == "PENDING")
                        {
                            ControlsEnabledByProStatus("CANCELLED");
                        }

                        if (stringCOPYREQ == "FORWARDING")
                        {
                            LoadDocterandVerifiers(stringRequestID, "NONLOAD");//2
                        } 
                    }
                    else
                    {
                        hdfmramount.Value = "";
                        imgbtnInstTransfer.Visible = false;
                        imgbtnSearch.Visible = false;
                        btnthreedot.Visible = false;
                        pnlAfterRequest.Visible = false;
                        pnlBeforeRequest.Visible = true;
                        pnlCreateRequestas.Visible = true;
                        pnlprofilesummary.Visible = false;
                        ClearHeaderValues();
                    } 
                }

                TABActive(1);
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringTemp = null;
                stringreqvalue = null;
                objDataTable = null;
                objDataRow = null;
                stringMRSTSTUS = null; 
                stringMRamt = null;
                stringDeliverBy = null;
                stringduedte = null;
                stringProcessID = null;  
                stringdeletemark = null;
                stringClarrificationRptType = null;
                stringcancellstatus = null;
            }
        }

        #endregion 
        protected void btnConfirm_Click(object sender, EventArgs e)
        {
            Session["ADD_BATCHPROFILE"] = null;
            Session["ADD_BATCHREQUEST"] = null;
            DataTable objdataUserRolestable = null;
            string stringapptype = "";
            pnlRreRegReqCondition.Visible = false;
            ddlApplicationStatus.ToolTip = "Please Click New Request Button to Enable -'Create Request A' Field";
            try
            {
                if (ddlApplicationStatus.SelectedItem != null && ddlApplicationStatus.SelectedValue.Length > 0)
                {
                    stringapptype = ddlApplicationStatus.SelectedValue.ToString();
                    btnattachment.Enabled = true;
                    btnwaiver.Enabled = true;
                    btnAssignDocter.Enabled = true;
                    btnenquiry.Enabled = true;
                    btnpendingitems.Enabled = true;
                    btnProcessHistory.Enabled = true; 
                    if (stringapptype == "INDIVIDUALREQUEST")
                    {
                        pnlBATCHREQBYPATIENT.Visible = false;
                        pnlBATCHREQBYreqderail.Visible = false;
                        pnlcopyrequest.Visible = false; 
                    }
                    else if (stringapptype == "BATCHREQUESTBYPATIENT")
                    {
                        pnlBATCHREQBYPATIENT.Visible = true;
                        pnlBATCHREQBYreqderail.Visible = false;
                        pnlcopyrequest.Visible = false;
                        BindPatientData(null);
                        btnattachment.Enabled = false;
                        btnattachment2.Enabled = false;  
                        btnwaiver.Enabled = false;
                        btnwaiver2.Enabled = false;
                        btnAssignDocter.Enabled = false;
                        btnAssignDocter2.Enabled = false;

                        btnenquiry.Enabled = false;
                        btnpendingitems.Enabled = false;
                        btnProcessHistory.Enabled = false;

                        updpnlattachments.Visible = false;
                        pnlmenu5.Visible = false;
                        pnlmenu6.Visible = false;
                        pnlEnquiry.Visible = false;
                        pnlPendingItems.Visible = false;
                        pnlProcessHistory.Visible = false;

                        btnattachment.Visible = false;
                        btnwaiver.Visible = false;
                        btnAssignDocter.Visible = false;
                        btnenquiry.Visible = false;
                        btnpendingitems.Visible = false;
                    }
                    else if (stringapptype == "PREREGISTRATIONREQUEST")
                    {
                        pnlBATCHREQBYPATIENT.Visible = false;
                        pnlBATCHREQBYreqderail.Visible = false;
                        pnlRreRegReqCondition.Visible = true;
                        pnlcopyrequest.Visible = false;
                        if (Session["UserRolestable"] != null)
                        {
                            objdataUserRolestable = (DataTable)Session["UserRolestable"];

                            if (objdataUserRolestable != null && objdataUserRolestable.Rows.Count > 0)
                            {
                                if (objdataUserRolestable.Select("USER_ID='" + Session["G11EOSUserID"].ToString() + "' and Group_ID='HIMS SUPERVISOR'").Length > 0)
                                {
                                    ddlactionby.Enabled = true;
                                    LoadUserProfiles();
                                }
                                else
                                {
                                    ddlactionby.Enabled = false;
                                }
                            }
                        }
                    }
                    else if (stringapptype == "COPYREQUEST")
                    {
                        pnlBATCHREQBYPATIENT.Visible = false;
                        pnlBATCHREQBYreqderail.Visible = false;
                        pnlcopyrequest.Visible = true;
                        mpePdtcopyrequest.Show();
                        copyrequestpopupclearvalues();

                    }
                    else if (stringapptype == "BATCHREQUESTBYREQUESTDETAIL")
                    {
                        pnlBATCHREQBYPATIENT.Visible = false;
                        pnlBATCHREQBYPATIENT.Visible = false;
                        pnlBATCHREQBYreqderail.Visible = true;
                        pnlcopyrequest.Visible = false;
                        BindRequestData(null);  
                        btnattachment.Enabled = false;
                        btnattachment2.Enabled = false;
                        btnwaiver.Enabled = false;
                        btnwaiver2.Enabled = false;
                        btnAssignDocter.Enabled = false;
                        btnAssignDocter2.Enabled = false;

                        btnenquiry.Enabled = false;
                        btnpendingitems.Enabled = false; 

                        updpnlattachments.Visible = false;
                        pnlmenu5.Visible = false;
                        pnlmenu6.Visible = false;
                        pnlEnquiry.Visible = false;
                        pnlPendingItems.Visible = false;
                        pnlProcessHistory.Visible = false;

                        btnattachment.Visible = false;
                        btnwaiver.Visible = false;
                        btnAssignDocter.Visible = false;
                        btnenquiry.Visible = false;
                        btnpendingitems.Visible = false; 
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objdataUserRolestable = null;
                stringapptype = null;
            }
        } 
        private void LoadUserProfiles() 
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataSet objDataSet = null;
            DataTable objdatatableUsers = null;
            string[] stringOutputResult = null;
            string stringServiceType = "SERVER_SERVICE_LIST";
            string stringConfigId = "UserSummaryR1V2";
            string stringOrderBy = "";
            string stringexp012 = "";
            try
            { 
                if (Session["SSNLOADUSERS"] != null)
                {
                    objdatatableUsers = (DataTable)Session["SSNLOADUSERS"];
                }
                else
                {
                    objDataSet = CommonFunctions.SelectionServiceClient(stringServiceType, stringConfigId, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                    if (interrorcount == 0)
                    {
                        if (objDataSet != null && objDataSet.Tables.Count > 0 && objDataSet.Tables[0] != null && objDataSet.Tables[0].Rows.Count > 0)
                        {
                            objdatatableUsers = objDataSet.Tables[0];
                            Session["SSNLOADUSERS"] = objdatatableUsers;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                if (objdatatableUsers != null && objdatatableUsers.Rows.Count > 0)
                {
                    ddlactionby.DataValueField = "user_id";
                    ddlactionby.DataTextField = "user_name";
                    ddlactionby.DataSource = objdatatableUsers;
                    ddlactionby.DataBind();
                    ddlactionby.Items.Insert(0, new ListItem("", ""));
                }
                else
                {
                    ddlactionby.DataSource = objDataSet;
                    ddlactionby.DataBind();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {

                interrorcount = 0;
                intTotalRecord = 0;
                objDataSet = null;
                stringOutputResult = null;
                stringConfigId = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                stringexp012 = null;
            } 
        }
        protected void imgbtnNew_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                ClearAllControls();
                Session["REQUEST_FromSummary"] = null;
                Session["stringDMLIndicator"] = "I";
                InitializeVariables();
                ControlsEnabled(1);
                ControlsEnabled(4);
                ControlsEnabledByProStatus("MR CREATED");
                ClearHeaderValues();
                pnlprocess.Visible = false;
                pnlCreateRequestas.Visible = true;
                pnlprofilesummary.Visible = false; 
                pnlAfterRequest.Visible = false;
                pnlBeforeRequest.Visible = true;  
                imgbtnInstTransfer.Visible = false;
                imgbtnSearch.Visible = false;
                btnthreedot.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            } 
        } 
        private void ClearHeaderValues()
        {
            try
            {
                txtReqNo.Text = txtMRNumberHEADER.Text = txtMRStatus.Text = txtPatientNameHEADER.Text = txtHRNHEADER.Text = txtWritingandVerifyingStatus.Text= txtRequestorTypeHEADER.Text = txtRequestorHEADER.Text = "";
                chkpriorityflag.Checked = false;   
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        } 
        private void ControlsEnabledByProStatus(string stringProcessStatus)//fix
        {
            try
            {
                if (stringProcessStatus != null && stringProcessStatus.Trim().Length > 0)
                {
                    switch (stringProcessStatus.Trim().ToUpper())
                    {
                        case "CANCELLED":
                            {
                                PatientFieldenabledisable();
                                RequestorFieldenabledisable(false, true);
                                RequestDetailsFieldenabledisable(false, true);
                                WaiverInformationsFieldenabledisable(false, true);
                                AttachgmentsFieldenabledisable(false, true);
                                AssignationFieldenabledisable(false, true);
                                RemarksFieldenabledisable(false, true);
                                EnquiryFieldenabledisable(false, true);
                                PendingItemsFieldenabledisable(false, true);
                                ControlsDropdownValues("ADDREPORTTYPE", false);
                                ControlsDropdownValues("DEPARTMENTOU", false);
                                ControlsDropdownValues("REQUESTCATEGORY", false);
                                ControlsDropdownValues("REQUESTOR", false);
                                ControlsDropdownValues("REQUESTTYPE", false);
                                ControlsDropdownValues("REPORTTYPE", false);
                                ControlsDropdownValues("PROCESSTYPE", false);
                                ControlsDropdownValues("RECMODRECORDTYPE", false);
                                ControlsDropdownValues("RECEIVEDFROM", false);
                                ControlsDropdownValues("PURPOSE", false);
                                ControlsDropdownValues("REPORTFORMAT", false);
                                ControlsDropdownValues("PRIORITY", false);
                                ControlsDropdownValues("DELIVERBY", false);
                                ControlsDropdownValues("TYPEOFVISIT", false);
                                ControlsDropdownValues("COSTCENTER", false);
                                ControlsDropdownValues("RELATIONSHIPWITHPATIENT", false);
                                ControlsDropdownValues("REQUESTORTYPE", false);
                                txtAddDate_CalendarExtender.Enabled = false;
                                txtAddNoCopy.ReadOnly = true;
                                txtAddNoCopy.CssClass = "form-control ReadOnly";
                                ddlRecBy.Enabled = false;
                                ddlRecBy.CssClass = "form-control ReadOnly";
                                LkBtnnewpatient.Enabled = false;
                                LkBtnEdit.Enabled = false;
                                txtAddDate.ReadOnly = true;
                                txtAddDate.CssClass = "form-control ReadOnly";
                                gvNonMRList.Columns[gvNonMRList.Columns.Count - 1].Visible = false;
                                gvAttachments.Columns[gvAttachments.Columns.Count - 1].Visible = false;
                                txtReqNo.ReadOnly = true;
                                txtReqNo.CssClass = "form-control ReadOnly";
                                txtMRStatus.ReadOnly = true;
                                txtMRStatus.CssClass = "form-control ReadOnly";
                                imgbtnNew.Enabled = true;
                                imgbtnSaveAsDraft.Enabled = false;
                                imgbtnCONFIRM_MENU.Enabled = true;
                                imgbtnInstTransfer.Enabled = false; 
                                BtnAdd.Enabled = false;
                                lnkbtnselfReq.Enabled = false;
                                lnkbtnOthers.Enabled = false;
                                btnConfirm.Enabled = false;
                                LkBtnBiodata.Enabled = false;
                                lnkbtnNewReq.Enabled = false;
                                lnkbtnselfReq.Enabled = false;
                                lnkbtnEditReq.Enabled = false;
                                lnkbtnOthers.Enabled = false;
                                lnkbtnReqlist.Enabled = false;
                                lnkbtnaddattachments.Enabled = false;
                                lnkbtnpendingItemsadd.Enabled = false;
                                ddldoctorwaiver.Enabled = false;
                                ddldoctorwaiver.CssClass = "form-control ReadOnly";
                                lbtnClear.Enabled = false;
                                ddlhospitalrwaiver.Enabled = false;
                                ddlhospitalrwaiver.CssClass = "form-control ReadOnly";
                                 
                                txtAssignVerifier.ReadOnly = true;
                                txtAssignVerifier.CssClass = "form-control ReadOnly";
                                txtAssignDoctor.ReadOnly = true;
                                txtAssignDoctor.CssClass = "form-control ReadOnly";
                                txtDDate.ReadOnly = true;
                                txtDDate.CssClass = "form-control ReadOnly";
                                txtAddress.ReadOnly = true;
                                txtAddress.CssClass = "form-control ReadOnly";
                                txtReqAdd.ReadOnly = true;
                                txtReqAdd.CssClass = "form-control ReadOnly";
                                txtPhone.ReadOnly = true;
                                txtPhone.CssClass = "form-control ReadOnly";
                                txtReqID.ReadOnly = true;
                                txtReqID.CssClass = "form-control ReadOnly";
                                txtReqname.ReadOnly = true;
                                txtReqname.CssClass = "form-control ReadOnly";
                                txtReqname.Enabled = false;
                                txtReqname.CssClass = "form-control ReadOnly";
                                ddlReference.Enabled = false;
                                ddlReference.CssClass = "form-control ReadOnly";
                                txtReqRelationname.ReadOnly = true;
                                txtReqRelationname.CssClass = "form-control ReadOnly";

                                pnlForwarded.Enabled = false;
                                btnPendingTracing.Enabled = false;
                                btnPendingDespatch.Enabled = false;
                                btnPendingAssigned.Enabled = false;
                                btnPendingReport.Enabled = false;
                                btnPendingReleasetoHIMS.Enabled = false;
                                btnPendingSupVetting.Enabled = false;
                                btnPendingforwarding.Enabled = false;
                                btnPendingCollectInPerson.Enabled = false;

                                break;
                            }
                        case "MR CREATED":
                            {
                                PatientFieldenabledisable();
                                RequestorFieldenabledisable(true, false);
                                RequestDetailsFieldenabledisable(true, false); 
                                ControlsDropdownValues("ADDREPORTTYPE", true);
                                txtAddNoCopy.ReadOnly = false;
                                txtAddDate_CalendarExtender.Enabled = true; 
                                ddlRecBy.Enabled = true; 
                                LkBtnnewpatient.Enabled = true;
                                LkBtnEdit.Enabled = true;  
                                txtAddDate.ReadOnly = false;
                                gvNonMRList.Columns[gvNonMRList.Columns.Count - 1].Visible = true; 
                                txtReqNo.ReadOnly = true;
                                txtMRStatus.ReadOnly = true; 
                                imgbtnNew.Enabled = true;
                                imgbtnSaveAsDraft.Enabled = true;
                                imgbtnCONFIRM_MENU.Enabled = true;
                                BtnAdd.Enabled = true;
                                lnkbtnselfReq.Enabled = true;
                                lnkbtnOthers.Enabled = true;
                                btnConfirm.Enabled = true;

                                break;
                            }
                        case "VIEWONLY":
                            {
                                PatientFieldenabledisable();
                                RequestorFieldenabledisable(false, true);
                                RequestDetailsFieldenabledisable(false, true);
                                ControlsDropdownValues("ADDREPORTTYPE", false); 
                                txtReqRef.ReadOnly = true; 
                                txtAddDate_CalendarExtender.Enabled = false;
                                txtAddDate.ReadOnly = true; 
                                ddlRecBy.Enabled = false; 
                                txtAddNoCopy.ReadOnly = true;  
                                txtAddDate.ReadOnly = true;   
                                LkBtnnewpatient.Enabled = false;
                                LkBtnEdit.Enabled = false; 
                                gvNonMRList.Columns[gvNonMRList.Columns.Count - 1].Visible = false;  
                                txtReqNo.ReadOnly = true;
                                txtMRStatus.ReadOnly = true; 
                                imgbtnNew.Enabled = false;
                                imgbtnSaveAsDraft.Enabled = false;
                                imgbtnCONFIRM_MENU.Enabled = false;
                                BtnAdd.Enabled = false;
                                lnkbtnselfReq.Enabled = false;
                                lnkbtnOthers.Enabled = false;
                                btnConfirm.Enabled = false;  
                                lnkbtnAppoint.Enabled = false;  
                                lnkbtnpayment.Enabled = false;
                                lnkbtnCancel.Enabled = false; 
                                lnkbtnViewMedical.Enabled = false;
                                lnkbtnrecalhistory.Enabled = false;

                                break;
                            }
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        } 
        private void InitializeVariables() 
        {
            string stringbeid = "";
            string stringRecordTypes = "";
            try
            {
                txtCreateDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                txtReqDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                txtRecDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                txtCopies.Text = "1"; 
                txtRecFrmID.Text = "";
                txtRecFrmname.Text = "";
                updpnltxtRecFrmID.Update(); 
                txtPriorityID.Text = "NORMAL";
                txtPriorityname.Text = "NORMAL";
                updpnltxtPriorityID.Update(); 
                stringbeid = CommonFunctions.GETBussinessEntity();
                stringRecordTypes = "MR";
                txtRecTypeID.Text = stringRecordTypes;
                txtRecTypename.Text = "NORMAL MR";
                updpnltxtRecTypeID.Update(); 
                ddlBlockBill.SelectedIndex = 2;
                ddlWApp.SelectedIndex = 0;
                txtCreateDate.Enabled = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringbeid = null;
                stringRecordTypes = null;
            }
        }
        public bool IsValidEmailAddress(string email)
        {
            try
            {
                Regex regex = new Regex(@"^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$",
                RegexOptions.CultureInvariant | RegexOptions.Singleline);
                bool isValidEmail = regex.IsMatch(email);
                if (isValidEmail)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
        } 
        private void SaveData(string stringTYPE)
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            int intSuccessCount = 0;
            bool boolcheckvalidation = true;
            bool boolcheckvalidationemail = true;
            bool boolcheckvalidationvalidemail = true;
            bool boolClosedCase = false;
            bool boolNoCaseNoteFound = false;
            bool boolStatus = false;
            decimal decimalMRAmount = 0;
            decimal decimalOtherAmount = 0;
            string stringDRAFTRECORD = "";
            DataTable objDataTableReqDetail = null;
            DataRow objDataRow = null; 
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid001 = "";
            string stringServiceType001 = "";
            string stringexp = "";
            string stringServiceType02 = "";
            string stringformid1 = "";
            string stringMessageToDisplay = "";
            string stringMessage = "";
            string stringOverallMsg = "";
            string stringOrderBy = "";
            string stringWaiverApplication = "";
            string stringClosedCasePrompt = "";
            string stringNoCaseNoteFound = "";
            string stringNewReqID = "";
            string stringWaiverStatus = "";
            string stringDMLIndicator = "";
            string stringTemp = "";
            string stringMessageContent = "";
            try
            {
                stringClosedCasePrompt = "Please add remarks for a closed case.";
                stringNoCaseNoteFound = "There is no case note found for this patient."; 
                if (stringTYPE == "DRAFT")
                {
                    if (!ValidateControlsDraft())
                    {
                        boolcheckvalidation = false;
                    }
                }
                else
                {
                    if (!ValidatePatientDetails("EmptyValidation") || !ValidateRequestorDetails("EmptyValidation") || !ValidateRequestDetails("EmptyValidation") || !ValidateBusinessLogic() || !ValidateWaiver("EmptyValidation"))
                    {
                        boolcheckvalidation = false;
                    }
                    if (txtDelToID.Text.Trim().Length > 0 && txtDelToID.Text == "EMAIL")
                    {
                        if (txtReqEmail.Text.Trim().Length == 0)
                        {
                            boolcheckvalidationemail = false;
                        }
                        else
                        {
                            if (!IsValidEmailAddress(txtReqEmail.Text.Trim()))
                            {
                                boolcheckvalidationvalidemail = false;
                            }
                        }
                    } 
                } 
                if (boolcheckvalidation)
                {
                    if (boolcheckvalidationemail)
                    {
                        if (boolcheckvalidationvalidemail)
                        {
                            if (ddlApplicationStatus.SelectedItem != null && ddlApplicationStatus.SelectedItem.Value.Length > 0 && ddlApplicationStatus.SelectedItem.Value == "CLOSED")
                            {
                                boolClosedCase = true;
                                stringMessageContent = "This Application is Closed";
                                ClientScript.RegisterStartupScript(typeof(String), "ClientScript", "<script language='JavaScript'>  window.alert('" + stringMessageContent + "');</script>");
                            } 
                            stringDMLIndicator = Session["stringDMLIndicator"].ToString().Trim().ToUpper();
                            if (stringDMLIndicator == "I" && txtReqNo.Text.Trim().Length > 0) { stringDMLIndicator = "U"; Session["stringDMLIndicator"] = "U"; }
                             
                            if (txtMRStatus.Text.Trim().Contains("DRAFT"))
                            {
                                stringDRAFTRECORD = "DRAFT";
                            }
                            else
                            {
                                stringDRAFTRECORD = "SAVE";
                            }
                            if (GetData1(stringDMLIndicator, out string stringID, stringTYPE, "", out string stringBatchseqID))
                            {
                                if (stringID.Length > 0)
                                {
                                    stringNewReqID = stringID;
                                }  
                                stringDMLIndicator = Session["stringDMLIndicator"].ToString();

                                objDataTableReqDetail = GetRequestDetails(stringNewReqID, "");
                                if (objDataTableReqDetail != null && objDataTableReqDetail.Rows.Count > 0)
                                {
                                    objDataRow = objDataTableReqDetail.Rows[0];
                                    txtReqNo.Text = stringNewReqID;
                                    txtMRStatus.Text = objDataRow["mr_status"].ToString();
                                    stringTemp = objDataRow["mr_amount"].ToString();
                                    if (stringTemp != null && stringTemp.Trim().Length > 0)
                                    { decimal.TryParse(stringTemp, out decimalMRAmount); }

                                    stringTemp = objDataRow["other_amount"].ToString();
                                    if (stringTemp != null && stringTemp.Trim().Length > 0)
                                    { decimal.TryParse(stringTemp, out decimalOtherAmount); }
                                } 
                                if (stringDMLIndicator != null && stringDMLIndicator.Trim().Length > 0)
                                {    
                                    if (SaveAdditionalReports(stringNewReqID, stringTYPE))
                                    {
                                        if (SaveAttachments(stringNewReqID, stringTYPE))
                                        {
                                            if (SavewaiverDetails(stringDMLIndicator, stringNewReqID, stringTYPE))
                                            {
                                                if (SaveAssignDocteorandVerifier(stringNewReqID, stringTYPE))
                                                {
                                                    if (stringTYPE != "DRAFT")
                                                    {
                                                        stringformid001 = "FC0001R1V1";
                                                        stringServiceType001 = "DEFAULT";
                                                        stringexp = "";
                                                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType001, stringformid001, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                                                        if (interrorcount == 0)
                                                        {
                                                            if (objDatasetResult != null && objDatasetResult.Tables["t10"].Rows.Count == 0)
                                                            {
                                                                objDataRow = objDatasetResult.Tables["t10"].NewRow();
                                                                objDataRow["be_id"] = CommonFunctions.GETBussinessEntity().ToString();
                                                                objDataRow["Request_ID"] = stringNewReqID.ToUpper();
                                                                objDatasetResult.Tables["t10"].Rows.Add(objDataRow);
                                                                objDatasetResult.Tables["t10"].Rows[0].RowState.ToString();
                                                            }
                                                            if (objDatasetResult != null && objDatasetResult.Tables["t10"].Rows.Count > 0)
                                                            {
                                                                objDatasetResult = objDatasetResult.GetChanges();
                                                                stringServiceType02 = "OperationServiceDML";
                                                                stringformid1 = "FC0001R1V1";
                                                                objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType02, objDatasetResult.GetChanges(), stringformid1, out int intErrorCount, out stringOutputResult);
                                                                if (intErrorCount != 0)
                                                                {
                                                                    Errorpopup(stringOutputResult);
                                                                } 
                                                            } 
                                                        }
                                                        else
                                                        {
                                                            Errorpopup(stringOutputResult);
                                                        } 
                                                        boolStatus = true;
                                                        intSuccessCount++; 
                                                        if (ddlWApproved.SelectedItem != null && ddlWApproved.SelectedValue.Length > 0)
                                                        {
                                                            stringWaiverStatus = ddlWApproved.SelectedValue.ToString();
                                                        }
                                                        if (ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.Length > 0)
                                                        {
                                                            stringWaiverApplication = ddlWApp.SelectedValue.ToString();
                                                        }
                                                        if ((stringWaiverApplication.ToUpper() == "NO") || (stringWaiverApplication.ToUpper() == "YES" && (stringWaiverStatus == "HALFWAIVER" || stringWaiverStatus == "REJECTED")))
                                                        {
                                                            if (ddlBlockBill.SelectedItem.Value == "NO")
                                                            {
                                                                if ((stringDMLIndicator == "I") || (stringDRAFTRECORD.Length > 0 && stringDRAFTRECORD == "DRAFT"))
                                                                {
                                                                    objDataTableReqDetail = GetRequestDetails(stringNewReqID, "");
                                                                    if (objDataTableReqDetail != null && objDataTableReqDetail.Rows.Count > 0)
                                                                    {
                                                                        objDataRow = objDataTableReqDetail.Rows[0]; 
                                                                        stringTemp = objDataRow["mr_amount"].ToString();
                                                                        if (stringTemp != null && stringTemp.Trim().Length > 0)
                                                                        { decimal.TryParse(stringTemp, out decimalMRAmount); }

                                                                        stringTemp = objDataRow["other_amount"].ToString();
                                                                        if (stringTemp != null && stringTemp.Trim().Length > 0)
                                                                        { decimal.TryParse(stringTemp, out decimalOtherAmount); }
                                                                    }
                                                                }
                                                                if ((decimalMRAmount + decimalOtherAmount) > 0)
                                                                {
                                                                    if (SavePendingItems(stringNewReqID))
                                                                    {
                                                                        Session["stringDMLIndicator"] = "U"; 
                                                                        if ((stringDMLIndicator != null && stringDMLIndicator == "I") || (stringDRAFTRECORD.Length > 0 && stringDRAFTRECORD == "DRAFT"))
                                                                        { 
                                                                            if (boolNoCaseNoteFound) { stringMessageToDisplay = "Record Created Successfully. New Request No. is " + stringNewReqID + ". " + stringNoCaseNoteFound + " Do you want to generate payment now?"; }
                                                                            else { stringMessageToDisplay = "Record Created Successfully. New Request No. is " + stringNewReqID + ". Do you want to generate payment now?"; }
                                                                            lblreqID.Text = stringNewReqID;
                                                                            modelpopupRedirectPaymentscreen.Show();
                                                                            UpdatePanel2.Visible = true;
                                                                            boolStatus = false;
                                                                        } 
                                                                    }
                                                                }
                                                            }
                                                        } 
                                                    }
                                                    else if (stringTYPE == "DRAFT")
                                                    {
                                                        boolStatus = true;
                                                        intSuccessCount++;
                                                    }
                                                }
                                            }
                                        }
                                    } 
                                } 
                                if (boolStatus && intSuccessCount > 0)
                                {
                                    ControlsEnabled(2);
                                    if ((stringDMLIndicator != null && stringDMLIndicator.Trim().ToUpper() == "I") || (chkCOPYQUERY.Checked == true))
                                    {
                                        Session["REQUEST_FromSummary"] = stringNewReqID;
                                        stringMessage = "Record Created Successfully. New Request No. is " + stringNewReqID + ". ";
                                        if (boolNoCaseNoteFound) { stringMessage = stringMessage + stringNoCaseNoteFound; }

                                        ShowMessageandReloadPage(this, stringMessage, "FC0001R1V1.aspx");

                                    }
                                    else if (stringDMLIndicator != null && stringDMLIndicator.Trim().ToUpper() == "U")
                                    {
                                        Session["REQUEST_FromSummary"] = stringNewReqID;
                                        stringMessage = "Record updated successfully.";
                                        if (boolClosedCase) { stringMessage = stringMessage + stringClosedCasePrompt; }
                                        if (boolNoCaseNoteFound) { stringMessage = stringMessage + stringNoCaseNoteFound; }
                                        ShowMessageandReloadPage(this, stringMessage, "FC0001R1V1.aspx");
                                    }
                                    txtHRN.Focus();
                                }
                                Session["stringWaiverStatus"] = null; 
                            } 
                        }
                        else
                        {
                            stringOverallMsg = "You must enter the Valid Recipient Email" + "\\r\\n";
                            CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                            txtReqEmail.ReadOnly = false;
                            txtReqEmail.CssClass = "form-control ReadOnly";
                            TABActive(2);
                        }
                    }
                    else
                    {
                        stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n";
                        stringOverallMsg += "- Recipient Email" + "\\r\\n";
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        txtReqEmail.ReadOnly = false;
                        txtReqEmail.CssClass = "form-control ReadOnly";
                        TABActive(2);
                    } 
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                stringOutputResult = null;
                stringOrderBy = null;
                stringWaiverApplication = null;
                stringClosedCasePrompt = null;
                stringNoCaseNoteFound = null;
                stringNewReqID = null;
                stringWaiverStatus = null;
                stringDMLIndicator = null;
                stringTemp = null;
                stringMessageContent = null;
                stringDRAFTRECORD = null;
                objDataTableReqDetail = null;
                objDataRow = null; 
                stringformid001 = null;
                stringServiceType001 = null;
                stringexp = null;
                stringServiceType02 = null;
                stringformid1 = null;
                stringMessageToDisplay = null;
                stringMessage = null;
                stringOverallMsg = null;
            }
        } 
        private bool SavePendingItems(string stringRequestID) 
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            bool boolStatus = true; 
            bool boolInsertPatientConsent = true;
            string[] stringOutputResult = null;
            string[] stringarrayPendingItems = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            string stringServiceType = "DEFAULT";
            string stringRemovePendingItems = "";
            string stringexp = ""; 
            DataSet objDatasetResult = null;
            DataRow objdatarow = null;
            try
            { 
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables["t13"].Rows.Count == 0)
                    {
                        if (ConfigurationManager.AppSettings["RemovePayment"] != null && ConfigurationManager.AppSettings["RemovePayment"].ToString().Trim().Length > 0)
                        {
                            stringRemovePendingItems = ConfigurationManager.AppSettings["RemovePayment"].ToString();
                            stringarrayPendingItems = stringRemovePendingItems.Split(',');
                            foreach (string value in stringarrayPendingItems)
                            {
                                if (txtRptTypeID.Text.Trim() == value)
                                {
                                    boolInsertPatientConsent = false;
                                }
                            }
                        }
                        if (boolInsertPatientConsent)
                        {
                            if (stringRequestID != null && stringRequestID.Trim().ToUpper() != "NULL" && stringRequestID.Trim().Length > 0)
                            {
                                objdatarow = objDatasetResult.Tables["t13"].NewRow();
                                objdatarow["be_id"] = CommonFunctions.GETBussinessEntity().ToString(); 
                                objdatarow["Pen_ID"] = "PEND001";
                                objdatarow["Request_ID"] = stringRequestID;
                                objdatarow["Pending_Status"] = "PENDING";
                                objdatarow["Long_Name"] = "";
                                objdatarow["Remarks"] = "";
                                objdatarow["Due_days"] = 14;
                                objdatarow["delmark"] = "N";
                                objdatarow["reference_date_1"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                                CommonFunctions.AssignAuditLogDetails(ref objdatarow); 
                                objDatasetResult.Tables["t13"].Rows.Add(objdatarow); 
                                objDatasetResult = objDatasetResult.GetChanges();
                                stringServiceType = "OperationServiceDML"; 
                                objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);
                                if (intErrorCount == 0)
                                {
                                    boolStatus = true;
                                }
                                else
                                {
                                    Errorpopup(stringOutputResult);
                                    boolStatus = false;
                                }

                            }
                        }
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
                return boolStatus;  
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null;
                objdatarow = null;
                stringRemovePendingItems = null;
                stringarrayPendingItems = null;
                stringexp = null; 
            }
            return false;
        } 
        private void ShowMessageandReloadPage(Page page, string stringMessageContent, string stringURL)
        {
            try
            {
                if (stringMessageContent.Trim().Length > 0)
                {
                    stringMessageContent = Server.HtmlEncode(stringMessageContent);
                    stringMessageContent = CommonFunctions.EncodeToJavaString(stringMessageContent.Trim());
                    ScriptManager.RegisterClientScriptBlock(page, page.GetType(), "function", "<script language='JavaScript'>  bootbox.alert('" + stringMessageContent + "');window.location='" + stringURL + "';</script>", false);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }  
        #region Patient Profiles
        protected void LkBtnnewpatient_Click(object sender, EventArgs e)
        {
            try
            {
                ClearValues(0);
                Response.Redirect("FA0017R1V1.aspx", true);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }
        protected void LkBtnEdit_Click(object sender, EventArgs e)
        {
            string stringHRNID = string.Empty;
            string stringexp012 = string.Empty;
            string stringInput = string.Empty;
            string stringEncrypyValue = string.Empty;
            DataSet objDatasetPatDetails = null;
            try
            {
                object[] objControls = new object[]
                     {
                txtHRN,
                     };

                if (txtHRN.Text.Trim().Length == 0)
                {
                    Biodatapopupclearvalues();
                    mpePnlbiodattfc0001.Show();
                    pnlbiodatta.Visible = true;
                    PopulatePager(0, intpageIndex);
                }
                else
                {
                    if (txtHRN.Text.Trim().Length > 0 && DoNonCGHHrnValidation(objControls))
                    {
                        if (Session["PARTICULARPATIENTPROFILE"] != null)
                        {
                            objDatasetPatDetails = (DataSet)Session["PARTICULARPATIENTPROFILE"];
                        }
                        else
                        {
                            stringInput = txtHRN.Text.Trim();
                            if (stringInput.Length > 0)
                            {
                                stringEncrypyValue = CommonFunctions.HRNtoEncrypyValue(stringInput);

                                if (stringEncrypyValue.Length > 0 && txtReqNo.Text.ToString().Length > 0)
                                {
                                    stringexp012 = " And mrpats.hrn_id= '" + stringEncrypyValue.Trim().ToUpper() + "'";
                                }
                                else
                                {
                                    stringexp012 = " And mrpats.hrn_id= '" + stringEncrypyValue.Trim().ToUpper() + "'  And mrpats.delmark= 'N'";
                                }
                                objDatasetPatDetails = LoadPatientProfileDetail(stringexp012);
                            } 
                           
                        } 
                        if (objDatasetPatDetails != null && objDatasetPatDetails.Tables.Count > 0 && objDatasetPatDetails.Tables[0].Rows.Count > 0)
                        {
                            stringHRNID = objDatasetPatDetails.Tables[0].Rows[0]["PATIENT_ID"].ToString();
                            Session["FA0017R1V1_id"] = stringHRNID;
                            Session["FA0017R1V1_idGrid"] = objDatasetPatDetails;
                            Response.Redirect("FA0017R1V1.aspx", true);
                        }
                        else
                        { 
                            Session["FA0017R1V1_id"] = null;
                            Session["FA0017R1V1_idGrid"] = null;
                        } 
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringHRNID = null;
                objDatasetPatDetails = null;
            }
        }
        protected void rbtEMR_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rbtEMR.Checked == true)
                {
                    ddlReference.Enabled = true;
                    ddlReference.CssClass = "form-control Manditory";
                }
                else
                {
                    ddlReference.Enabled = false;
                    ddlReference.CssClass = "form-control ReadOnly";
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void rbtnboth_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rbtnboth.Checked == true)
                {
                    ddlReference.Enabled = true;
                    ddlReference.CssClass = "form-control ReadOnly";
                }
                else
                {
                    ddlReference.Enabled = false;
                    ddlReference.CssClass = "form-control ReadOnly";
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void rbt1EMR_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rbt1EMR.Checked == true)
                {
                    ddlReference.Enabled = false;
                    ddlReference.CssClass = "form-control ReadOnly";
                }
                else
                {
                    ddlReference.Enabled = true;
                    ddlReference.CssClass = "form-control ReadOnly";
                }
                if (ddlReference.SelectedItem != null)
                {
                    ddlReference.SelectedIndex = 0;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        private void SelectText(TextBox objTextbox)
        {
            try
            {
                if (objTextbox != null)
                {
                    ClientScript.RegisterStartupScript(typeof(String), "ClientScript", "<script language='JavaScript'>document.getElementById('" + objTextbox.ClientID + "').select();</script>");
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        } 
        //for Clear patient detail into grid
        protected void btnclearpatientgridbatchreq_Click(object sender, EventArgs e)
        {

        }
        #endregion
        #region ClearValues 
        private void ClearValues(int intIndex) 
        {
            try
            {
                switch (intIndex)
                {
                    case 0:  // PATIENTS BLOCK
                        {

                            txtName.Text = "";
                            txtDOB.Text = "";
                            txtAddress.Text = "";
                            txtGender.Text = "";
                            txtPostCode.Text = "";
                            txtPhone.Text = "";
                            txtEmail.Text = "";
                            txtDDate.Text = "";
                            chkDeath.Checked = false; 
                            if (ddlReference.SelectedItem != null)
                            {
                                ddlReference.SelectedIndex = 0;
                            } 
                            lblDDate.Visible = true;
                            txtDDate.Visible = true;
                            break;

                        }
                    case 1:  
                        {
                            txtRegReferenceNo.Text = "";
                            txtReqOthers.Text = "";
                            txtRequestorTypename.Text = "";
                            txtRequestorTypename.CssClass = "form-control ReadOnly";
                            txtRequestorTypeID.Text = ""; 
                            txtReqRelationID.Text = "";
                            txtReqRelationname.Text = "";
                            txtReqAdd.Text = "";
                            txtMailAdd.Text = "";
                            txtReqEmail.Text = "";
                            txtReqPhNo.Text = "";
                            chkinternalstaff.Checked = false;
                            ddlBlockBill.ClearSelection();
                            txtcostcenterID.Text = "";
                            txtcostcentername.Text = "";
                            ddlContactPreference.ClearSelection();
                            txtReqMobileNo.Text = "";

                            break;
                        }
                    case 2: // REQUEST DETAIL BLOCK
                        {
                            string stringbeid = CommonFunctions.GETBussinessEntity();
                            txtCreateDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                            txtDOHA.Text = "";
                            txtReqDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                            txtRecDate.Text = DateTime.Now.ToString("dd-MM-yyyy"); 
                            txtRecFrmID.Text = "";
                            txtRecFrmname.Text = "";
                            updpnltxtRecFrmID.Update(); 
                            txtReqTypeID.Text = "";
                            txtReqTypename.Text = "";
                            updpnltxtReqTypeID.Update();  
                            txtDueDate.Text = ""; 
                            string stringProcessType = "MR";
                            txtProcessTypeID.Text = stringProcessType; 
                            txtProcessTypename.Text = "";
                            updpnltxtProcessTypeID.Update(); 
                            txtPurposeID.Text = "";
                            txtPurposename.Text = "";
                            updpnltxtPurposeID.Update(); 
                            string stringRecordType = "CN";
                            txtRecModReqTypeID.Text = stringRecordType;
                            txtRecModReqTypename.Text = "CASE NOTES"; 
                            updpnlRecModReqTypeID.Update();   
                            txtRptFormatID.Text = "";
                            txtRptFormatname.Text = "";
                            updpnltxtRptFormatID.Update(); 
                            string stringRecordTypes = "MR"; 
                            txtRecTypeID.Text = stringRecordTypes;
                            txtRecTypename.Text = "ORDINARY MEDICAL REPORT"; 
                            updpnltxtRecTypeID.Update(); 
                            string stringPriority = "NORMAL"; 
                            txtPriorityID.Text = stringPriority;
                            txtPriorityname.Text = "NORMAL";
                            updpnltxtPriorityID.Update(); 
                            txtCopies.Text = "1";
                            string stringddlPMI = "NO";
                            ddlPMI.ClearSelection();
                            if (ddlPMI.Items.FindByValue(stringddlPMI) != null)
                            { ddlPMI.Items.FindByValue(stringddlPMI).Selected = true; }
                            string stringddlCAT = "NO";
                            ddlCAT.ClearSelection();
                            if (ddlCAT.Items.FindByValue(stringddlCAT) != null)
                            { ddlCAT.Items.FindByValue(stringddlCAT).Selected = true; }
                            txtDelToID.Text = ""; 
                            txtDelToname.Text = "";
                            updpnltxtDelToID.Update(); 
                            txttypeofvisitID.Text = "";
                            txtcasevisitno.Text = "";
                            txtAccidentDate.Text = "";
                            txtAppDate.Text = "";
                            txtAssessmentDate.Text = "";
                            txtrelatedMRref.Text = "";
                            txtReassDate.Text = ""; 
                            break;
                        }
                    case 3: // ADDITIONAL NON MR
                        {
                            txtAddRptTypeID.Text = "";
                            txtAddRptTypename.Text = "";
                            updpnltxtAddRptTypeID.Update();
                            txtAddNoCopy.Text = "";
                            txtAddDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                            gvNonMRList.DataSource = null;
                            gvNonMRList.DataBind();
                            lblTotalRecords.InnerText = "0";
                            Session["ADD_RPT_TYPES"] = null;
                            break;
                        }
                    case 4: // ATTACHMENTS
                        {  
                            ddlCategory.ClearSelection();
                            txtRemark.Text = "";
                            lbltotalrecAttachments.InnerText = "0";
                            gvAttachments.DataSource = null;
                            gvAttachments.DataBind();
                            Session["ADD_ATTACHMENTS"] = null;
                            break;
                        }
                    case 5: // WAVER details
                        {
                            ddlWApp.ClearSelection();
                            txtWaiverrmk.Text = "";
                            txtFinAssformdte.Text = "";
                            txtFinAsstodte.Text = "";
                            txtDoctorActionDate.Text = "";
                            ddlFinancialdte.ClearSelection();
                            ddlDoctorDeclineReason.ClearSelection();
                            ddldoctorwaiver.ClearSelection();
                            ddlhospitalrwaiver.ClearSelection();
                            txtHospitalActionDate.Text = "";
                            ddlHospitalDeclineReason.ClearSelection();
                            ddlWApproved.ClearSelection(); 
                            string stringwaiver = "NO";
                            if (ddlWApp.Items.FindByValue(stringwaiver) != null)
                            {
                                ddlWApp.ClearSelection();
                                ddlWApp.Items.FindByValue(stringwaiver).Selected = true;
                            }
                            if (ddlhospitalrwaiver.Items.FindByValue("PENDING") != null)
                            {
                                ddlhospitalrwaiver.ClearSelection();
                                ddlhospitalrwaiver.Items.FindByValue("PENDING").Selected = true;
                            }
                            if (ddldoctorwaiver.Items.FindByValue("PENDING") != null)
                            {
                                ddldoctorwaiver.ClearSelection();
                                ddldoctorwaiver.Items.FindByValue("PENDING").Selected = true;
                            }
                            if (ddlWApproved.Items.FindByValue("PENDING") != null) 
                            {
                                ddlWApproved.ClearSelection();
                                ddlWApproved.Items.FindByValue("PENDING").Selected = true;
                            }
                            ddlhospitalrwaiver.Enabled = false;
                            ddlhospitalrwaiver.CssClass = "form-control ReadOnly";
                            ddldoctorwaiver.Enabled = false;
                            ddldoctorwaiver.CssClass = "form-control ReadOnly";
                            txtHospitalActionDate.Enabled = false;
                            txtHospitalActionDate.CssClass = "form-control ReadOnly";
                            txtDoctorActionDate.Enabled = false;
                            txtDoctorActionDate.CssClass = "form-control ReadOnly";
                            ddlWApproved.Enabled = false;
                            ddlWApproved.CssClass = "form-control ReadOnly";
                            ddlDoctorDeclineReason.Enabled = false;
                            ddlDoctorDeclineReason.CssClass = "form-control ReadOnly";
                            ddlHospitalDeclineReason.Enabled = false;
                            ddlHospitalDeclineReason.CssClass = "form-control ReadOnly";
                            txtFinAsstodte.Enabled = false;
                            txtFinAsstodte.CssClass = "form-control ReadOnly";
                            txtWaiverrmk.Enabled = false;
                            txtWaiverrmk.CssClass = "form-control ReadOnly";
                            txtFinAssformdte.Enabled = false;
                            txtFinAssformdte.CssClass = "form-control ReadOnly";
                            ddlFinancialdte.Enabled = false;
                            ddlFinancialdte.CssClass = "form-control ReadOnly";
                            break;
                        }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        private void ClearAllControls() 
        {
            try
            {
                ClearValues(0);
                ClearValues(1);
                ClearValues(2);
                ClearValues(3);
                ClearValues(4);
                ClearValues(5);
                ClearValues(6);
                ClearValues(7);
                ClearValues(8);
                txtHRN.Focus();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        private void DefaultEnable() 
        {
            try
            {
                txtcostcentername.Enabled = false;
                txtcostcentername.CssClass = "form-control ReadOnly"; 
                txtCloseDate.Enabled = false;
                txtCloseDate.CssClass = "form-control ReadOnly"; 
                txtReqAdd.Enabled = false;
                txtReqAdd.CssClass = "form-control ReadOnly"; 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }


        private void ControlsEnabled(int intIndex)//??????
        {
            try
            {
                switch (intIndex)
                {
                    case 1:
                        { 
                            break;
                        }
                    case 2:
                        { 
                            break;
                        }
                    case 3:
                        {
                            ControlsDropdownValues("REQUESTOR", false);
                            ControlsDropdownValues("REQUESTTYPE", false);
                            ControlsDropdownValues("PROCESSTYPE", false); 
                            txtCopies.ReadOnly = true;
                            txtCopies.CssClass = "form-control ReadOnly";
                            txtHRN.CssClass = "form-control ReadOnly";
                            txtHRN.ReadOnly = true; 
                            break;
                        }
                    case 4:
                        {
                            ControlsDropdownValues("REQUESTTYPE", true);
                            ControlsDropdownValues("REPORTTYPE", true);
                            txtCopies.ReadOnly = false;
                            txtCopies.CssClass = "form-control ReadOnly";
                            txtHRN.ReadOnly = false;
                            txtHRN.CssClass = "form-control ReadOnly"; 
                            break;
                        }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }

        #endregion

        #region special info
        private void ShowSpecialInfo() 
        {
            string stringBoID = ""; 
            string stringSpecialInfo = "";
            bool boolCurrentDayOne = true;
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (txtHRN.Text.Trim().Length > 0)
                {  
                    stringSpecialInfo = CommonFunctions.GetSpecialInfo(stringBoID, txtHRN.Text.Trim().ToUpper(), boolCurrentDayOne);
                    if (stringSpecialInfo != null && stringSpecialInfo.Trim().Length > 0) { CommonFunctions.ShowMessageboot(this, stringSpecialInfo); }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringBoID = null; 
                stringSpecialInfo = null;
            }
        }
        #endregion

        #region validate HRN
        public bool DoNonCGHHrnValidation(object[] objControls)
        {
            bool boolMROHRN = false;
            bool boolStatus = true;
            string stringResult = "";
            string stringInput = "";
            try
            {
                if (objControls[0] is TextBox)
                {
                    var objControl = (TextBox)objControls[0];

                    if (objControl.Text.Trim().Length > 0)
                    {
                        stringInput = objControl.Text.Trim().ToUpper();
                        if (!stringInput.StartsWith("X") && !stringInput.StartsWith("Y") && !stringInput.StartsWith("MRO"))
                        {
                            stringInput = stringInput.Replace(" ", "");
                            if (stringInput.Trim().Length != 9)
                            {
                                boolStatus = false;
                            }
                        }
                        else if (stringInput.StartsWith("X") || stringInput.StartsWith("Y"))
                        {
                            stringInput = stringInput.Replace(" ", "");
                            if (stringInput.Trim().Length > 0 && stringInput.Trim().Length != 12)
                            {
                                boolStatus = false;
                            }
                            else
                            {
                                if (stringInput != null && stringInput.Length > 2)
                                {
                                    if (char.IsLetter(stringInput[0]) && char.IsLetter(stringInput[1]))
                                    {
                                        objControl.Text = stringInput[0] + stringInput.Substring(2, stringInput.Length - 2) + stringInput[1];
                                    }
                                    else if (stringInput.Length == 12 && char.IsLetter(stringInput[0]) && char.IsLetter(stringInput[11]))
                                    { }
                                    else { boolStatus = false; }
                                }

                            }
                        }
                        else if (stringInput.StartsWith("MRO"))
                        {
                            stringInput = stringInput.Replace(" ", "");
                            if (stringInput.Trim().Length > 0 && stringInput.Trim().Length != 9)
                            {
                                boolStatus = false;
                            }
                            else
                            {
                                if (stringInput.Trim().Length == 9)
                                {
                                    stringInput = stringInput.Trim();
                                    long longTemp = 0;
                                    if (!long.TryParse(stringInput.Remove(0, 3), out longTemp))
                                    {
                                        CommonFunctions.ShowMessageboot(this, "Invalid MRN");
                                        return false;
                                    }
                                    else
                                    {
                                        boolMROHRN = true;
                                    }
                                }

                            }
                        }

                        if (boolStatus)
                        {
                            if (!boolMROHRN)
                            {
                                stringResult = CommonFunctions.ValidateHRN(objControl.Text.Trim().ToUpper(), out string stringFormmatHrnID);
                                if (stringResult != "SUCCESS" && stringResult != "")
                                {
                                    CommonFunctions.ShowMessageboot(this, "Invalid MRN");
                                    return false;
                                }
                                else if (stringResult == "SUCCESS")
                                {
                                    objControl.Text = ArrangeHRNNumber(stringFormmatHrnID);
                                    return true;
                                }
                                else
                                {
                                    objControl.Text = ArrangeHRNNumber(stringResult);
                                    return true;
                                }
                            }
                            else
                            {
                                return true;
                            }


                        }
                        else
                        {
                            CommonFunctions.ShowMessageboot(this, "Invalid MRN");
                            objControl.Focus(); 
                            return false;
                        }
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringResult = null;
                stringInput = null;
            }
            return false;
        }
        private string ArrangeHRNNumber(string stringHRN)//fix
        {
            string stringSub1 = "";
            string stringSub2 = "";
            string stringResult = "";
            try
            {
                if (stringHRN.Trim().Length > 0)
                {
                    if (stringHRN.ToUpper().StartsWith("X") || stringHRN.ToUpper().StartsWith("Y"))
                    {
                        if (stringHRN.ToUpper().Length == 10 || stringHRN.ToUpper().Length == 12)
                        {
                            stringSub1 = stringHRN.Substring(0, 2);
                            stringSub2 = stringHRN.Substring(2, stringHRN.Length - 2);
                            stringResult = stringSub1.Trim()[0].ToString() + stringSub2.Trim() + stringSub1.Trim()[1];
                            return stringResult;
                        }
                    }
                    else if (stringHRN.Trim().Length == 10)
                    {
                        stringSub1 = stringHRN.Substring(0, 3);
                        stringSub2 = stringHRN.Substring(3, stringHRN.Length - 3);
                        stringResult = stringSub1.Trim()[0].ToString() + stringSub2.Trim() + stringSub1.Trim()[1];
                        return stringResult;
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringSub1 = null;
                stringSub2 = null;
                stringResult = null;
            }
            return stringHRN;
        }
        #endregion

        #region Error Popup
        private void Errorpopup(string[] stringOutputResult)//fix
        {
            try
            {

                lblErrorType.Text = stringOutputResult[1];
                lblErrorCode.Text = stringOutputResult[0];
                txterrormsg.Text = stringOutputResult[2];
                Modelpopuperror.Show();
                pnlerrorpopup.Visible = true;
                if(pnlreportpopup.Visible == true)
                { 
                    mdlrbt.Show();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        #endregion

        #region biodata popup
        //for new
        protected void btnbiodatapopupnew_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                Biodatapopupclearvalues();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        //for search
        protected void btnbiodatapopupsearch_Click(object sender, ImageClickEventArgs e)
        {
            int intRecordFrom = 0;
            int intRecordTo = int.MaxValue;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0017R1V1";
            string stringOrderBy = "";
            string stringexp012 = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringEncrypyValue = "";
            bool boolstatus = true;
            string stringServiceType = "List1R1V1";
            DataTable objDataTable = null;
            DataSet objDatasetResult = null;
            try
            {
                if (txthrnbiodata.Text.Length > 0 || txthrnNamebiodata.Text.Length > 0)
                {
                    object[] objControls = new object[]
                      {
                        txthrnbiodata,
                      };
                    if (txthrnbiodata.Text.Trim().Length > 0 && !DoNonCGHHrnValidation(objControls))
                    {
                        boolstatus = false;
                    }
                    if (boolstatus)
                    {  
                        if (txthrnbiodata.Text.Trim().Length > 0)
                        {
                            stringEncrypyValue = CommonFunctions.HRNtoEncrypyValue(txthrnbiodata.Text.Trim());

                            if (txthrnbiodata.Text.Trim().Length > 0 && stringEncrypyValue.Length > 0)
                            {
                                stringexp012 += "And mrpats.be_id= '" + stringbeid + "' And mrpats.hrn_id= '" + stringEncrypyValue.Trim().ToUpper() + "' ";
                            }
                        } 
                        if (txthrnNamebiodata.Text.Length > 0 )
                        {
                            stringexp012 += "And mrpats.be_id= '" + stringbeid + "'  AND(UPPER(inref.INDEX_VALUE)  LIKE UPPER('%" + txthrnNamebiodata.Text.Trim().Replace("'", "''") + "%')) ";
                        } 
                        stringexp012 += " And mrpats.delmark= 'N'"; 

                        intRecordFrom = intrecFrom;
                        intRecordTo = intrecTo;

                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intRecordFrom, intRecordTo, out intTotalRecord, out interrorcount, out stringOutputResult);

                        PopulatePager(intTotalRecord, intpageIndex);
                        if (interrorcount == 0)
                        { 
                            if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                            {
                                objDataTable = objDatasetResult.Tables["t1"];
                            }
                            if (objDataTable != null && objDataTable.Rows.Count > 0)
                            {
                                gvlistbiodatapopup.DataSource = objDataTable;
                                gvlistbiodatapopup.DataBind();
                            }
                            else
                            {
                                gvlistbiodatapopup.DataSource = null;
                                gvlistbiodatapopup.DataBind();
                                CommonFunctions.ShowMessageboot(this, "No Records Found");
                                txthrnbiodata.Focus();
                            }
                        }
                        else
                        {
                            CommonFunctions.ShowMessageboot(this, stringOutputResult[0]);
                        }
                    }
                    mpePnlbiodattfc0001.Show();
                    pnlbiodatta.Visible = true;
                    txthrnbiodata.Focus();
                }
                else
                {
                    CommonFunctions.ShowMessageboot(this, "Please Fill at least One Criteria");
                    mpePnlbiodattfc0001.Show();
                    pnlbiodatta.Visible = true;
                    txthrnbiodata.Focus();
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDataTable = null;
                stringexp012 = null;
                stringbeid = null;
                stringEncrypyValue = null;
                stringServiceType = null; 
            }
        }
        //for clearvalues
        private void Biodatapopupclearvalues()
        {
            try
            {
                txthrnbiodata.Text = "";
                txthrnNamebiodata.Text = "";
                gvlistbiodatapopup.DataSource = null;
                gvlistbiodatapopup.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        } 
        //for popup linkbutton click in grid
        protected void lnkbtnpopupHRN_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringHRNId = "";
            string stringHRNname = "";
            string stringpatientID = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length >= 3  )
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringHRNId = stringValues[0];
                            stringHRNname = stringValues[1];
                            stringpatientID = stringValues[2];

                            txtHRN.Text = stringHRNId;
                            txtpatientID.Text = stringpatientID;
                            mpePnlbiodattfc0001.Hide();
                            btnHRNsearch_Click(null, null);
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringHRNId = null;
                stringHRNname = null;
                stringpatientID = null;
                stringValues = null;
            }
        }

        #endregion 
        #region load dropdowns

        private void LoadRequestCategory() 
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord =int.MaxValue;
            DataTable objdatatableCategory = null; 
            DataRow[] objdatarow = null;
            string[] stringOutputResult = null;
            string stringformid = "FA0035R1V1";
            string stringOrderBy = "depcat.ORDER_ID asc,depcat.short_name asc";
            string stringDeleteMark = "N";
            string stringexp012 = "";
            string stringServiceType = "";
            try
            {
                ddlCategory.Items.Clear();  
                stringexp012 = "And depcat.delmark= '" + stringDeleteMark.ToString() + "'";
                stringServiceType = "List1R1V1";
                if (Session["SSNLOADCATEGORY"] != null)
                {
                    objdatatableCategory = (DataTable)Session["SSNLOADCATEGORY"];
                }
                else
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objdatatableCategory = objDatasetResult.Tables["t1"];
                            Session["SSNLOADCATEGORY"] = objdatatableCategory;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                if (objdatatableCategory != null && objdatatableCategory.Rows.Count > 0)
                {
                    objdatarow = objdatatableCategory.Select("ID <> 'COMPLETED MEDICAL REPORTS'");
                    if (objdatarow != null && objdatarow.Length > 0)
                    {
                        objdatatableCategory = objdatarow.CopyToDataTable();
                    }
                    ddlCategory.DataTextField = "short_name";
                    ddlCategory.DataValueField = "id";
                    ddlCategory.DataSource = objdatatableCategory;
                    ddlCategory.DataBind();
                    ddlCategory.Items.Insert(0, new ListItem("", ""));
                    ddlCategory.SelectedIndex = 1;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objdatatableCategory = null;
                stringDeleteMark = null;
                stringexp012 = null;
                stringServiceType = null;
            }
        } 
        private void LoadSOURCEOFREFERENCE() 
        {
            DataSet objDatasetResult = null;
            DataTable objdatatableLoadSOURCEOFREFERENCE = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string[] stringOutputResult = null;
            string stringformid = "FA0014R1V1";
            string stringOrderBy = "lst.priority asc";
            string stringbeid = CommonFunctions.GETBussinessEntity(); 
            string stringcondition = "";
            string stringServiceType = "List1R1V1";
            try
            { 
                stringcondition = "And lst.be_id= '" + stringbeid + "'  AND  lst.LSTGRP_ID='SOURCE_OF_REFERENCE'AND lst.delmark='N' ";  
                if (Session["SSNLOADSOURCEOFREFERENCE"] != null)
                {
                    objdatatableLoadSOURCEOFREFERENCE = (DataTable)Session["SSNLOADSOURCEOFREFERENCE"];
                }
                else 
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objdatatableLoadSOURCEOFREFERENCE = objDatasetResult.Tables["t1"];
                            Session["SSNLOADSOURCEOFREFERENCE"] = objdatatableLoadSOURCEOFREFERENCE;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                } 
                if (objdatatableLoadSOURCEOFREFERENCE != null && objdatatableLoadSOURCEOFREFERENCE.Rows.Count > 0)
                {
                    ddlReference.DataTextField = "short_name";
                    ddlReference.DataValueField = "lst_id";
                    ddlReference.DataSource = objdatatableLoadSOURCEOFREFERENCE;
                    ddlReference.DataBind();
                    ddlReference.Items.Insert(0, new ListItem("", ""));
                    ddlReference.SelectedIndex = 1;
                }
                else
                {
                    ddlReference.DataSource = null;
                    ddlReference.DataBind();
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                objdatatableLoadSOURCEOFREFERENCE = null; 
                stringcondition = null;
                stringServiceType = null;
            }
        }

        private void LoadFinancialAssistanceStatus()
        {
            DataSet objDatasetResult = null;
            DataTable objdatatableLoadSOURCEOFREFERENCE = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string[] stringOutputResult = null;
            string stringformid = "FA0014R1V1";
            string stringOrderBy = "lst.short_name asc";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringcondition = "";
            string stringServiceType = "List1R1V1";
            try
            {
                stringcondition = "And lst.be_id= '" + stringbeid + "'  AND  lst.LSTGRP_ID='Financial_Assistance_Status'AND lst.delmark='N' ";
               
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                    {
                        objdatatableLoadSOURCEOFREFERENCE = objDatasetResult.Tables["t1"];
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
             
                if (objdatatableLoadSOURCEOFREFERENCE != null && objdatatableLoadSOURCEOFREFERENCE.Rows.Count > 0)
                {
                    ddlFinancialdte.DataTextField = "short_name";
                    ddlFinancialdte.DataValueField = "lst_id";
                    ddlFinancialdte.DataSource = objdatatableLoadSOURCEOFREFERENCE;
                    ddlFinancialdte.DataBind();
                    ddlFinancialdte.Items.Insert(0, new ListItem("", ""));
                }
                else
                {
                    ddlFinancialdte.DataSource = null;
                    ddlFinancialdte.DataBind();
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                objdatatableLoadSOURCEOFREFERENCE = null;
                stringcondition = null;
                stringServiceType = null;
            }
        }
        private DataTable GetRequestorInfo(string stringReqID)//fix
        {
            DataTable objDataTable = null;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringexp012 = "";
            try
            {
                if (stringReqID != null && stringReqID.Trim().Length > 0)
                {
                    stringexp012 = "be_id= '" + stringbeid + "' and RptReq_ID= '" + stringReqID.ToString() + "'";

                    objDataTable = CommonFunctions.GETRequestors(stringexp012);

                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        return objDataTable;
                    }

                    return null;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringbeid = null;
                stringexp012 = null;
            }
            return null;
        }

        #endregion 

        #region waiwer
        protected void ddlWApp_SelectedIndexChanged(object sender, EventArgs e) 
        {
            string stringTemp = "";
            try
            {
                if (ddlWApp.SelectedItem != null && ddlWApp.SelectedItem.Value == "YES")
                {
                    txtHospitalActionDate.Text = txtDoctorActionDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                    ddlhospitalrwaiver.Enabled = true;
                    ddlhospitalrwaiver.CssClass = "form-control Manditory";
                    ddlFinancialdte.Enabled = true;
                    ddlFinancialdte.CssClass = "form-control Manditory";
                    ddldoctorwaiver.Enabled = true;
                    ddldoctorwaiver.CssClass = "form-control Manditory";
                    txtHospitalActionDate.CssClass = "form-control Manditory";
                    txtHospitalActionDate.Enabled = true;
                    txtDoctorActionDate.Enabled = true;
                    txtDoctorActionDate.CssClass = "form-control ReadOnly";
                    txtFinAsstodte.CssClass = "form-control Manditory";
                    txtFinAsstodte.Enabled = true;
                    txtWaiverrmk.Enabled = true;
                    txtWaiverrmk.CssClass = "form-control optional";
                    txtFinAssformdte.Enabled = true;
                    txtFinAssformdte.CssClass = "form-control Manditory";
                    stringTemp = "PENDING";
                    if (ddlhospitalrwaiver.Items.FindByValue(stringTemp) != null)
                    {
                        ddlhospitalrwaiver.ClearSelection();
                        ddlhospitalrwaiver.Items.FindByValue(stringTemp).Selected = true;
                    }

                    if (ddldoctorwaiver.Items.FindByValue(stringTemp) != null)
                    {
                        ddldoctorwaiver.ClearSelection();
                        ddldoctorwaiver.Items.FindByValue(stringTemp).Selected = true;
                    }
                }
                else
                {
                    //ddlhospitalrwaiver.Enabled = false;
                    //ddlhospitalrwaiver.CssClass = "form-control ReadOnly";
                    //ddldoctorwaiver.Enabled = false;
                    //ddldoctorwaiver.CssClass = "form-control ReadOnly";
                    //ddlFinancialdte.Enabled = false;
                    //ddlFinancialdte.CssClass = "form-control ReadOnly";
                    //txtHospitalActionDate.Enabled = false;
                    //txtHospitalActionDate.CssClass = "form-control ReadOnly";
                    //txtDoctorActionDate.Enabled = false;
                    //txtDoctorActionDate.CssClass = "form-control ReadOnly";
                    //ddlWApproved.Enabled = false;
                    //ddlDoctorDeclineReason.Enabled = false;
                    //ddlHospitalDeclineReason.Enabled = false;
                    //txtFinAsstodte.Enabled = false;
                    //txtFinAsstodte.CssClass = "form-control ReadOnly";
                    //txtWaiverrmk.Enabled = false;
                    //txtWaiverrmk.CssClass = "form-control ReadOnly";
                    //txtFinAssformdte.Enabled = false;
                    //txtFinAssformdte.CssClass = "form-control ReadOnly"; 
                    //ddlhospitalrwaiver.ClearSelection();
                    //ddldoctorwaiver.ClearSelection();
                    //ddlDoctorDeclineReason.ClearSelection();
                    //ddlHospitalDeclineReason.ClearSelection();
                    //txtHospitalActionDate.Text = txtDoctorActionDate.Text = "";
                    //ddlWApproved.SelectedIndex = 0;
                    ClearValues(5);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringTemp = null;
            }
        } 
        #endregion

        #region SAVE DATA
        private bool GetData1(string stringDMLIND, out string stringID, string stringTYPE, string stringRequestMODE, out string stringBatchseqID)//fix
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataRow objdatarow = null; 
            DataRow objdatarowBATCHProfile = null; 
            DataTable objDataTableBATCHREQUEST = null;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringuserid = "";
            string stringServiceType1 = "DEFAULT";
            string stringexp = ""; 
            string stringServiceType = "";
            string stringOrderBy = "";
            string stringformid = "FC0001R1V1";
            stringID = "";
            stringBatchseqID = "";
            try
            {
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count == 0)
                    {
                        objdatarow = objDatasetResult.Tables["t1"].NewRow();
                        //header
                        objdatarow["BE_ID"] = CommonFunctions.GETBussinessEntity().ToString();
                        objdatarow["Request_ID"] = txtReqNo.Text.ToUpper();
                        objdatarow["MR_ID"] = txtMRNumberHEADER.Text.ToUpper();
                        objdatarow["MR_Status"] = txtMRStatus.Text.Trim().ToUpper();
                        objdatarow["Bypass_Pen_Items"] = chkBypassPendingItems.Checked ? "Y" : "N";
                        if (Session["G11EOSUserID"] != null)
                        {
                            stringuserid = Session["G11EOSUserID"].ToString();
                        }
                        objdatarow["MR_USER_ID"] = stringuserid;
                        if (ddlactionby.SelectedItem != null) 
                        {
                            objdatarow["ACTION_BY"] = ddlactionby.SelectedItem.Value.ToUpper();
                        }
                        if (chkpriorityflagINITIAL.Checked == true || chkpriorityflag.Checked == true)
                        {
                            objdatarow["PRIORITY_FLAG"] = "Y";
                        }
                        else
                        {
                            objdatarow["PRIORITY_FLAG"] = "N";
                        }
                        SavePatientDetails(objdatarow);
                        SaveRequestor(objdatarow);
                        SaveRequestDetail(stringTYPE, objdatarow);              
                        CommonFunctions.AssignAuditLogDetails(ref objdatarow); 
                        objDatasetResult.Tables["t1"].Rows.Add(objdatarow); 
                        if (stringDMLIND == "U" && chkCOPYQUERY.Checked == false)
                        {
                            objDatasetResult.Tables["t1"].AcceptChanges();
                            objDatasetResult.Tables["t1"].Rows[0]["delmark"] = "N";
                        } 
                        if (stringRequestMODE == "BATCHREQUESTBYPATIENT")
                        {
                            if (Session["ADD_BATCHPROFILE"] != null)
                            {
                                objDataTableBATCHREQUEST = (DataTable)Session["ADD_BATCHPROFILE"];
                                if (objDataTableBATCHREQUEST != null && objDataTableBATCHREQUEST.Rows.Count > 0)
                                {
                                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                                    {
                                        objdatarowBATCHProfile = objDatasetResult.Tables["t1"].Rows[0];
                                    } 
                                    for (int intIndex = 0; intIndex < objDataTableBATCHREQUEST.Rows.Count - 1; intIndex++)
                                    {
                                        objdatarow = objDatasetResult.Tables["t1"].NewRow();
                                        objdatarow.ItemArray = objdatarowBATCHProfile.ItemArray;
                                        objDatasetResult.Tables["t1"].Rows.Add(objdatarow);
                                    }
                                    stringBatchseqID = DateTime.Now.ToString("HHmmssff").ToUpper();
                                    for (int intIndex = 0; intIndex < objDataTableBATCHREQUEST.Rows.Count; intIndex++)
                                    { 
                                        objDatasetResult.Tables["t1"].Rows[intIndex]["patient_id"] = objDataTableBATCHREQUEST.Rows[intIndex]["patient_id"].ToString();  
                                        objDatasetResult.Tables["t1"].Rows[intIndex]["EMR"] = objDataTableBATCHREQUEST.Rows[intIndex]["EMR"].ToString();
                                        objDatasetResult.Tables["t1"].Rows[intIndex]["SOURCE_REF"] = objDataTableBATCHREQUEST.Rows[intIndex]["SOURCE_REF"].ToString();
                                        objDatasetResult.Tables["t1"].Rows[intIndex]["BATCH_SEQ_NO"] = stringBatchseqID;  
                                        objDatasetResult.Tables["t1"].AcceptChanges();
                                    }
                                    for (int intIndex3 = 0; intIndex3 < objDatasetResult.Tables["t1"].Rows.Count; intIndex3++)
                                    {
                                        objDatasetResult.Tables["t1"].Rows[intIndex3].SetAdded();
                                    }
                                }
                            }
                        }
                        else if (stringRequestMODE == "BATCHREQUESTBYREQUESTDETAIL")
                        {
                            if (Session["ADD_BATCHREQUEST"] != null)
                            {
                                objDataTableBATCHREQUEST = (DataTable)Session["ADD_BATCHREQUEST"];
                                if (objDataTableBATCHREQUEST != null && objDataTableBATCHREQUEST.Rows.Count > 0)
                                {
                                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                                    {
                                        objdatarowBATCHProfile = objDatasetResult.Tables["t1"].Rows[0];
                                    } 
                                    for (int intIndex = 0; intIndex < objDataTableBATCHREQUEST.Rows.Count - 1; intIndex++)
                                    {
                                        objdatarow = objDatasetResult.Tables["t1"].NewRow();
                                        objdatarow.ItemArray = objdatarowBATCHProfile.ItemArray;
                                        objDatasetResult.Tables["t1"].Rows.Add(objdatarow);
                                    } 
                                    stringBatchseqID = DateTime.Now.ToString("HHmmssff").ToUpper(); 
                                    for (int intIndex = 0; intIndex < objDataTableBATCHREQUEST.Rows.Count; intIndex++)
                                    {
                                        SaveRequestDetailUpdate(stringTYPE, objDataTableBATCHREQUEST, objDatasetResult.Tables["t1"], intIndex, stringBatchseqID);
                                        objDatasetResult.Tables["t1"].AcceptChanges();
                                    } 
                                    for (int intIndex3 = 0; intIndex3 < objDatasetResult.Tables["t1"].Rows.Count; intIndex3++)
                                    {
                                        objDatasetResult.Tables["t1"].Rows[intIndex3].SetAdded();
                                    }
                                }
                            }
                        }
                        objDatasetResult = objDatasetResult.GetChanges();
                        stringServiceType = "MRISService_DataManipulationR1V1";
                        objDatasetResult = CommonFunctions.DataManipulationExcelR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);

                        if (intErrorCount == 0)
                        { 
                            if (stringOutputResult[0] != null && stringOutputResult[0].Length > 0)
                            {
                                stringID = stringOutputResult[0].ToString();
                            } 
                            if (Session["ReqAdd_ADDRESS"] != null) { Session.Remove("ReqAdd_ADDRESS"); }
                            Session["ReqAdd_ADDRESS"] = txtReqAdd.Text.ToUpper(); 
                            if (Session["MailAdd_ADDRESS"] != null) { Session.Remove("MailAdd_ADDRESS"); }
                            Session["MailAdd_ADDRESS"] = txtMailAdd.Text.Trim().ToUpper(); 
                            if (Session["PAT_ADDRESS"] != null) { Session.Remove("PAT_ADDRESS"); }
                            Session["PAT_ADDRESS"] = txtAddress.Text.Trim().ToUpper();

                            return true;
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                            return false;
                        }
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);

                return false;
            }
            finally
            {
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null;
                objdatarow = null;
                stringuserid = null;
                stringServiceType1 = null;
                stringexp = null;
            }
        }

        private void SavePatientDetails(DataRow objdatarow)
        {
            try
            {
                objdatarow["PATIENT_ID"] = txtpatientID.Text.Trim().ToUpper();
                if (rbtEMR.Checked == true)
                {
                    objdatarow["EMR"] = "Y";
                }
                else if (rbt1EMR.Checked == true)
                {
                    objdatarow["EMR"] = "N";
                }
                else if (rbtnboth.Checked == true)
                {
                    objdatarow["EMR"] = "BOTH";
                }
                if (ddlReference.SelectedItem != null)
                {
                    objdatarow["SOURCE_REF"] = ddlReference.SelectedItem.Value.ToUpper();
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            } 
        }
        private void SaveRequestor(DataRow objdatarow)
        {
            try
            {
                objdatarow["RptReq_ID"] = txtReqID.Text.Trim().ToUpper();
                if (txtReqID.Text.Trim() == "OTHERS")
                { objdatarow["REQUEST_OTHERS"] = txtReqOthers.Text.Trim().ToUpper(); } 
                objdatarow["REGREF_NO"] = txtRegReferenceNo.Text.Trim();
                objdatarow["ReqTyp_ID"] = txtRequestorTypeID.Text.Trim();
                objdatarow["Req_Relation"] = txtReqRelationID.Text.Trim();
                objdatarow["Req_Address"] = txtReqAdd.Text.ToUpper();
                objdatarow["Req_Mail_Address"] = txtMailAdd.Text.ToUpper();
                objdatarow["Email"] = txtReqEmail.Text.Trim();
                objdatarow["Req_By_PhNo"] = txtReqPhNo.Text;
                objdatarow["INRNL_STF_REQ"] = chkinternalstaff.Checked ? "Y" : "N";
                if (ddlBlockBill.SelectedItem != null)
                {
                    objdatarow["Block_Billing"] = ddlBlockBill.SelectedItem.Value;
                } 
                objdatarow["COST_CENTER"] = txtcostcenterID.Text.ToUpper();
                if (ddlContactPreference.SelectedItem != null)
                { objdatarow["Contact_Preference"] = ddlContactPreference.SelectedItem.Value; }
                objdatarow["Requested_By"] = txtReqBy.Text.ToUpper();
                objdatarow["MobileNo"] = txtReqMobileNo.Text.Trim();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        private void SaveRequestDetail(string stringTYPE, DataRow objdatarow)
        {
            try
            {
                objdatarow["Create_Date"] = CommonFunctions.ConvertToDateTime(txtCreateDate.Text, "dd-MM-yyyy");
                if (txtDOHA.Text.Trim().Length > 0)
                { objdatarow["DOHA"] = CommonFunctions.ConvertToDateTime(txtDOHA.Text, "dd-MM-yyyy"); }
                if (txtReqDate.Text.Trim().Length > 0)
                    objdatarow["Request_Date"] = CommonFunctions.ConvertToDateTime(txtReqDate.Text, "dd-MM-yyyy");
                if (txtRecDate.Text.Trim().Length > 0)
                { objdatarow["Receive_Date"] = CommonFunctions.ConvertToDateTime(txtRecDate.Text, "dd-MM-yyyy"); }
                objdatarow["Received_From"] = txtRecFrmID.Text.Trim();
                objdatarow["RECEIVED_FROM_NAME"] = txtRecFrmname.Text.Trim();
                objdatarow["RequestTyp_ID"] = txtReqTypeID.Text.Trim();
                objdatarow["REQUEST_TYPE_NAME"] = txtReqTypename.Text.Trim();
                objdatarow["RptTyp_ID"] = txtRptTypeID.Text.Trim();
                objdatarow["REPORT_TYPE_SHORT_NAME"] = txtRptTypename.Text.Trim();
                objdatarow["MRP_ID"] = txtProcessTypeID.Text.Trim();
                objdatarow["MR_PROCESS_NAME"] = txtProcessTypename.Text.Trim();
                objdatarow["RptPur_ID"] = txtPurposeID.Text.Trim();
                objdatarow["REPORT_PURPOSE_NAME"] = txtPurposename.Text.Trim();
                objdatarow["MODREQ_TYPE"] = txtRecModReqTypeID.Text.Trim();
                objdatarow["RECORD_TYPE_NAME"] = txtRecModReqTypename.Text.Trim();
                objdatarow["RptFmt_ID"] = txtRptFormatID.Text.Trim();
                objdatarow["REPORT_FORMAT_NAME"] = txtRptFormatname.Text.Trim();
                objdatarow["RecTyp_ID"] = txtRecTypeID.Text.Trim();
                objdatarow["MR_RECORD_TYPE_NAME"] = txtRecTypename.Text.Trim();
                objdatarow["PRIORITY"] = txtPriorityID.Text.Trim();
                objdatarow["MR_PRIORITY_SHORT_NAME"] = txtPriorityname.Text.Trim();
                if (txtDueDate.Text.Trim().Length > 0)
                { objdatarow["Due_Date"] = CommonFunctions.ConvertToDateTime(txtDueDate.Text, "dd-MM-yyyy"); }
                objdatarow["No_Of_Copies"] = Convert.ToInt32(txtCopies.Text);
                objdatarow["Con_Info_Doc"] = txtConInforDoctor.Text.ToString();
                if (ddlPMI.SelectedItem != null)
                { objdatarow["PMI"] = ddlPMI.SelectedItem.Value; }
                if (ddlCAT.SelectedItem != null)
                { objdatarow["CAT_A"] = ddlCAT.SelectedItem.Value; }
                objdatarow["DelMod_ID"] = txtDelToID.Text.Trim();
                objdatarow["DELIVERY_MODE_NAME"] = txtDelToname.Text.Trim();
                objdatarow["LOAN_FORM"] = txtLoanFromInst.Text.Trim();
                objdatarow["Type_visit"] = txttypeofvisitID.Text.Trim();
                objdatarow["TYPEOF_VISIT"] = txttypeofvisitname.Text.Trim(); 
                objdatarow["case_visit_no"] = txtcasevisitno.Text.ToString();
                if (txtAccidentDate.Text.Trim().Length > 0)
                { objdatarow["Accident_Date"] = CommonFunctions.ConvertToDateTime(txtAccidentDate.Text, "dd-MM-yyyy"); }
                if (txtAppDate.Text.Trim().Length > 0)
                { objdatarow["TCU_DATE"] = CommonFunctions.ConvertToDateTime(txtAppDate.Text, "dd-MM-yyyy"); }
                if (txtAssessmentDate.Text.Trim().Length > 0)
                { objdatarow["assessment_date"] = CommonFunctions.ConvertToDateTime(txtAssessmentDate.Text, "dd-MM-yyyy"); }
                objdatarow["Related_MR_Ref"] = txtrelatedMRref.Text.ToString();
                if (txtReassDate.Text.Trim().Length > 0)
                { objdatarow["Reasses_Date"] = CommonFunctions.ConvertToDateTime(txtReassDate.Text, "dd-MM-yyyy"); }
                objdatarow["Req_Reference"] = txtReqRef.Text.ToUpper();
                objdatarow["LAST_SOURCE_1"] = "NEW";
                objdatarow["Received_Mode"] = "NA";
                objdatarow["Reassessment_Ref_No"] = txtReqRefNo.Text; 
                if (ddlApplicationStatus.SelectedItem != null)
                { objdatarow["APPLICATION_STATUS"] = ddlApplicationStatus.SelectedItem.Value; }
                else { objdatarow["APPLICATION_STATUS"] = "OPEN"; }
                objdatarow["delmark"] = "N";

                if (chkCOPYQUERY.Checked == true)
                {
                    objdatarow["LAST_SOURCE_1"] = "Y";
                }
                if (stringTYPE == "DRAFT")
                {
                    objdatarow["DRAFT_FLAG"] = "YES";
                }
                else
                {
                    objdatarow["DRAFT_FLAG"] = "NO";
                }
                objdatarow["Dept_ID"] = txtDepartmentOUID.Text.Trim();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        private void SaveRequestDetailUpdate(string stringTYPE, DataRow[] objdatarow)
        {
            try
            {
                objdatarow[0]["Create_Date"] = CommonFunctions.ConvertToDateTime(txtCreateDate.Text, "dd-MM-yyyy");
                if (txtDOHA.Text.Trim().Length > 0)
                { objdatarow[0]["DOHA"] = CommonFunctions.ConvertToDateTime(txtDOHA.Text, "dd-MM-yyyy"); }
                if (txtReqDate.Text.Trim().Length > 0)
                    objdatarow[0]["Request_Date"] = CommonFunctions.ConvertToDateTime(txtReqDate.Text, "dd-MM-yyyy");
                if (txtRecDate.Text.Trim().Length > 0)
                { objdatarow[0]["Receive_Date"] = CommonFunctions.ConvertToDateTime(txtRecDate.Text, "dd-MM-yyyy"); }
                objdatarow[0]["Received_From"] = txtRecFrmID.Text.Trim();
                objdatarow[0]["RECEIVED_FROM_NAME"] = txtRecFrmname.Text.Trim();
                objdatarow[0]["RequestTyp_ID"] = txtReqTypeID.Text.Trim();
                objdatarow[0]["REQUEST_TYPE_NAME"] = txtReqTypename.Text.Trim();
                objdatarow[0]["RptTyp_ID"] = txtRptTypeID.Text.Trim();
                objdatarow[0]["REPORT_TYPE_SHORT_NAME"] = txtRptTypename.Text.Trim();
                objdatarow[0]["MRP_ID"] = txtProcessTypeID.Text.Trim();
                objdatarow[0]["MR_PROCESS_NAME"] = txtProcessTypename.Text.Trim();
                objdatarow[0]["RptPur_ID"] = txtPurposeID.Text.Trim();
                objdatarow[0]["REPORT_PURPOSE_NAME"] = txtPurposename.Text.Trim();
                objdatarow[0]["MODREQ_TYPE"] = txtRecModReqTypeID.Text.Trim();
                objdatarow[0]["RECORD_TYPE_NAME"] = txtRecModReqTypename.Text.Trim();
                objdatarow[0]["RptFmt_ID"] = txtRptFormatID.Text.Trim();
                objdatarow[0]["REPORT_FORMAT_NAME"] = txtRptFormatname.Text.Trim();
                objdatarow[0]["RecTyp_ID"] = txtRecTypeID.Text.Trim();
                objdatarow[0]["MR_RECORD_TYPE_NAME"] = txtRecTypename.Text.Trim();
                objdatarow[0]["PRIORITY"] = txtPriorityID.Text.Trim();
                objdatarow[0]["MR_PRIORITY_SHORT_NAME"] = txtPriorityname.Text.Trim();
                if (txtDueDate.Text.Trim().Length > 0)
                { objdatarow[0]["Due_Date"] = CommonFunctions.ConvertToDateTime(txtDueDate.Text, "dd-MM-yyyy"); }
                objdatarow[0]["No_Of_Copies"] = Convert.ToInt32(txtCopies.Text);
                objdatarow[0]["Con_Info_Doc"] = txtConInforDoctor.Text.ToString();
                if (ddlPMI.SelectedItem != null)
                { objdatarow[0]["PMI"] = ddlPMI.SelectedItem.Value; }
                if (ddlCAT.SelectedItem != null)
                { objdatarow[0]["CAT_A"] = ddlCAT.SelectedItem.Value; }
                objdatarow[0]["DelMod_ID"] = txtDelToID.Text.Trim();
                objdatarow[0]["DELIVERY_MODE_NAME"] = txtDelToname.Text.Trim();
                objdatarow[0]["LOAN_FORM"] = txtLoanFromInst.Text.Trim();
                objdatarow[0]["Type_visit"] = txttypeofvisitID.Text.Trim();
                objdatarow[0]["TYPEOF_VISIT"] = txttypeofvisitname.Text.Trim(); 
                objdatarow[0]["case_visit_no"] = txtcasevisitno.Text.ToString();
                if (txtAccidentDate.Text.Trim().Length > 0)
                { objdatarow[0]["Accident_Date"] = CommonFunctions.ConvertToDateTime(txtAccidentDate.Text, "dd-MM-yyyy"); }
                if (txtAppDate.Text.Trim().Length > 0)
                { objdatarow[0]["TCU_DATE"] = CommonFunctions.ConvertToDateTime(txtAppDate.Text, "dd-MM-yyyy"); }
                if (txtAssessmentDate.Text.Trim().Length > 0)
                { objdatarow[0]["assessment_date"] = CommonFunctions.ConvertToDateTime(txtAssessmentDate.Text, "dd-MM-yyyy"); }
                objdatarow[0]["Related_MR_Ref"] = txtrelatedMRref.Text.ToString();
                if (txtReassDate.Text.Trim().Length > 0)
                { objdatarow[0]["Reasses_Date"] = CommonFunctions.ConvertToDateTime(txtReassDate.Text, "dd-MM-yyyy"); }
                objdatarow[0]["Req_Reference"] = txtReqRef.Text.ToUpper();
                objdatarow[0]["LAST_SOURCE_1"] = "NEW";
                objdatarow[0]["Received_Mode"] = "NA";
                objdatarow[0]["Reassessment_Ref_No"] = txtReqRefNo.Text; 
                if (ddlApplicationStatus.SelectedItem != null)
                { objdatarow[0]["APPLICATION_STATUS"] = ddlApplicationStatus.SelectedItem.Value; }
                else { objdatarow[0]["APPLICATION_STATUS"] = "OPEN"; }
                objdatarow[0]["delmark"] = "N"; 
                if (chkCOPYQUERY.Checked == true)
                {  objdatarow[0]["LAST_SOURCE_1"] = "Y";  }
                if (stringTYPE == "DRAFT")
                {   objdatarow[0]["DRAFT_FLAG"] = "YES";  }
                else
                {   objdatarow[0]["DRAFT_FLAG"] = "NO";  }
                objdatarow[0]["Dept_ID"] = txtDepartmentOUID.Text.Trim();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        private void SaveRequestDetailUpdate(string stringTYPE, DataTable objDataTableBATCHREQUEST, DataTable objdatableBatchReq, int intIndex, string stringBatchseqID)
        {
            try
            {
                objdatableBatchReq.Rows[intIndex]["Create_Date"] = objDataTableBATCHREQUEST.Rows[intIndex]["Create_Date"];
                objdatableBatchReq.Rows[intIndex]["DOHA"] = objDataTableBATCHREQUEST.Rows[intIndex]["DOHA"];
                objdatableBatchReq.Rows[intIndex]["Request_Date"] = objDataTableBATCHREQUEST.Rows[intIndex]["Request_Date"];
                objdatableBatchReq.Rows[intIndex]["Receive_Date"] = objDataTableBATCHREQUEST.Rows[intIndex]["Receive_Date"];
                objdatableBatchReq.Rows[intIndex]["Received_From"] = objDataTableBATCHREQUEST.Rows[intIndex]["Received_From"];
                objdatableBatchReq.Rows[intIndex]["RequestTyp_ID"] = objDataTableBATCHREQUEST.Rows[intIndex]["RequestTyp_ID"];
                objdatableBatchReq.Rows[intIndex]["RptTyp_ID"] = objDataTableBATCHREQUEST.Rows[intIndex]["RptTyp_ID"]; 
                objdatableBatchReq.Rows[intIndex]["MRP_ID"] = objDataTableBATCHREQUEST.Rows[intIndex]["MRP_ID"];
                objdatableBatchReq.Rows[intIndex]["RptPur_ID"] = objDataTableBATCHREQUEST.Rows[intIndex]["RptPur_ID"];
                objdatableBatchReq.Rows[intIndex]["MODREQ_TYPE"] = objDataTableBATCHREQUEST.Rows[intIndex]["MODREQ_TYPE"];
                objdatableBatchReq.Rows[intIndex]["RptFmt_ID"] = objDataTableBATCHREQUEST.Rows[intIndex]["RptFmt_ID"];
                objdatableBatchReq.Rows[intIndex]["RecTyp_ID"] = objDataTableBATCHREQUEST.Rows[intIndex]["RecTyp_ID"];
                objdatableBatchReq.Rows[intIndex]["Priority"] = objDataTableBATCHREQUEST.Rows[intIndex]["Priority"];
                objdatableBatchReq.Rows[intIndex]["Due_Date"] = objDataTableBATCHREQUEST.Rows[intIndex]["Due_Date"];
                objdatableBatchReq.Rows[intIndex]["No_Of_Copies"] = objDataTableBATCHREQUEST.Rows[intIndex]["No_Of_Copies"];
                objdatableBatchReq.Rows[intIndex]["Con_Info_Doc"] = objDataTableBATCHREQUEST.Rows[intIndex]["Con_Info_Doc"];
                objdatableBatchReq.Rows[intIndex]["PMI"] = objDataTableBATCHREQUEST.Rows[intIndex]["PMI"];
                objdatableBatchReq.Rows[intIndex]["CAT_A"] = objDataTableBATCHREQUEST.Rows[intIndex]["CAT_A"];
                objdatableBatchReq.Rows[intIndex]["DelMod_ID"] = objDataTableBATCHREQUEST.Rows[intIndex]["DelMod_ID"];
                objdatableBatchReq.Rows[intIndex]["LOAN_FORM"] = objDataTableBATCHREQUEST.Rows[intIndex]["LOAN_FORM"];
                objdatableBatchReq.Rows[intIndex]["Type_visit"] = objDataTableBATCHREQUEST.Rows[intIndex]["Type_visit"];
                objdatableBatchReq.Rows[intIndex]["case_visit_no"] = objDataTableBATCHREQUEST.Rows[intIndex]["case_visit_no"];
                objdatableBatchReq.Rows[intIndex]["Accident_Date"] = objDataTableBATCHREQUEST.Rows[intIndex]["Accident_Date"];
                objdatableBatchReq.Rows[intIndex]["TCU_DATE"] = objDataTableBATCHREQUEST.Rows[intIndex]["TCU_DATE"];
                objdatableBatchReq.Rows[intIndex]["assessment_date"] = objDataTableBATCHREQUEST.Rows[intIndex]["assessment_date"];
                objdatableBatchReq.Rows[intIndex]["Related_MR_Ref"] = objDataTableBATCHREQUEST.Rows[intIndex]["Related_MR_Ref"];
                objdatableBatchReq.Rows[intIndex]["Reasses_Date"] = objDataTableBATCHREQUEST.Rows[intIndex]["Reasses_Date"];
                objdatableBatchReq.Rows[intIndex]["Req_Reference"] = objDataTableBATCHREQUEST.Rows[intIndex]["Req_Reference"];
                objdatableBatchReq.Rows[intIndex]["LAST_SOURCE_1"] = objDataTableBATCHREQUEST.Rows[intIndex]["LAST_SOURCE_1"];
                objdatableBatchReq.Rows[intIndex]["Received_Mode"] = objDataTableBATCHREQUEST.Rows[intIndex]["Received_Mode"];
                objdatableBatchReq.Rows[intIndex]["Reassessment_Ref_No"] = objDataTableBATCHREQUEST.Rows[intIndex]["Reassessment_Ref_No"];
                objdatableBatchReq.Rows[intIndex]["APPLICATION_STATUS"] = objDataTableBATCHREQUEST.Rows[intIndex]["APPLICATION_STATUS"];
                objdatableBatchReq.Rows[intIndex]["delmark"] = objDataTableBATCHREQUEST.Rows[intIndex]["delmark"]; 
                objdatableBatchReq.Rows[intIndex]["DRAFT_FLAG"] = objDataTableBATCHREQUEST.Rows[intIndex]["DRAFT_FLAG"];
                objdatableBatchReq.Rows[intIndex]["Dept_ID"] = objDataTableBATCHREQUEST.Rows[intIndex]["Dept_ID"];
                objdatableBatchReq.Rows[intIndex]["BATCH_SEQ_NO"] = stringBatchseqID;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }

        private bool ValidatePatientDetails(string condition)
        {
            bool boolStatus = true;
            DataTable objDataTableBATCHPROFILE = null;
            string stringOverallMsg = "";
            string stringRequestMODE = "";
            try
            { 
                if (ddlApplicationStatus.SelectedValue != null && ddlApplicationStatus.SelectedItem.Value != "")
                {
                    stringRequestMODE = ddlApplicationStatus.SelectedValue.ToString();
                }
                if (stringRequestMODE.Length > 0 && stringRequestMODE == "BATCHREQUESTBYPATIENT")
                {
                    if (Session["ADD_BATCHPROFILE"] != null)
                    {
                        objDataTableBATCHPROFILE = (DataTable)Session["ADD_BATCHPROFILE"];
                        if (objDataTableBATCHPROFILE != null && objDataTableBATCHPROFILE.Rows.Count > 0)
                        {
                            boolStatus = true;
                        }
                        else
                        {
                            stringOverallMsg = "- For 'Batch Request By Patient' Please choose at least one Profile" + "\\r\\n";
                            boolStatus = false;
                        }
                    }
                    else
                    {
                        stringOverallMsg = "- For 'Batch Request By Patient' Please choose at least one Profile" + "\\r\\n";
                        boolStatus = false;
                    }

                }
                else
                {
                    stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n";
                    if (txtHRN.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- MRN" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtName.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Patient Name" + "\\r\\n";
                        boolStatus = false;
                    }
                    if ((rbtEMR.Checked == true && ddlReference.SelectedItem != null && ddlReference.SelectedValue == "") || (rbtnboth.Checked == true && ddlReference.SelectedItem != null && ddlReference.SelectedValue == ""))
                    {
                        stringOverallMsg += "- Source of Reference" + "\\r\\n";
                        boolStatus = false;
                    }

                }
                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        if (condition.Length == 0)
                        {
                            TABActive(1);
                        }
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                stringRequestMODE = null;
                objDataTableBATCHPROFILE = null;
                stringOverallMsg = null;
            }
        }

        private bool ValidatePatientDetailsBATCHADD(string condition)//fix
        {
            bool boolStatus = true;
            string stringOverallMsg = "";
            try
            {
                stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n";

                if (txtHRN.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- MRN" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtName.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Patient Name" + "\\r\\n";
                    boolStatus = false;
                }
                if ((rbtEMR.Checked == true && ddlReference.SelectedItem != null && ddlReference.SelectedValue == "") || (rbtnboth.Checked == true && ddlReference.SelectedItem != null && ddlReference.SelectedValue == ""))
                {
                    stringOverallMsg += "- Source of Reference" + "\\r\\n";
                    boolStatus = false;
                }
                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        if (condition.Length == 0)
                        {
                            TABActive(1);
                        }
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }

                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                boolStatus = true;
                stringOverallMsg = null;
            }
        }

        private bool ValidateRequestorDetails(string condition)//fix
        { 
            string stringBlockBill = "";
            bool boolStatus = true;
            string stringOverallMsg = "";
            try
            {
                boolStatus = true;
                stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n"; 
                //requestor
                if (chkinternalstaff.Checked == true && txtcostcenterID.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Cost Centre" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtReqID.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Requestor" + "\\r\\n";
                    boolStatus = false;
                } 
                if (ddlBlockBill.SelectedItem != null)
                { stringBlockBill = ddlBlockBill.SelectedItem.Value; }
                if (stringBlockBill != null && stringBlockBill.Trim().ToUpper() == "YES")
                {
                    if (txtReqBy.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Requestor Name" + "\\r\\n";
                        boolStatus = false;
                    } 
                    if (txtRegReferenceNo.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Requestor Ref No" + "\\r\\n";
                        boolStatus = false;
                    }
                }
                if (txtRequestorTypename.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Requestor Type" + "\\r\\n";
                    boolStatus = false;
                } 
                if (txtReqAdd.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Address" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtMailAdd.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Mailing Address" + "\\r\\n";
                    boolStatus = false;
                }
                if (ddlBlockBill.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Block Billing" + "\\r\\n";
                    boolStatus = false;
                } 
                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        if (condition.Length == 0)
                        {
                            TABActive(2);
                        }
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }

                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            { 
                stringBlockBill = null;
                boolStatus = true;
                stringOverallMsg = null;
            }
        } 
        private bool ValidateRequestDetailsBATCHADD(string condition)//fix
        {
            bool boolStatus = true; 
            string stringOverallMsg = "";
            string stringReportType = "";
            try
            {
                stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n";
                if (txtCreateDate.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Create Date" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtReqDate.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Request Date" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtRecDate.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Receive Date" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtRecFrmname.Text.Trim().Length == 0 || txtRecFrmID.Text.Length == 0)
                {
                    stringOverallMsg += "- Received From" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtReqTypename.Text.Trim().Length == 0 || txtReqTypeID.Text.Length == 0)
                {
                    stringOverallMsg += "- Request Type" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtDelToname.Text.Trim().Length == 0 || txtDelToID.Text.Length == 0)
                {
                    stringOverallMsg += "- Deliver Mode" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtRptTypename.Text.Trim().Length == 0 || txtRptTypeID.Text.Length == 0)
                {
                    stringOverallMsg += "- Report Type" + "\\r\\n";
                    boolStatus = false;
                } 
                if (txtRptTypeID.Text.Trim().Length > 0)
                {
                    stringReportType = txtRptTypeID.Text.Trim().ToString();
                    if ((stringReportType.Trim().ToUpper() == "LOANIN" || stringReportType.Trim().ToUpper() == "LOANOUT") && txtLoanFromInst.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Name of the Institution" + "\\r\\n";
                        boolStatus = false;
                        txtLoanFromInst.Focus();
                    }
                }
                if (txtProcessTypeID.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Process Type" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtPurposeID.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Purpose" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtRptFormatID.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Report Format" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtDueDate.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Due Date" + "\\r\\n";
                    boolStatus = false;
                }
                if (txtCopies.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- No. Of Copies" + "\\r\\n";
                    boolStatus = false;
                }
                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        if (condition.Length == 0)
                        {
                            TABActive(1);
                        }
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }

                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                boolStatus = true; 
                stringOverallMsg = null;
                stringReportType = null;
            }
        }
        private bool ValidateRequestDetails(string condition)//fix
        {
            bool boolStatus = true;
            DataTable objDataTableBATCHPROFILE = null;
            string stringRequestMODE = "";
            string stringOverallMsg = ""; 
            string stringReportType = "";
            try
            {
                stringOverallMsg = "";
                if (ddlApplicationStatus.SelectedValue != null && ddlApplicationStatus.SelectedItem.Value != "")
                {
                    stringRequestMODE = ddlApplicationStatus.SelectedValue.ToString();
                }
                if (stringRequestMODE.Length > 0 && stringRequestMODE == "BATCHREQUESTBYREQUESTDETAIL")
                {
                    if (Session["ADD_BATCHREQUEST"] != null)
                    {
                        objDataTableBATCHPROFILE = (DataTable)Session["ADD_BATCHREQUEST"];
                        if (objDataTableBATCHPROFILE != null && objDataTableBATCHPROFILE.Rows.Count > 0)
                        {
                            boolStatus = true;
                        }
                        else
                        {
                            stringOverallMsg = "- For 'Batch Request By Request Details' Please choose at least one Request" + "\\r\\n";
                            boolStatus = false;
                        }
                    }
                    else
                    {
                        stringOverallMsg = "- For 'Batch Request By Request Details' Please choose at least one Request" + "\\r\\n";
                        boolStatus = false;
                    } 
                }
                else
                {
                    stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n";
                    if (txtCreateDate.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Create Date" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtReqDate.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Request Date" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtRecDate.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Receive Date" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtRecFrmname.Text.Trim().Length == 0 || txtRecFrmID.Text.Length == 0)
                    {
                        stringOverallMsg += "- Received From" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtReqTypename.Text.Trim().Length == 0 || txtReqTypeID.Text.Length == 0)
                    {
                        stringOverallMsg += "- Request Type" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtDelToname.Text.Trim().Length == 0 || txtDelToID.Text.Length == 0)
                    {
                        stringOverallMsg += "- Deliver Mode" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtRptTypename.Text.Trim().Length == 0 || txtRptTypeID.Text.Length == 0)
                    {
                        stringOverallMsg += "- Report Type" + "\\r\\n";
                        boolStatus = false;
                    } 
                    if (txtRptTypeID.Text.Trim().Length > 0)
                    {
                        stringReportType = txtRptTypeID.Text.Trim().ToString();
                        if ((stringReportType.Trim().ToUpper() == "LOANIN" || stringReportType.Trim().ToUpper() == "LOANOUT") && txtLoanFromInst.Text.Trim().Length == 0)
                        {
                            stringOverallMsg += "- Name of the Institution" + "\\r\\n";
                            boolStatus = false;
                            txtLoanFromInst.Focus();
                        }
                    }
                    if (txtProcessTypeID.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Process Type" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtPurposeID.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Purpose" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtRptFormatID.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Report Format" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtDueDate.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Due Date" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtCopies.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- No. Of Copies" + "\\r\\n";
                        boolStatus = false;
                    }
                }
                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        if (condition.Length == 0)
                        {
                            TABActive(3);
                        }
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                boolStatus = true;
                stringRequestMODE = null;
                objDataTableBATCHPROFILE = null;
                stringOverallMsg = null; 
                stringReportType = null;
            }
        }
        private bool ValidateWaiver(string condition)//fix
        {
            bool boolStatus = true;
            string stringOverallMsg = "";
            try
            {
                boolStatus = true;
                stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n"; 
                if (ddlWApp.SelectedItem.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Waiver Applications" + "\\r\\n";
                    boolStatus = false;
                }
                if (ddlWApp.SelectedItem != null && ddlWApp.Text.Trim().ToUpper() == "YES" && ddlhospitalrwaiver.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Hospital Waiver" + "\\r\\n";
                    boolStatus = false;
                }
                if (ddlWApp.SelectedItem != null && ddlWApp.Text.Trim().ToUpper() == "YES" && ddldoctorwaiver.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Doctor Waiver" + "\\r\\n";
                    boolStatus = false;
                }
                if (ddlWApp.SelectedItem != null && ddlWApp.SelectedItem.Value.ToString().ToUpper() == "YES")
                {
                    if (ddlFinancialdte.SelectedItem.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Financial Assistance Status" + "\\r\\n";
                        boolStatus = false;
                    }

                    if (txtFinAssformdte.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Financial Assistance Validity From Date" + "\\r\\n";
                        boolStatus = false;
                    }
                    if (txtFinAsstodte.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Financial Assistance Validity To Date" + "\\r\\n";
                        boolStatus = false;
                    }
                }
                if(ddlFinancialdte.SelectedItem!=null&& ddlFinancialdte.SelectedItem.Value.ToString().ToUpper() == "OTHERS")
                {
                    if (txtWaiverrmk.Text.Trim().Length == 0)
                    {
                        stringOverallMsg += "- Waiver Remarks" + "\\r\\n";
                        boolStatus = false;
                    }
                }

                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        if (condition.Length == 0)
                        {
                            TABActive(5);
                        }
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }

                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                boolStatus = true;
                stringOverallMsg = null;
            }
        }
        private bool ValidateControlsDraft()//fix
        {
            bool boolStatus = true;
            string stringOverallMsg = "";
            try
            {
                boolStatus = true;
                stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n";

                if (txtHRN.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- MRN" + "\\r\\n";
                    boolStatus = false;
                } 
                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                } 
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                boolStatus = true;
                stringOverallMsg = null;
            }
        }
        private bool ValidateBusinessLogic() 
        { 
            bool boolStatus = true; 
            try
            {
                object[] objControls = new object[]
                    {
                txtHRN,
                    };
                if (txtHRN.Text.Trim().Length > 0 && DoNonCGHHrnValidation(objControls))
                { } 
                //request detail
                if (txtCreateDate.Text.Trim().Length > 0 && txtAccidentDate.Text.Trim().Length > 0)
                {
                    DateTime objDateTimeAccident = CommonFunctions.ConvertToDateTime(txtAccidentDate.Text.Trim(), "dd-MM-yyyy");
                    DateTime objDateTimeCreated = CommonFunctions.ConvertToDateTime(txtCreateDate.Text.Trim(), "dd-MM-yyyy"); 
                    if (objDateTimeAccident.Date > objDateTimeCreated)
                    {
                        CommonFunctions.ShowMessageboot(this, "Accident date cannot be greater than Create Date");
                        txtAccidentDate.Focus();
                        return false;
                    }
                    else
                    {
                        if (txtReassDate.Text.Trim().Length > 0)
                        {
                            DateTime objDateTimeReAssessment = CommonFunctions.ConvertToDateTime(txtReassDate.Text.Trim(), "dd-MM-yyyy");
                            if (objDateTimeReAssessment.Date <= objDateTimeCreated)
                            {
                                CommonFunctions.ShowMessageboot(this, "Re-Refer date must be greater than Create date");
                                txtReassDate.Focus();
                                return false;
                            }
                        }
                    }
                }
                if (txtRecDate.Text.Trim().Length > 0 && txtCreateDate.Text.Trim().Length > 0)
                {
                    DateTime objDateTimeReceiveDate = CommonFunctions.ConvertToDateTime(txtRecDate.Text.Trim(), "dd-MM-yyyy");
                    DateTime objDateTimeCreatedDate = CommonFunctions.ConvertToDateTime(txtCreateDate.Text.Trim(), "dd-MM-yyyy"); 
                    if (objDateTimeReceiveDate > objDateTimeCreatedDate)
                    {
                        CommonFunctions.ShowMessageboot(this, "Receive date should be less than Create Date");
                        txtRecDate.Focus();
                        return false;
                    }
                }
                if (txtDOHA.Text.Trim().Length > 0)
                {
                    if (!CommonFunctions.ValidDateTime(txtDOHA.Text.Trim()))
                    {
                        CommonFunctions.ShowMessageboot(this, "Hospital Attendance Date should be a valid date");
                        txtDOHA.Focus();
                        return false;
                    }
                    else
                    {
                        DateTime objDateTimeHospAttDate = CommonFunctions.ConvertToDateTime(txtDOHA.Text.Trim(), "dd-MM-yyyy");

                        if (objDateTimeHospAttDate.Date > DateTime.Now)
                        {
                            CommonFunctions.ShowMessageboot(this, "Hospital Attendance Date should be <= current date");
                            txtAccidentDate.Focus();
                            return false;
                        }
                    }
                }
                if (txtReqDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtReqDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Request date should be a valid date");
                    txtReqDate.Focus();
                    return false;
                }
                if (txtRecDate.Text.Trim().Length > 0 && txtReqDate.Text.Trim().Length > 0)
                {
                    DateTime objDateTimeReceiveDate = CommonFunctions.ConvertToDateTime(txtRecDate.Text.Trim(), "dd-MM-yyyy");
                    DateTime objDateTimeReqDate = CommonFunctions.ConvertToDateTime(txtReqDate.Text.Trim(), "dd-MM-yyyy");  
                    if (objDateTimeReceiveDate < objDateTimeReqDate)
                    {
                        CommonFunctions.ShowMessageboot(this, "Receive date should be greater than Request Date");
                        txtRecDate.Focus();
                        return false;
                    }
                }
                if (txtRecDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtRecDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Receive date should be a valid date");
                    txtRecDate.Focus();
                    return false;
                }
                if (txtDueDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtDueDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Due date should be a valid date");
                    txtDueDate.Focus();
                    return false;
                }
                if (txtAccidentDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtAccidentDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Accident date should be a valid date");
                    txtAccidentDate.Focus();
                    return false;
                }
                if (txtAppDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtAppDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Appointment date should be a valid date");
                    txtAppDate.Focus();
                    return false;
                }
                if (txtAssessmentDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtAssessmentDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Assessment date should be a valid date");
                    txtAssessmentDate.Focus();
                    return false;
                }
                if (txtReassDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtReassDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Re-Refer date should be a valid date");
                    txtReassDate.Focus();
                    return false;
                }  
                if (txtReqStartDate.Enabled && txtReqStartDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtReqStartDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Request start date should be a valid date");
                    txtReqStartDate.Focus();
                    return false;
                }
                if (txtReqStartDate.Enabled && txtReqStartDate.Text.Trim().Length > 0)
                {
                    DateTime objDateTimeFrom = CommonFunctions.ConvertToDateTime(txtReqStartDate.Text.Trim(), "dd-MM-yyyy HH:MM:SS");
                    if (DateTime.Now > objDateTimeFrom)
                    {
                        CommonFunctions.ShowMessageboot(this, "Request start date should be Greater than Today's date");
                        txtReqStartDate.Focus();
                        return false;
                    } 
                }   
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            } 
            return boolStatus;
        }
        private bool ValidateAdditionalMR()
        {
            bool boolStatus = true;
            string stringOverallMsg = "";
            try
            {
                boolStatus = true;
                stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n"; 
                if (txtAddRptTypeID.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Report Type" + "\\r\\n";
                    boolStatus = false;
                } 
                if (txtAddNoCopy.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- No of Copies" + "\\r\\n";
                    boolStatus = false;
                } 
                if (txtAddDate.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Date" + "\\r\\n";
                    boolStatus = false;
                } 
                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }

                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                boolStatus = true;
                stringOverallMsg = null;
            }
        }

        private bool ValidateAdditionalMRBusinessLogic()//fix
        {
            int intTemp = 0; 
            try
            {
                if (txtAddNoCopy.Text.Trim().Length > 0 && !int.TryParse(txtAddNoCopy.Text.Trim(), out intTemp))
                {
                    CommonFunctions.ShowMessageboot(this, "No of Copies should be a valid integer");
                    txtAddNoCopy.Focus();
                    return false;
                } 
                if (txtAddDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtAddDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Date should be a valid date");
                    txtAddDate.Focus();
                    return false;
                } 
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                intTemp = 0;
            }
        }

        //VERIFY MRIS PATIENT RECORD EXIST 
        private DataTable GetRequestDetails(string stringReqID, string stringBatchseqID) 
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataTable objDataTable = null;
            DataSet objDatasetResult = null;
            string stringServiceType = "List5R1V1";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string[] stringOutputResult = null;
            string stringformid = "";
            string stringOrderBy = "";
            string stringexp012 = "";
            try
            {
                if ((stringReqID != null && stringReqID.Trim().Length > 0 && stringReqID.ToUpper() != "NULL") || (stringBatchseqID.Trim().Length > 0))
                { 
                    if (stringReqID.Contains("DRAFT"))
                    {
                        stringformid = "FC0001R1V6";
                    }
                    else
                    {
                        stringformid = "FC0001R1V1";
                    }
                    if (stringBatchseqID.Length > 0)
                    {
                        stringexp012 = " And mrreg.be_id= '" + stringbeid + "' And mrreg.BATCH_SEQ_NO= '" + stringBatchseqID.ToString() + "' And mrreg.delmark= 'N' ";
                    }
                    else
                    {
                        stringexp012 = "And mrreg.be_id= '" + stringbeid + "' And mrreg.request_id= '" + stringReqID.ToString() + "' And mrreg.delmark= 'N' ";
                    } 
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t5"] != null && objDatasetResult.Tables["t5"].Rows.Count > 0)
                        {
                            objDataTable = objDatasetResult.Tables["t5"];
                        }
                        if (objDataTable != null && objDataTable.Rows.Count > 0)
                        {
                            return objDataTable;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    } 
                    return null;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringexp012 = null;
                objDataTable = null;
                stringServiceType = null;
                stringbeid = null;
            }
            return null;
        }
        #endregion

        #region COPY REQUEST

        protected void btnbiodatapopupnewcopyrequest_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                copyrequestpopupclearvalues();
                InitializeVariables();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void btnbiodatapopupsearchcopyrequets_Click(object sender, ImageClickEventArgs e)
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intRecordFrom = 0;
            int intRecordTo = int.MaxValue;
            bool boolstatus = true;
            DataTable objDataTable = null;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            string stringexp012 = "";
            string stringEncrypyValue = ""; 
            string stringRequestID = "";
            string stringSuffix = "";
            string stringServiceType = "List5R1V1";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                if (txthrncopyrequest.Text.Length > 0 || txtreqnumbercopyrequest.Text.Length > 0)
                {
                    object[] objControls = new object[]
                     {
                txthrncopyrequest,
                     };
                    if (txthrncopyrequest.Text.Trim().Length > 0 && !DoNonCGHHrnValidation(objControls))
                    {
                        boolstatus = false;
                    }
                    if (boolstatus)
                    {
                        stringRequestID = txtreqnumbercopyrequest.Text.Trim().ToUpper();
                        if (stringRequestID.Trim().Length > 3)
                        {
                            stringSuffix = stringRequestID.Substring(stringRequestID.Length - 3, 3);
                            if (stringSuffix.StartsWith(@"/Q"))
                            {
                                stringRequestID = stringRequestID.Substring(0, stringRequestID.Length - 3);
                            }
                        } 
                        if (txthrncopyrequest.Text.Trim().Length > 0)
                        {
                            stringEncrypyValue = CommonFunctions.HRNtoEncrypyValue(txthrncopyrequest.Text.Trim());
                        }
                        if (stringRequestID.Length > 0 && stringEncrypyValue.Length > 0) 
                        {
                            stringexp012 = "And mrreg.be_id= '" + stringbeid + "'And mrpat.hrn_id= '" + stringEncrypyValue.Trim().ToUpper() + "' And mrreg.request_id= '" + stringRequestID.Trim().ToUpper() + "'  And mrreg.delmark= 'N'";
                        }
                        else if (stringEncrypyValue.Length > 0)//fix
                        {
                            stringexp012 = "And mrreg.be_id= '" + stringbeid + "' And mrpat.hrn_id= '" + stringEncrypyValue.ToUpper() + "'  And mrreg.delmark= 'N'";
                        }
                        else if (stringRequestID.Length > 0)
                        {
                            stringexp012 = "And mrreg.be_id= '" + stringbeid + "' And mrreg.request_id= '" + stringRequestID.Trim().ToUpper() + "'  And mrreg.delmark= 'N'";

                        } 
                        intRecordFrom = intrecFromcopyreq;
                        intRecordTo = intrecTocopyreq; 
                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intRecordFrom, intRecordTo, out intTotalRecord, out interrorcount, out stringOutputResult);
                        PopulatePagerCopyreq(intTotalRecord, intpageIndexcopyreq);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t5"] != null && objDatasetResult.Tables["t5"].Rows.Count > 0)
                            {
                                objDataTable = objDatasetResult.Tables["t5"];
                                gvlistcopyreqpopup.DataSource = objDataTable;
                                gvlistcopyreqpopup.DataBind();
                            }
                            else
                            {
                                gvlistcopyreqpopup.DataSource = null;
                                gvlistcopyreqpopup.DataBind();
                                CommonFunctions.ShowMessageboot(this, "No Records Found");
                            }
                        }
                        else
                        {
                            CommonFunctions.ShowMessageboot(this, stringOutputResult[0]);
                        } 
                    } 
                }
                else
                {
                    gvlistcopyreqpopup.DataSource = null;
                    gvlistcopyreqpopup.DataBind();
                    CommonFunctions.ShowMessageboot(this, "Please fill at least one condition to search");
                }
                mpePdtcopyrequest.Show();
                pnlcopyrequest.Visible = true;
                txthrncopyrequest.Focus();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringexp012 = null;
                stringEncrypyValue = null; 
                objDataTable = null;
                stringbeid = null;
                stringRequestID = null;
                stringSuffix = null;
                stringServiceType = null;
            }
        }
        protected void lnkbtnpopupMRNcopyreq_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringHRNId = "";
            string stringreqID = "";
            string stringMRStatus = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length >= 3)
                        {
                            stringHRNId = stringValues[0];
                            stringreqID = stringValues[1];
                            stringMRStatus = stringValues[2];
                            if (chklnkExistingReq.Checked == true)
                            {
                                if (stringMRStatus.ToUpper() == "FORWARDED" || stringMRStatus.ToUpper() == "COLLECTED")
                                {
                                    chkCOPYQUERY.Checked = true;
                                    mpePdtcopyrequest.Hide();
                                    LoadData(stringreqID, "UNLOAD", "QUERYCASE");
                                }
                                else
                                {
                                    chkCOPYQUERY.Checked = false;
                                    CommonFunctions.ShowMessageboot(this, "This request status was not collected/forwarded, so you cannot link to existing request");
                                }
                            }
                            else
                            {
                                chkCOPYQUERY.Checked = false;
                                mpePdtcopyrequest.Hide();
                                LoadData(stringreqID, "UNLOAD", "COPYREQUEST");
                            } 
                        }
                        else
                        {
                            Session["CopyRequest"] = null;
                            Session["REQUEST_FromSummary"] = null;
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringHRNId = null;
                stringreqID = null;
                stringMRStatus = null;
                stringValues = null;
            }
        }
        //for clearvalues
        private void copyrequestpopupclearvalues()
        {
            try
            {
                txthrncopyrequest.Text = "";
                txtreqnumbercopyrequest.Text = "";
                chklnkExistingReq.Checked = false;
                gvlistcopyreqpopup.DataSource = null;
                gvlistcopyreqpopup.DataBind();
                PopulatePagerCopyreq(0, intpageIndexcopyreq);
                txthrncopyrequest.Focus();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        #endregion
        #region FOR Design TAB Control

        private void EmptyValidation()
        {
            string stringID = "";
            try
            {
                if (Session["CURRENTACTIVETABNAME"] != null)
                {
                    stringID = Session["CURRENTACTIVETABNAME"].ToString();
                } 
                if (stringID == "PATIENT")
                {
                    ValidatePatientDetails("EmptyValidation");
                }
                else if (stringID == "REQUESTOR")
                {
                    ValidateRequestorDetails("EmptyValidation");
                }
                else if (stringID == "REQUEST")
                {
                    ValidateRequestDetails("EmptyValidation");
                }
                else if (stringID == "WAIVER")
                {
                    ValidateWaiver("EmptyValidation");
                }  
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringID = null;
            }
        }
        protected void btnpatientprofile_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["CURRENTACTIVETABNAME"] != null)
                {
                    EmptyValidation();
                }
                Session["CURRENTACTIVETABNAME"] = "PATIENT";
                pnlmenu1.Visible = true;
                pnlmenu2.Visible = false;
                pnlmenu3.Visible = false;
                updpnlattachments.Visible = false;
                pnlmenu5.Visible = false;
                pnlmenu6.Visible = false;
                pnlEnquiry.Visible = false;
                pnlPendingItems.Visible = false;
                pnlProcessHistory.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }


        }
        protected void btnrequestordetails_Click(object sender, EventArgs e)
        {
            try
            {
                EmptyValidation();
                Session["CURRENTACTIVETABNAME"] = "REQUESTOR";
                pnlmenu1.Visible = false;
                pnlmenu2.Visible = true;
                pnlmenu3.Visible = false;
                updpnlattachments.Visible = false;
                pnlmenu5.Visible = false;
                pnlmenu6.Visible = false;
                pnlEnquiry.Visible = false;
                pnlPendingItems.Visible = false;
                pnlProcessHistory.Visible = false; 
                CommonFunctions.LoadRequestors(); 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }


        }
        protected void btnrequestdetails_Click(object sender, EventArgs e)
        {
            try
            {
                EmptyValidation();
                Session["CURRENTACTIVETABNAME"] = "REQUEST";
                pnlmenu1.Visible = false;
                pnlmenu2.Visible = false;
                pnlmenu3.Visible = true;
                updpnlattachments.Visible = false;
                pnlmenu5.Visible = false;
                pnlmenu6.Visible = false;
                pnlEnquiry.Visible = false;
                pnlPendingItems.Visible = false;
                pnlProcessHistory.Visible = false;  
                CommonFunctions.LoadReportType("SESSION");  
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }
        protected void btnattachment_Click(object sender, EventArgs e)
        {
            try
            {
                EmptyValidation();
                Session["CURRENTACTIVETABNAME"] = "ATTACHMENT";
                pnlmenu1.Visible = false;
                pnlmenu2.Visible = false;
                pnlmenu3.Visible = false;
                updpnlattachments.Visible = true;
                pnlmenu5.Visible = false;
                pnlmenu6.Visible = false;
                pnlEnquiry.Visible = false;
                pnlPendingItems.Visible = false;
                pnlProcessHistory.Visible = false;
                LoadRequestCategory();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }
        protected void btnwaiver_Click(object sender, EventArgs e)
        {
            try
            {
                EmptyValidation();
                Session["CURRENTACTIVETABNAME"] = "WAIVER";
                pnlmenu1.Visible = false;
                pnlmenu2.Visible = false;
                pnlmenu3.Visible = false;
                updpnlattachments.Visible = false;
                pnlmenu5.Visible = true;
                pnlmenu6.Visible = false;
                pnlPendingItems.Visible = false;
                pnlEnquiry.Visible = false;
                pnlProcessHistory.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            } 
        }
        protected void btnAssignDocter_Click(object sender, EventArgs e)
        {
            try
            {
                EmptyValidation();
                Session["CURRENTACTIVETABNAME"] = "ASSIGNDOCTOR";
                pnlmenu1.Visible = false;
                pnlmenu2.Visible = false;
                pnlmenu3.Visible = false;
                updpnlattachments.Visible = false;
                pnlmenu5.Visible = false;
                pnlmenu6.Visible = true;
                pnlPendingItems.Visible = false;
                pnlEnquiry.Visible = false;
                pnlProcessHistory.Visible = false;
                if (txtReqNo.Text.Trim().Length == 0)
                {
                    lnkbtnnextassignation.Visible = false;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }

        protected void btnenquiry_Click(object sender, EventArgs e)
        {
            try
            {
                EmptyValidation();
                Session["REQUESTID_REMARKSEDIT"] = null;
                Session["CURRENTACTIVETABNAME"] = "ENQUIRY";
                pnlmenu1.Visible = false;
                pnlmenu2.Visible = false;
                pnlmenu3.Visible = false;
                updpnlattachments.Visible = false;
                pnlmenu5.Visible = false;
                pnlmenu6.Visible = false;
                pnlEnquiry.Visible = true;
                pnlPendingItems.Visible = false;
                pnlProcessHistory.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            } 
        }
        protected void btnpendingitems_Click(object sender, EventArgs e)
        {
            try
            {
                EmptyValidation();
                Session["CURRENTACTIVETABNAME"] = "PENDINGITEMS";
                pnlmenu1.Visible = false;
                pnlmenu2.Visible = false;
                pnlmenu3.Visible = false;
                updpnlattachments.Visible = false;
                pnlmenu5.Visible = false;
                pnlmenu6.Visible = false;
                pnlPendingItems.Visible = true;
                pnlEnquiry.Visible = false;
                pnlProcessHistory.Visible = false;
                LoadStatus(); LoadPendingItems();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            } 
        } 
        protected void btnProcessHistory_Click(object sender, EventArgs e)
        {
            try
            {
                EmptyValidation();
                Session["CURRENTACTIVETABNAME"] = "PROCESSHISTORY";
                pnlmenu1.Visible = false;
                pnlmenu2.Visible = false;
                pnlmenu3.Visible = false;
                updpnlattachments.Visible = false;
                pnlmenu5.Visible = false;
                pnlmenu6.Visible = false;
                pnlPendingItems.Visible = false;
                pnlEnquiry.Visible = false;
                pnlProcessHistory.Visible = true; 
                LoadProcessHistory(txtReqID.Text.Trim(), "LOAD", true);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            } 
        } 
        #endregion

        #region more button 
        protected void lnkbtnpayment_Click(object sender, EventArgs e)
        {
            string stringBlockBill = "";
            string stringWaiverApproved = "";
            string stringWaiverApplications = "";
            string stringMRamt = ""; 
            try
            { 
                if (txtReqNo.Text.Trim().Length > 0)
                {
                    if (ddlBlockBill.SelectedItem != null)
                    {
                        stringBlockBill = ddlBlockBill.SelectedItem.Value;
                    }
                    if (ddlWApproved.SelectedItem != null)
                    {
                        stringWaiverApproved = ddlWApproved.SelectedItem.Value;
                    }
                    if (ddlWApp.SelectedItem != null)
                    {
                        stringWaiverApplications = ddlWApp.SelectedItem.Value;
                    }
                    if (hdfmramount.Value.Length > 0)
                    {
                        stringMRamt = hdfmramount.Value.ToString();
                        if (stringMRamt.Length > 0)
                        {  
                            decimal decimalmrAmount = 0; 
                            if (stringMRamt != null && stringMRamt.Trim().Length > 0)
                            { decimal.TryParse(stringMRamt, out decimalmrAmount); } 
                            if (decimalmrAmount == 0)
                            {
                                CommonFunctions.ShowMessageboot(this, "Receipt cannot be generated for Report Value Zero");
                                return;
                            }
                        }
                    } 
                    if (stringBlockBill != null && stringBlockBill.Trim().ToUpper() == "YES")
                    {
                        CommonFunctions.ShowMessageboot(this, "Receipt cannot be generated for block billing MR");
                        return;
                    }

                    if (stringWaiverApplications.ToUpper() == "YES" && stringWaiverApproved != null && stringWaiverApproved.Trim().Length > 0 && (stringWaiverApproved.Trim().ToUpper() == "FULLWAIVER" || stringWaiverApproved.Trim().ToUpper() == "PENDING"))
                    {
                        if (stringWaiverApproved.Trim().ToUpper() == "FULLWAIVER") { CommonFunctions.ShowMessageboot(this, "Waiver had been approved, therefore no payment will be generated."); return; }
                        else if (stringWaiverApproved.Trim().ToUpper() == "PENDING") { CommonFunctions.ShowMessageboot(this, "Waiver still pending, therefore payment cannot be generated now."); return; }
                    }
                    else
                    {
                        Session["REQUESTID_PAYMENT"] = txtReqNo.Text.Trim();
                        Response.Redirect("FC0003R1V1.aspx");
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringBlockBill = null;
                stringWaiverApproved = null;
                stringWaiverApplications = null;
                stringMRamt = null; 
            }
        } 
        protected void lnkbtnpending_Click(object sender, EventArgs e)
        {
            try
            {
                if (txtReqNo.Text.Trim().Length > 0)
                {
                    Session["REQUESTID_PENDINGITEMS"] = txtReqNo.Text.Trim();
                    Response.Redirect("FC0008R1V1.aspx");
                }
                else
                {
                    Session["REQUESTID_PENDINGITEMS"] = null;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            } 
        } 
        protected void lnkbtnAppoint_Click(object sender, EventArgs e)
        {
            try
            {
                if (txtReqNo.Text.Trim().Length > 0)
                {
                    Session["REQUESTID_APPOINMENTS"] = txtReqNo.Text.Trim();
                    Session["PAT_ADDRESS"] = txtAddress.Text.Trim();
                    Response.Redirect("FC0004R1V1.aspx");
                }
                else
                {
                    Session["REQUESTID_APPOINMENTS"] = null;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        } 
        protected void lnkbtnCancel_Click(object sender, EventArgs e)
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            bool boolstatus = true;
            DataSet objDatasetResult = null;
            DataTable objDataTable = null;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            string stringServiceType = "List21R1V1";
            string stringMRStatus = "";
            string stringformid01 = "FC0001R1V1";
            string stringexp0121 = "";
            string stringBoID = CommonFunctions.GETBussinessEntity().ToString();
            try
            {

                if (txtReqNo.Text.Trim().Length > 0)
                {
                    if (txtMRStatus.Text.Trim().Length > 0)
                    {
                        stringMRStatus = txtMRStatus.Text.Trim(); 
                        if (stringMRStatus.Length > 0 && (stringMRStatus.ToUpper() == "PENDING RELEASE TO HIMS" || stringMRStatus.ToUpper() == "PENDING SUP VETTING" || stringMRStatus.ToUpper() == "PENDING FORWARDING" || stringMRStatus.ToUpper() == "PENDING COLLECT IN PERSON" || stringMRStatus.ToUpper() == "FORWARDED" || stringMRStatus.ToUpper() == "COLLECTED"))
                        {
                            boolstatus = false;
                            Session["REQUESTID_CANCELLATION"] = txtReqNo.Text.Trim();
                            Response.Redirect("FC0006R1V1.aspx?LockFlag=TRUE");
                        }
                    }
                    if (boolstatus)
                    { 
                        stringexp0121 = "And mrc.be_id= '" + stringBoID.ToString() + "' And mrc.Request_ID= '" + txtReqNo.Text.Trim().ToString() + "'"; 
                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid01, stringexp0121, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t21"] != null && objDatasetResult.Tables["t21"].Rows.Count > 0)
                            {
                                objDataTable = objDatasetResult.Tables["t21"];
                            }
                            if (objDataTable != null && objDataTable.Rows.Count > 0)
                            {
                                Session["REQUESTID_CANCELLATION"] = txtReqNo.Text.Trim();
                                Response.Redirect("FC0006R1V1.aspx?LockFlag=TRUE");
                            }
                            else
                            {
                                Session["REQUESTID_CANCELLATION"] = txtReqNo.Text.Trim();
                                Response.Redirect("FC0006R1V1.aspx"); 
                            }
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                        }
                    } 
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                stringServiceType = null;
                stringMRStatus = null;
                objDataTable = null;
                stringBoID = null;
                stringformid01 = null;
                stringexp0121 = null;
            }
        } 
        protected void lnkbtnViewMedical_Click(object sender, EventArgs e)
        {
            try
            {
                if (txtReqNo.Text.Trim().Length > 0)
                {
                    Session["REQUESTID_VIEWMEDICAL"] = txtReqNo.Text.Trim();
                    Response.Redirect("FC0010R1V1.aspx");
                }
                else
                {
                    Session["REQUESTID_VIEWMEDICAL"] = null;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        protected void lnkbtnrecalhistory_Click(object sender, EventArgs e)
        {
            try
            {
                if (txtReqNo.Text.Trim().Length > 0)
                {
                    Session["REQUESTID_RECALHISTORY"] = txtReqNo.Text.Trim();
                    Response.Redirect("FC0009R1V1.aspx");
                }
                else
                {
                    Session["REQUESTID_RECALHISTORY"] = null;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        #endregion

        #region PROCESS HISTORY
        #region for DelayReason

        protected void lnkbtnInsertDelayReason_Click(object sender, EventArgs e)
        {
            string stringprocessname = "";
            try
            {
                if (sender != null)
                {
                    stringprocessname = ((LinkButton)sender).ToolTip;
                    if (stringprocessname.Length > 0)
                    {
                        ViewState["DELAYREASONNAME"] = stringprocessname;
                        ddlDelayReason.ClearSelection();
                        LoadDelayReasons();
                        ModelpopupDelayReason.Show();
                        UpdatePanelDelayReason.Visible = true;
                    }
                    else
                    {
                        ViewState["DELAYREASONNAME"] = null;
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringprocessname = null;
            }
        }
        private void LoadDelayReasons()//fix
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataSet objDatasetResult = null;
            DataTable objdatatableLoadDelayReasons = null;
            string[] stringOutputResult = null;
            string stringformid = "FA0008R1V1";
            string stringOrderBy = "mrdelas.short_name asc";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringServiceType = "List1R1V1";
            string stringexp = "";
            try
            {   
                stringexp = "And mrdelas.be_id= '" + stringbeid + "' And mrdelas.delmark= 'N'"; 
                if (Session["SSNLOADDELAYREASONS"] != null)
                {
                    objdatatableLoadDelayReasons = (DataTable)Session["SSNLOADDELAYREASONS"];
                }
                else
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objdatatableLoadDelayReasons = objDatasetResult.Tables["t1"];
                            Session["SSNLOADDELAYREASONS"] = objdatatableLoadDelayReasons;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                if (objdatatableLoadDelayReasons != null && objdatatableLoadDelayReasons.Rows.Count > 0)
                {
                    ddlDelayReason.DataTextField = "short_name";
                    ddlDelayReason.DataValueField = "dr_id";
                    ddlDelayReason.DataSource = objdatatableLoadDelayReasons;
                    ddlDelayReason.DataBind();
                    ddlDelayReason.Items.Insert(0, new ListItem("", ""));
                    ddlDelayReason.SelectedIndex = 1;
                }
                else
                {
                    ddlDelayReason.DataSource = null;
                    ddlDelayReason.DataBind();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objdatatableLoadDelayReasons = null;
                stringbeid = null;
                stringServiceType = null;
                stringexp = null;
            }
        }
        private bool ValidateDelayReasonControls()//fix
        {
            try
            {
                if (ddlDelayReason.SelectedItem != null && ddlDelayReason.Text.Trim().Length == 0)
                {
                    CommonFunctions.ShowMessageboot(this, "Delay Reason Field should not be empty,Please enter value");
                    ddlDelayReason.Focus();
                    ModelpopupDelayReason.Show();
                    UpdatePanelDelayReason.Visible = true;
                    return false;
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
        }

        protected void btnDelayReasonOK_Click(object sender, EventArgs e)
        {
            DataRow objdatarow = null;
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string[] stringOutputResult = null;
            string stringformid = "FC1001R1V2";
            string stringOrderBy = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            string stringprocessname = "";
            string stringRequestID = "";
            try
            {
                if (ValidateDelayReasonControls())
                {
                    ModelpopupDelayReason.Hide();
                    UpdatePanelDelayReason.Visible = false; 
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count == 0)
                        {
                            objdatarow = objDatasetResult.Tables["t2"].NewRow();
                            objdatarow["be_id"] = stringbeid;
                            objdatarow["taskdr_id"] = System.Guid.NewGuid().ToString().ToUpper();
                            objdatarow["Request_ID"] = txtReqNo.Text.Trim();
                            if (ddlDelayReason.SelectedItem != null)
                            {
                                objdatarow["DR_ID"] = ddlDelayReason.SelectedItem.Value;
                                objdatarow["short_name"] = ddlDelayReason.SelectedItem.Text;
                            }
                            if (ViewState["DELAYREASONNAME"] != null)
                            {
                                stringprocessname = ViewState["DELAYREASONNAME"].ToString();
                                objdatarow["long_name"] = ViewState["DELAYREASONNAME"].ToString();
                            }
                            objdatarow["trans_date"] = DateTime.Now; 
                            CommonFunctions.AssignAuditLogDetails(ref objdatarow);
                            objDatasetResult.Tables["t2"].Rows.Add(objdatarow);
                            objDatasetResult.Tables["t2"].Rows[0].RowState.ToString(); 
                            objDatasetResult = objDatasetResult.GetChanges();
                            stringServiceType = "OperationServiceDML";
                            objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);

                            if (intErrorCount == 0)
                            {
                                CommonFunctions.ShowMessageboot(this, "Delay Reason Added Successfully");
                                stringRequestID = txtReqNo.Text.Trim().ToUpper();
                                LoadData(stringRequestID, "NONLOAD", "");
                            }
                            else
                            {
                                Errorpopup(stringOutputResult);
                            } 
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    } 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objdatarow = null;
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                stringServiceType = null;
                stringexp = null;
                stringprocessname = null;
                stringRequestID = null;
            }
        } 
        protected void btnDelayReasoncancel_Click(object sender, EventArgs e)
        {
            try
            {
                ModelpopupDelayReason.Hide();
                UpdatePanelDelayReason.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        #endregion

        #region for Recall
        protected void lnkbtnRecallRequest_Click(object sender, EventArgs e)
        {
            string stringprocessname = "";
            try
            {
                hdfRecallcurreentStatus.Value = "";
                if (sender != null)
                {
                    stringprocessname = ((LinkButton)sender).ToolTip;
                    if (stringprocessname.Length > 0)
                    {
                        hdfRecallcurreentStatus.Value = stringprocessname;
                        txtRecallRemarks.Text = "";
                        ModelpopupRecall.Show();
                        UpdatePanelRecall.Visible = true;
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringprocessname = null;
            }
        }
        private bool ValidateRecallControls()//fix
        {
            try
            {
                if (txtRecallRemarks.Text.Trim().Length == 0)
                {
                    CommonFunctions.ShowMessageboot(this, "Recall Reason should not be empty,Please enter value");
                    txtRecallRemarks.Focus();
                    ModelpopupRecall.Show();
                    UpdatePanelRecall.Visible = true;
                    return false;
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
        }
        protected void btnrecallOK_Click(object sender, EventArgs e)
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataRow objdatarow = null;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FC1001R1V2";
            string stringOrderBy = "";
            string stringprocessname = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            try
            {
                if (ValidateRecallControls())
                {
                    ModelpopupRecall.Hide();
                    UpdatePanelRecall.Visible = false;
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t3"] != null && objDatasetResult.Tables["t3"].Rows.Count == 0)
                        {
                            objdatarow = objDatasetResult.Tables["t3"].NewRow();
                            objdatarow["be_id"] = stringbeid;
                            if (hdfRecallcurreentStatus != null && hdfRecallcurreentStatus.Value.Length > 0)
                            {
                                stringprocessname = hdfRecallcurreentStatus.Value.ToString().ToUpper();
                            }
                            objdatarow["AppsObj_ID"] = stringprocessname;
                            objdatarow["remarks_id"] = System.Guid.NewGuid().ToString().ToUpper();
                            objdatarow["Request_ID"] = txtReqNo.Text.Trim();
                            if (txtProcessTypeID.Text.Trim().Length > 0)
                            { objdatarow["MRP_ID"] = txtProcessTypeID.Text.Trim(); }
                            objdatarow["remarks_desc"] = txtRecallRemarks.Text.Trim();
                            objdatarow["trans_date"] = DateTime.Now;
                            objdatarow["hrn_id"] = "";
                            CommonFunctions.AssignAuditLogDetails(ref objdatarow);
                            objDatasetResult.Tables["t3"].Rows.Add(objdatarow);
                            objDatasetResult.Tables["t3"].Rows[0].RowState.ToString();
                            objDatasetResult = objDatasetResult.GetChanges();
                            stringServiceType = "OperationServiceDML";
                            objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);

                            if (intErrorCount == 0)
                            {
                                CommonFunctions.ShowMessageboot(this, "Recall Completed Successfully");
                                string stringRequestID = txtReqNo.Text.Trim().ToUpper();
                                LoadData(stringRequestID, "NONLOAD", "");
                                TABActive(1);
                            }
                            else
                            {
                                Errorpopup(stringOutputResult);
                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objdatarow = null;
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringprocessname = null;
                stringbeid = null;
                stringServiceType = null;
                stringexp = null;
            }
        }

        protected void btnrecallcancel_Click(object sender, EventArgs e)
        {
            try
            {
                ModelpopupRecall.Hide();
                UpdatePanelRecall.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        #endregion 
        #region for process status completed
        private DataTable checkverifier()
        {
            DataSet objDatasetResult = null;
            DataTable objDataTable = null;
            DataTable objDataTableAddAttachments = new DataTable();
            DataSet objdataset = new DataSet();
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string[] stringOutputResult = null;
            string[] stringOutResult = new string[3];
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            string stringBoID = "";
            string stringCategory = "";
            string stringServiceType = "";
            string stringExpression = "";
            Session["Documentattach"] = null;
            try
            {
                if (Session["BusinessID"] != null)
                {
                    stringBoID = Session["BusinessID"].ToString();
                } 
                stringServiceType = "List18R1V1";
                stringExpression = " and dach.be_id='" + stringBoID + "' and dach.trans_id='" + txtReqNo.Text.Trim() + "' "; 
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t18"] != null && objDatasetResult.Tables["t18"].Rows.Count > 0)
                    {
                        objDataTable = objDatasetResult.Tables["t18"];
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
                return objDataTable;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return null;
            }
        } 
        protected void lnkbtnProcessCompletedTraccing_Click(object sender, EventArgs e)
        {
            DataTable objDataTableAddReports = null;
            DataTable objDataTableCompleteMedicalReport = null;
            DataRow[] objdatarowCompleteMedicalReport = null;
            bool boolsmr = false;
            bool boolnotaccatched = false;
            string stringprocessname = "";
            string stringreportverify = "";
            try
            {
                if (sender != null)
                {
                    stringprocessname = ((LinkButton)sender).ToolTip;
                    if (stringprocessname.Length > 0)
                    {
                        objDataTableAddReports = checkverifier();   
                        if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                        {
                            objdatarowCompleteMedicalReport = objDataTableAddReports.Select("TRANS_ID = '" + txtReqNo.Text.Trim().ToString() + "' and CATEGORY = 'COMPLETED MEDICAL REPORTS' ");
                            if (objdatarowCompleteMedicalReport != null && objdatarowCompleteMedicalReport.Length > 0)
                            {
                                objDataTableCompleteMedicalReport = objdatarowCompleteMedicalReport.CopyToDataTable();
                                objDataTableCompleteMedicalReport.DefaultView.Sort = "MODIFIED_ON desc";
                                objDataTableCompleteMedicalReport = objDataTableCompleteMedicalReport.DefaultView.ToTable(); 
                                if (objDataTableCompleteMedicalReport != null && objDataTableCompleteMedicalReport.Rows.Count > 0)
                                {
                                    boolsmr = true;
                                    boolnotaccatched = true;
                                    stringreportverify = objDataTableCompleteMedicalReport.Rows[0]["SMR_DOC_VERIFY"].ToString();
                                    if (stringreportverify.Length == 0)
                                    {
                                        stringreportverify = "N"; 
                                    }
                                }
                            }
                        }
                        if (stringreportverify != "N" && boolnotaccatched && boolsmr == true && stringprocessname.Length > 0 && stringprocessname.ToUpper() == "PENDING FORWARDING" && (txtDelToID.Text.ToUpper() == "EMAIL"))
                        {
                            lblupdateprocesscontent.Text = "Do you want to email the COMPLETED MEDICAL REPORT to requestor?";
                            ViewState["NEXTPROCESSNAME"] = stringprocessname;
                            txtProcessCompletedRemarks.Text = "";
                            Modelpopuperrorsuccess.Show();
                            UpdatePanelModal6success.Visible = true;
                        }
                        else if((stringreportverify != "N" && boolnotaccatched && stringprocessname.ToUpper() == "PENDING FORWARDING") || (stringprocessname.ToUpper() != "PENDING FORWARDING"))
                        {
                            lblupdateprocesscontent.Text = "Are you sure want to update the process?"; 
                            ViewState["NEXTPROCESSNAME"] = stringprocessname;
                            txtProcessCompletedRemarks.Text = "";
                            Modelpopuperrorsuccess.Show();
                            UpdatePanelModal6success.Visible = true;
                        }
                        else if (!boolnotaccatched && stringprocessname.ToUpper() == "PENDING FORWARDING")
                        {
                            lblupdateprocesscontent.Text = "There no Medical Report being attached. Do you want to proceed in completing the process ?";
                            ViewState["NEXTPROCESSNAME"] = stringprocessname;
                            txtProcessCompletedRemarks.Text = "";
                            Modelpopuperrorsuccess.Show();
                            UpdatePanelModal6success.Visible = true;
                        } 
                        else if (stringreportverify == "N" && stringprocessname.ToUpper() == "PENDING FORWARDING")
                        {
                            string stringmsg = "Medical Report is not verified. Please verify the medical report";
                            CommonFunctions.ShowMessageboot(this, stringmsg);
                        } 
                    }
                    else
                    {
                        ViewState["NEXTPROCESSNAME"] = null;
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDataTableAddReports = null;
                objDataTableCompleteMedicalReport = null;
                objdatarowCompleteMedicalReport = null;
                stringprocessname = null;
            }
        } 
        #endregion

        #region For Confirmprocess Function POPUP events

        protected void btnConfirmprocessStatus_Click(object sender, EventArgs e)
        {
            DataTable objdatatablePendingItems = null;
            DataTable objdatatable = null;
            DataRow[] objdatarow = null;
            int intbalanceamt = 0;
            bool boolpendingItems = true;
            bool boolContinue = false;
            bool boolpaymentpendingItems = true;
            bool boolAssignDoctor = true;
            bool boolpendingreport = true;
            bool boomdeptou = true;
            bool boolEnquirypendingItems = true;
            decimal decimalmrAmount = 0;
            string stringbalanceamt = "";
            string stringMRamt = "";
            string stringTransSattus = "";
            bool boolpendingverifier = true;
            try
            {
                Modelpopuperrorsuccess.Hide();
                UpdatePanelModal6success.Visible = false;
                if (lblupdateprocesscontent.Text.ToUpper() == "DO YOU WANT TO EMAIL THE COMPLETED MEDICAL REPORT TO REQUESTOR?")
                {
                    if (ViewState["NEXTPROCESSNAME"] != null)
                    {
                        stringTransSattus = ViewState["NEXTPROCESSNAME"].ToString();
                    }
                    if (ViewState["NEXTPROCESSNAME"] != null && stringTransSattus != null && stringTransSattus.Trim().Length > 0)
                    {
                        if (btnPendingDespatch.Visible == true && stringTransSattus.ToUpper() == "PENDING DESPATCH")
                        {
                            if (txtDepartmentOUname.Text.Length == 0)
                            {
                                boomdeptou = false;
                            }
                        }
                        if (((btnPendingDespatch.Visible == true) && stringTransSattus.ToUpper() == "PENDING DESPATCH" && chkBypassPendingItems.Checked == false) || stringTransSattus.ToUpper() == "PENDING FORWARDING")
                        {
                            txtDepartmentOUname.Enabled = false;
                            if (Session["PendingItemsList"] != null)
                            {
                                objdatatablePendingItems = (DataTable)Session["PendingItemsList"];
                                if (objdatatablePendingItems != null && objdatatablePendingItems.Rows.Count > 0)
                                {
                                    objdatarow = objdatatablePendingItems.Select("Pending_Status = 'PENDING'");
                                    if (objdatarow != null && objdatarow.Length > 0)
                                    {
                                        boolpendingItems = false;
                                    }
                                }
                            }
                        }
                        if ((btnPendingforwarding.Visible == true) && (stringTransSattus.ToUpper() == "PENDING FORWARDING"))
                        {
                            if (hdfmramount.Value.Length > 0)
                            {
                                stringMRamt = hdfmramount.Value.ToString();
                                if (stringMRamt.Length > 0)
                                {
                                    if (stringMRamt != null && stringMRamt.Trim().Length > 0)
                                    { decimal.TryParse(stringMRamt, out decimalmrAmount); }
                                    if (ddlBlockBill.SelectedItem != null && ddlBlockBill.SelectedValue.ToString() == "NO" && ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.ToString() == "YES" && (ddlWApproved.SelectedItem != null && (ddlWApproved.SelectedValue.ToString() == "REJECTED" || ddlWApproved.SelectedValue.ToString() == "HALFWAIVER" || ddlWApproved.SelectedValue.ToString() == "PENDING")))
                                    {
                                        if (decimalmrAmount > 0 && Session["LoadPaymentReceiptsGridFC0001"] == null)
                                        {
                                            boolpaymentpendingItems = false;
                                        }
                                        else
                                        {
                                            if (Session["LoadPaymentReceiptsGridFC0001"] != null)
                                            {
                                                objdatatable = (DataTable)Session["LoadPaymentReceiptsGridFC0001"];
                                                if (objdatatable != null && objdatatable.Rows.Count > 0)
                                                {
                                                    objdatatable.DefaultView.Sort = "MODIFIED_ON asc";
                                                    objdatatable = objdatatable.DefaultView.ToTable();

                                                    stringbalanceamt = objdatatable.Rows[0]["BALANCE_AMT"].ToString();
                                                    if (stringbalanceamt.Length > 0)
                                                    {
                                                        intbalanceamt = 0;

                                                        double doubleValue = Convert.ToDouble(stringbalanceamt);
                                                        intbalanceamt = Convert.ToInt32(doubleValue);

                                                        if (intbalanceamt > 0)
                                                        {
                                                            boolpaymentpendingItems = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    boolpaymentpendingItems = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (Session["LoadEnquiryFC0001"] != null)
                            {
                                objdatatable = (DataTable)Session["LoadEnquiryFC0001"];
                                if (objdatatable != null && objdatatable.Rows.Count > 0)
                                {
                                    objdatatable.DefaultView.Sort = "MODIFIED_ON asc";
                                    objdatatable = objdatatable.DefaultView.ToTable();

                                    objdatarow = objdatatablePendingItems.Select("reference_1 = 'PENDING'");
                                    if (objdatarow != null && objdatarow.Length > 0)
                                    {
                                        boolEnquirypendingItems = false;
                                    }
                                }
                            }

                            if (Session["LoadDocterandVerifiersFC0001"] != null)
                            {
                                objdatatable = (DataTable)Session["LoadDocterandVerifiersFC0001"];

                                if (objdatatable != null && objdatatable.Rows.Count > 0)
                                {
                                    objdatarow = objdatatable.Select("verify_ref='VERIFIER' and (status ='IN-PROGRESS' or status='PENDING')");
                                    if (objdatarow != null && objdatarow.Length > 0)
                                    {
                                        boolpendingverifier = false;
                                    }
                                }
                            }
                        }
                        if ((btnPendingAssigned.Visible == true) && (stringTransSattus.ToUpper() == "PENDING ASSIGNED"))
                        {
                            if (gvassigndoctor != null && gvassigndoctor.Rows.Count > 0)
                            {
                                boolAssignDoctor = true;
                            }
                            else
                            {
                                boolAssignDoctor = false;
                            }
                            txtDepartmentOUname.Enabled = false;
                        }
                        if ((btnPendingReport.Visible == true) && (stringTransSattus.ToUpper() == "PENDING REPORT"))
                        {
                            boolpendingreport = false;
                            if (Session["LoadDocterandVerifiersFC0001"] != null)
                            {
                                objdatatable = (DataTable)Session["LoadDocterandVerifiersFC0001"];

                                if (objdatatable != null && objdatatable.Rows.Count > 0)
                                {
                                    objdatarow = objdatatable.Select("verify_ref='DOCTOR' and status ='COMPLETED'");
                                    if (objdatarow != null && objdatarow.Length > 0)
                                    {
                                        boolpendingreport = true;
                                    }
                                }
                            }
                            if ((btnPendingAssigned.Visible == false))
                            {
                                boolpendingreport = true;
                            }
                        }
                        if (boolpendingverifier)
                        {
                            if (boomdeptou)
                            {
                                if (boolpaymentpendingItems)
                                {
                                    if (boolpendingItems)
                                    {
                                        if (boolEnquirypendingItems)
                                        {
                                            if (boolAssignDoctor)
                                            {
                                                if (boolpendingreport)
                                                {
                                                    LoadSMREMAILNOTIFICATION();
                                                    if (txtsmremailRequestor.Text.Trim().Length == 0)
                                                    {
                                                        txtsmremailRequestor.Text = txtReqEmail.Text.Trim();
                                                    }
                                                    mpePdtPlsmremaisend.Show();
                                                    Panel10.Visible = true;
                                                }
                                                else
                                                {
                                                    CommonFunctions.ShowMessageboot(this, "Please Complete the Doctor Status");
                                                }
                                            }
                                            else
                                            {
                                                CommonFunctions.ShowMessageboot(this, "Please Assign Doctor");
                                            }
                                        }
                                        else
                                        {
                                            CommonFunctions.ShowMessageboot(this, "Please Complete Enquiry Status");
                                        }
                                    }
                                    else
                                    {
                                        CommonFunctions.ShowMessageboot(this, "Please Complete Pending Items");
                                    }
                                }
                                else
                                {
                                    CommonFunctions.ShowMessageboot(this, "Please Complete Payment Details");
                                }
                            }
                            else
                            {
                                CommonFunctions.ShowMessageboot(this, "Please Select Department OU");
                            }
                        }
                        else
                        {
                            CommonFunctions.ShowMessageboot(this, "Please Complete the Verifier Status");
                        }
                    }
                }
                else
                {
                    ValidateProcesCOntrol(ref boolContinue, ref stringTransSattus, ref objdatatablePendingItems, ref boolpendingItems, ref boolpaymentpendingItems, ref boolAssignDoctor, ref boolpendingreport, ref boolEnquirypendingItems, ref stringMRamt, ref decimalmrAmount);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringTransSattus = null;
                objdatatablePendingItems = null;
                stringbalanceamt = null;
                stringMRamt = null;
                intbalanceamt = 0;
                objdatatable = null;
                objdatarow = null;
            }
        } 
        private void ValidateProcesCOntrol(ref bool boolContinue, ref string stringTransSattus, ref DataTable objdatatablePendingItems, ref bool boolpendingItems, ref bool boolpaymentpendingItems, ref bool boolAssignDoctor, ref bool boolpendingreport, ref bool boolEnquirypendingItems, ref string stringMRamt, ref decimal decimalmrAmount)
        {
            DataRow[] objdatarow = null;
            int intbalanceamt = 0;
            DataTable objdatatable = null;
            string stringRequestID = "";
            string stringbalanceamt = "";
            bool boolpendingverifier = true;
            bool boomdeptou = true;
            try
            {
                if (ViewState["NEXTPROCESSNAME"] != null)
                {
                    stringTransSattus = ViewState["NEXTPROCESSNAME"].ToString();
                }
                if (ViewState["NEXTPROCESSNAME"] != null && stringTransSattus != null && stringTransSattus.Trim().Length > 0)
                {
                    if (btnPendingDespatch.Visible == true && stringTransSattus.ToUpper() == "PENDING DESPATCH")
                    {
                        if (txtDepartmentOUname.Text.Length == 0)
                        {
                            boomdeptou = false;
                        }
                    }
                    if (((btnPendingDespatch.Visible == true) && stringTransSattus.ToUpper() == "PENDING DESPATCH" && chkBypassPendingItems.Checked == false) || stringTransSattus.ToUpper() == "PENDING FORWARDING")
                    {
                        txtDepartmentOUname.Enabled = false;

                        if (Session["PendingItemsList"] != null)
                        {
                            objdatatablePendingItems = (DataTable)Session["PendingItemsList"];
                        }
                        if (objdatatablePendingItems != null && objdatatablePendingItems.Rows.Count > 0)
                        {
                            objdatarow = objdatatablePendingItems.Select("Pending_Status = 'PENDING'");
                            if (objdatarow != null && objdatarow.Length > 0)
                            {
                                boolpendingItems = false;
                            }
                        }
                    }
                    if ((btnPendingforwarding.Visible == true) && (stringTransSattus.ToUpper() == "PENDING FORWARDING"))
                    {
                        if (hdfmramount.Value.Length > 0)
                        {
                            stringMRamt = hdfmramount.Value.ToString();
                            if (stringMRamt.Length > 0)
                            {
                                if (stringMRamt != null && stringMRamt.Trim().Length > 0)
                                { decimal.TryParse(stringMRamt, out decimalmrAmount); }

                                if (ddlBlockBill.SelectedItem != null && ddlBlockBill.SelectedValue.ToString() == "NO" && ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.ToString() == "YES" && (ddlWApproved.SelectedItem != null && (ddlWApproved.SelectedValue.ToString() == "REJECTED" || ddlWApproved.SelectedValue.ToString() == "HALFWAIVER" || ddlWApproved.SelectedValue.ToString() == "PENDING")))
                                {
                                    if (decimalmrAmount > 0 && Session["LoadPaymentReceiptsGridFC0001"] == null)
                                    {
                                        boolpaymentpendingItems = false;
                                    }
                                    else
                                    {
                                        if (Session["LoadPaymentReceiptsGridFC0001"] != null)
                                        {
                                            objdatatable = (DataTable)Session["LoadPaymentReceiptsGridFC0001"];
                                            if (objdatatable != null && objdatatable.Rows.Count > 0)
                                            {
                                                objdatatable.DefaultView.Sort = "MODIFIED_ON asc";
                                                objdatatable = objdatatable.DefaultView.ToTable();

                                                stringbalanceamt = objdatatable.Rows[0]["BALANCE_AMT"].ToString();
                                                if (stringbalanceamt.Length > 0)
                                                {
                                                    intbalanceamt = 0;
                                                    double doubleValue = Convert.ToDouble(stringbalanceamt);
                                                    intbalanceamt = Convert.ToInt32(doubleValue);
                                                    if (intbalanceamt > 0)
                                                    {
                                                        boolpaymentpendingItems = false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                boolpaymentpendingItems = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (Session["LoadEnquiryFC0001"] != null)
                        {
                            objdatatable = (DataTable)Session["LoadEnquiryFC0001"];
                            if (objdatatable != null && objdatatable.Rows.Count > 0)
                            {
                                objdatatable.DefaultView.Sort = "MODIFIED_ON asc";
                                objdatatable = objdatatable.DefaultView.ToTable();
                                objdatarow = objdatatablePendingItems.Select("reference_1 = 'PENDING'");
                                if (objdatarow != null && objdatarow.Length > 0)
                                {
                                    boolEnquirypendingItems = false;
                                }
                            }
                        }

                        if (Session["LoadDocterandVerifiersFC0001"] != null)
                        {
                            objdatatable = (DataTable)Session["LoadDocterandVerifiersFC0001"];

                            if (objdatatable != null && objdatatable.Rows.Count > 0)
                            {
                                objdatarow = objdatatable.Select("verify_ref='VERIFIER' and (status ='IN-PROGRESS' or status='PENDING')");
                                if (objdatarow != null && objdatarow.Length > 0)
                                {
                                    boolpendingverifier = false;
                                }
                            }
                        }
                    }
                    else if ((btnPendingAssigned.Visible == true) && (stringTransSattus.ToUpper() == "PENDING ASSIGNED"))
                    {
                        if (gvassigndoctor != null && gvassigndoctor.Rows.Count > 0)
                        {
                            boolAssignDoctor = true;
                        }
                        else
                        {
                            boolAssignDoctor = false;
                        }
                        txtDepartmentOUname.Enabled = false;
                    }
                    else if ((btnPendingReport.Visible == true) && (stringTransSattus.ToUpper() == "PENDING REPORT"))
                    {
                        boolpendingreport = false;
                        if (Session["LoadDocterandVerifiersFC0001"] != null)
                        {
                            objdatatable = (DataTable)Session["LoadDocterandVerifiersFC0001"];

                            if (objdatatable != null && objdatatable.Rows.Count > 0)
                            {
                                objdatarow = objdatatable.Select("verify_ref='DOCTOR' and status ='COMPLETED'");
                                if (objdatarow != null && objdatarow.Length > 0)
                                {
                                    boolpendingreport = true;
                                }
                            }
                        }
                        if ((btnPendingAssigned.Visible == false))
                        {
                            boolpendingreport = true;
                        }
                    }
                    if (boolpendingverifier)
                    {
                        if (boomdeptou)
                        {
                            if (boolpaymentpendingItems)
                            {
                                if (boolpendingItems)
                                {
                                    if (boolEnquirypendingItems)
                                    {
                                        if (boolAssignDoctor)
                                        {
                                            if (boolpendingreport)
                                            {
                                                if (UpdateProcessStatus(stringTransSattus.Trim().ToUpper()))
                                                {
                                                    boolContinue = true;
                                                }
                                                if (boolContinue)
                                                {
                                                    stringRequestID = txtReqNo.Text.Trim().ToUpper();
                                                    LoadData(stringRequestID, "NONLOAD", "FORWARDING");
                                                    TABActive(1);
                                                }
                                            }
                                            else
                                            {
                                                CommonFunctions.ShowMessageboot(this, "Please Complete the Doctor Status");
                                            }
                                        }
                                        else
                                        {
                                            CommonFunctions.ShowMessageboot(this, "Please Assign Doctor");
                                        }
                                    }
                                    else
                                    {
                                        CommonFunctions.ShowMessageboot(this, "Please Complete Enquiry Status");
                                    }
                                }
                                else
                                {
                                    CommonFunctions.ShowMessageboot(this, "Please Complete Pending Items");
                                }
                            }
                            else
                            {
                                CommonFunctions.ShowMessageboot(this, "Please Complete Payment Details");
                            }
                        }
                        else
                        {
                            CommonFunctions.ShowMessageboot(this, "Please Select Department OU");
                        }
                    }
                    else
                    {
                        CommonFunctions.ShowMessageboot(this, "Please Complete the Verifier Status");
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objdatarow = null;
                intbalanceamt = 0;
                objdatatable = null;
                stringRequestID = null;
                stringbalanceamt = null;
            }
        }

        protected void btnConfirmprocessClose_Click(object sender, EventArgs e)
        {
            int intbalanceamt = 0;
            bool boolContinue = false;
            bool boolpendingItems = true;
            bool boolpaymentpendingItems = true;
            bool boolEnquirypendingItems = true;
            bool boolAssignDoctor = true;
            bool boolpendingreport = true;
            DataTable objdatatablePendingItems = null;
            DataRow[] objdatarow = null;
            DataTable objdatatable = null;
            string stringTransSattus = "";
            string stringMRamt = ""; 
            string stringRequestID = "";
            string stringbalanceamt = "";
            bool boomdeptou = true;
            bool boolpendingverifier = true;
            try
            {
                if (lblupdateprocesscontent.Text == "Do you want to email the COMPLETED MEDICAL REPORT to requestor?")
                {
                    if (ViewState["NEXTPROCESSNAME"] != null)
                    {
                        stringTransSattus = ViewState["NEXTPROCESSNAME"].ToString();
                    }
                    if (ViewState["NEXTPROCESSNAME"] != null && stringTransSattus != null && stringTransSattus.Trim().Length > 0)
                    {
                        if (btnPendingDespatch.Visible == true && stringTransSattus.ToUpper() == "PENDING DESPATCH")
                        {
                            if (txtDepartmentOUname.Text.Length == 0)
                            {
                                boomdeptou = false;
                            }
                        }
                        if (((btnPendingDespatch.Visible == true) && stringTransSattus.ToUpper() == "PENDING DESPATCH" && chkBypassPendingItems.Checked == false) || stringTransSattus.ToUpper() == "PENDING FORWARDING")
                        {
                            if (Session["PendingItemsList"] != null)
                            {
                                objdatatablePendingItems = (DataTable)Session["PendingItemsList"];
                            }
                            if (objdatatablePendingItems != null && objdatatablePendingItems.Rows.Count > 0)
                            {
                                objdatarow = objdatatablePendingItems.Select("Pending_Status = 'PENDING'");
                                if (objdatarow != null && objdatarow.Length > 0)
                                {
                                    boolpendingItems = false;
                                }
                            }
                        }
                        if ((btnPendingforwarding.Visible == true) && (stringTransSattus.ToUpper() == "PENDING FORWARDING"))
                        {
                            if (hdfmramount.Value.Length > 0)
                            {
                                stringMRamt = hdfmramount.Value.ToString();
                                if (stringMRamt.Length > 0)
                                {
                                    decimal decimalmrAmount = 0;
                                    if (stringMRamt != null && stringMRamt.Trim().Length > 0)
                                    { decimal.TryParse(stringMRamt, out decimalmrAmount); }

                                    if (ddlBlockBill.SelectedItem != null && ddlBlockBill.SelectedValue.ToString() == "NO" && ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.ToString() == "YES" && (ddlWApproved.SelectedItem != null && (ddlWApproved.SelectedValue.ToString() == "REJECTED" || ddlWApproved.SelectedValue.ToString() == "HALFWAIVER" || ddlWApproved.SelectedValue.ToString() == "PENDING")))
                                    {
                                        if (decimalmrAmount > 0 && Session["LoadPaymentReceiptsGridFC0001"] == null)
                                        {
                                            boolpaymentpendingItems = false;
                                        }
                                        else
                                        {
                                            if (Session["LoadPaymentReceiptsGridFC0001"] != null)
                                            {
                                                objdatatable = (DataTable)Session["LoadPaymentReceiptsGridFC0001"];
                                                if (objdatatable != null && objdatatable.Rows.Count > 0)
                                                {
                                                    objdatatable.DefaultView.Sort = "MODIFIED_ON asc";
                                                    objdatatable = objdatatable.DefaultView.ToTable();

                                                    stringbalanceamt = objdatatable.Rows[0]["BALANCE_AMT"].ToString();
                                                    if (stringbalanceamt.Length > 0)
                                                    {
                                                        intbalanceamt = 0;

                                                        double doubleValue = Convert.ToDouble(stringbalanceamt);
                                                        intbalanceamt = Convert.ToInt32(doubleValue);

                                                        if (intbalanceamt > 0)
                                                        {
                                                            boolpaymentpendingItems = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    boolpaymentpendingItems = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (Session["LoadEnquiryFC0001"] != null)
                            {
                                objdatatable = (DataTable)Session["LoadEnquiryFC0001"];
                                if (objdatatable != null && objdatatable.Rows.Count > 0)
                                {
                                    objdatatable.DefaultView.Sort = "MODIFIED_ON asc";
                                    objdatatable = objdatatable.DefaultView.ToTable();

                                    objdatarow = objdatatable.Select("reference_1 = 'PENDING'");
                                    if (objdatarow != null && objdatarow.Length > 0)
                                    {
                                        boolEnquirypendingItems = false;
                                    }
                                }
                            }
                            if (Session["LoadDocterandVerifiersFC0001"] != null)
                            {
                                objdatatable = (DataTable)Session["LoadDocterandVerifiersFC0001"];

                                if (objdatatable != null && objdatatable.Rows.Count > 0)
                                {
                                    objdatarow = objdatatable.Select("verify_ref='VERIFIER' and (status ='IN-PROGRESS' or status='PENDING')");
                                    if (objdatarow != null && objdatarow.Length > 0)
                                    {
                                        boolpendingverifier = false;
                                    }
                                }
                            }
                        }
                        else if ((btnPendingAssigned.Visible == true) && (stringTransSattus.ToUpper() == "PENDING ASSIGNED"))
                        {
                            if (gvassigndoctor != null && gvassigndoctor.Rows.Count > 0)
                            {
                                boolAssignDoctor = true;
                            }
                            else
                            {
                                boolAssignDoctor = false;
                            }
                        }
                        else if ((btnPendingReport.Visible == true) && (stringTransSattus.ToUpper() == "PENDING REPORT"))
                        {
                            boolpendingreport = false;
                            if (Session["LoadDocterandVerifiersFC0001"] != null)
                            {
                                objdatatable = (DataTable)Session["LoadDocterandVerifiersFC0001"];

                                if (objdatatable != null && objdatatable.Rows.Count > 0)
                                {
                                    objdatarow = objdatatable.Select("verify_ref='DOCTOR' and status ='COMPLETED'");
                                    if (objdatarow != null && objdatarow.Length > 0)
                                    {
                                        boolpendingreport = true;
                                    }
                                }
                            }
                            if ((btnPendingAssigned.Visible == false))
                            {
                                boolpendingreport = true;
                            }
                        }
                        if (boolpendingverifier)
                        {
                            if (boomdeptou)
                            {
                                if (boolpaymentpendingItems)
                                {
                                    if (boolpendingItems)
                                    {
                                        if (boolEnquirypendingItems)
                                        {
                                            if (boolAssignDoctor)
                                            {
                                                if (boolpendingreport)
                                                {
                                                    if (UpdateProcessStatus(stringTransSattus.Trim().ToUpper()))
                                                    {
                                                        boolContinue = true;
                                                    }
                                                    if (boolContinue)
                                                    {
                                                        stringRequestID = txtReqNo.Text.Trim().ToUpper();
                                                        if (stringTransSattus.ToUpper() == "PENDING ASSIGNED")
                                                        {
                                                            LoadDocterandVerifiers(stringRequestID, "NONLOAD");//2
                                                        }
                                                        LoadData(stringRequestID, "NONLOAD", "");
                                                        TABActive(1);
                                                    }
                                                }
                                                else
                                                {
                                                    CommonFunctions.ShowMessageboot(this, "Please Complete the Doctor Status");
                                                }
                                            }
                                            else
                                            {
                                                CommonFunctions.ShowMessageboot(this, "Please Assign Doctor");
                                            }
                                        }
                                        else
                                        {
                                            CommonFunctions.ShowMessageboot(this, "Please Complete Enquiry Status");
                                        }
                                    }
                                    else
                                    {
                                        CommonFunctions.ShowMessageboot(this, "Please Complete Pending Items");
                                    }
                                }
                                else
                                {
                                    CommonFunctions.ShowMessageboot(this, "Please Complete Payment Details");
                                }
                            }
                            else
                            {
                                CommonFunctions.ShowMessageboot(this, "Please Select Department OU");
                            }
                        }
                        else
                        {
                            CommonFunctions.ShowMessageboot(this, "Please Complete the Verifier Status");
                        }
                    }
                }
                else
                {
                    Modelpopuperrorsuccess.Hide();
                    UpdatePanelModal6success.Visible = false;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringTransSattus = null;
                objdatatablePendingItems = null;
                stringMRamt = null;
                objdatarow = null;
                objdatatable = null;
                intbalanceamt = 0;
                stringRequestID = null;
                stringbalanceamt = null;
            }
        } 
        private bool UpdateProcessStatus(string stringTransSattus)//fix
        {
            int interrorcount = 0;
            bool boolStatus = false;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string[] stringInputs = new string[2];
            string stringformid = "FC0001R1V3";
            try
            { 
                if (ViewState["NEXTPROCESSNAME"] != null)
                {
                    stringTransSattus = ViewState["NEXTPROCESSNAME"].ToString();
                }
                if (ViewState["NEXTPROCESSNAME"] != null && stringTransSattus != null && stringTransSattus.Trim().Length > 0)
                {
                    stringInputs[0] = txtReqNo.Text.Trim().ToUpper();
                    stringInputs[1] = txtProcessCompletedRemarks.Text.Trim(); 
                    objDatasetResult = CommonFunctions.UpdateMRRegistrationR1V1("UpdateMRRegistrationR1V1", stringInputs, stringformid, out interrorcount, out stringOutputResult); 
                    if (interrorcount == 0)
                    {
                        boolStatus = true;
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        boolStatus = false;
                    }

                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                stringOutputResult = null;
                stringformid = null;
            }
            return boolStatus;
        }

        private void ProcessControlOverDueIndicator(String stringMRStatus, string stringDueduedays)
        {
            try
            {
                if (stringMRStatus.Length > 0)
                {
                    if (stringMRStatus == "PENDING TRACING")
                    {
                        if (stringDueduedays.Length > 0 && stringDueduedays == "RED")
                        {
                            imgbtnoverduewithoutdelayreasonTracing.Visible = true;
                        }
                        else if (stringDueduedays.Length > 0 && stringDueduedays == "BLUE")
                        {
                            imgbtnoverduewithdelayreasonTracing.Visible = true;
                        }
                    }
                    else if (stringMRStatus == "PENDING DESPATCH")
                    {
                        if (stringDueduedays.Length > 0 && stringDueduedays == "RED")
                        {
                            imgbtnoverduewithoutdelayreasoDespatch.Visible = true;
                        }
                        else if (stringDueduedays.Length > 0 && stringDueduedays == "BLUE")
                        {
                            imgbtnoverduewithdelayreasonDespatch.Visible = true;
                        }
                    }
                    else if (stringMRStatus == "PENDING ASSIGNED")
                    {
                        if (stringDueduedays.Length > 0 && stringDueduedays == "RED")
                        {
                            imgbtnoverduewithoutdelayreasonPendingAssigned.Visible = true;
                        }
                        else if (stringDueduedays.Length > 0 && stringDueduedays == "BLUE")
                        {
                            imgbtnoverduewithdelayreasonPendingAssigned.Visible = true;
                        }
                    }
                    else if (stringMRStatus == "PENDING REPORT")
                    {
                        if (stringDueduedays.Length > 0 && stringDueduedays == "RED")
                        {
                            imgbtnoverduewithoutdelayreasonPendingReport.Visible = true;
                        }
                        else if (stringDueduedays.Length > 0 && stringDueduedays == "BLUE")
                        {
                            imgbtnoverduewithdelayreasonReport.Visible = true;
                        }
                    }
                    else if (stringMRStatus == "PENDING RELEASE TO HIMS")
                    {
                        if (stringDueduedays.Length > 0 && stringDueduedays == "RED")
                        {
                            imgbtnoverduewithoutdelayreasonReleasetoHIMS.Visible = true;
                        }
                        else if (stringDueduedays.Length > 0 && stringDueduedays == "BLUE")
                        {
                            imgbtnoverduewithdelayreasonReleasetoHIMS.Visible = true;
                        }
                    }
                    else if (stringMRStatus == "PENDING SUP VETTING")
                    {
                        if (stringDueduedays.Length > 0 && stringDueduedays == "RED")
                        {
                            imgbtnoverduewithoutdelayreasonSupVetting.Visible = true;
                        }
                        else if (stringDueduedays.Length > 0 && stringDueduedays == "BLUE")
                        {
                            imgbtnoverduewithdelayreasonSupVetting.Visible = true;
                        }
                    }
                    else if (stringMRStatus == "PENDING FORWARDING")
                    {
                        if (stringDueduedays.Length > 0 && stringDueduedays == "RED")
                        {
                            imgbtnoverduewithoutdelayreasonforwarding.Visible = true;
                        }
                        else if (stringDueduedays.Length > 0 && stringDueduedays == "BLUE")
                        {
                            imgbtnoverduewithdelayreasonforwarding.Visible = true;
                        }
                    }
                    else if (stringMRStatus == "PENDING COLLECT IN PERSON")
                    {
                        if (stringDueduedays.Length > 0 && stringDueduedays == "RED")
                        {
                            imgbtnoverduewithoutdelayreasonCollectInPerson.Visible = true;
                        }
                        else if (stringDueduedays.Length > 0 && stringDueduedays == "BLUE")
                        {
                            imgbtnoverduewithdelayreasonCollectInPerson.Visible = true;
                        } 
                    } 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        } 
        private void ProcessControl(String stringMRStatus, string stringDeliverBy, DateTime? objDueDate)
        {
            try
            {
                if (stringMRStatus.Length > 0)
                {
                    pnlprocess.Visible = false;
                    pnlForwarded.Visible = false;
                    btnPendingTracing.Enabled = false;
                    btnPendingDespatch.Enabled = false;
                    btnPendingAssigned.Enabled = false;
                    btnPendingReport.Enabled = false;
                    btnPendingReleasetoHIMS.Enabled = false;
                    btnPendingSupVetting.Enabled = false;
                    btnPendingforwarding.Enabled = false;
                    btnPendingCollectInPerson.Enabled = false;
                    if (txtReqNo.Text.Trim().Length > 0 && stringMRStatus.ToString() != "DRAFT")
                    {
                        ControlsDropdownValues("REPORTTYPE", false);
                    } 
                    if (stringDeliverBy.Length > 0 && stringDeliverBy.ToUpper() == "INPERSON")
                    {
                        pnlPendingCollectInPerson.Visible = true;
                    }
                    else
                    {
                        pnlPendingCollectInPerson.Visible = false;
                    } 
                    if (stringMRStatus == "PENDING TRACING")
                    {
                        ControlsDropdownValues("REPORTTYPE", true);
                        pnlprocess.Visible = true;
                        btnPendingTracing.Enabled = true; 
                        if (objDueDate < DateTime.Now.Date)
                        {
                            btnPendingTracing.BackColor = Color.FromArgb(255, 77, 77);
                            btnPendingTracing.ForeColor = Color.FromArgb(255, 255, 255); 
                        }
                        else
                        {
                            btnPendingTracing.BackColor = Color.FromArgb(42, 167, 237);
                            btnPendingTracing.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        btnPendingDespatch.BackColor = btnPendingAssigned.BackColor = btnPendingReport.BackColor = btnPendingReleasetoHIMS.BackColor = btnPendingSupVetting.BackColor = btnPendingforwarding.BackColor = btnPendingCollectInPerson.BackColor = Color.FromArgb(255, 255, 255);
                        btnPendingDespatch.ForeColor = btnPendingAssigned.ForeColor = btnPendingReport.ForeColor = btnPendingReleasetoHIMS.ForeColor = btnPendingSupVetting.ForeColor = btnPendingforwarding.ForeColor = btnPendingCollectInPerson.ForeColor = Color.FromArgb(57, 114, 121);

                    }
                    else if (stringMRStatus == "PENDING DESPATCH")
                    {
                        ControlsDropdownValues("REPORTTYPE", true);
                        pnlprocess.Visible = true; 
                        btnPendingDespatch.Enabled = true; 
                        btnPendingTracing.BackColor = Color.FromArgb(186, 228, 252);
                        btnPendingTracing.ForeColor = Color.FromArgb(57, 114, 121);
                        if (objDueDate < DateTime.Now.Date)
                        {
                            btnPendingDespatch.BackColor = Color.FromArgb(255, 77, 77);
                            btnPendingDespatch.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        else
                        {
                            btnPendingDespatch.BackColor = Color.FromArgb(42, 167, 237);
                            btnPendingDespatch.ForeColor = Color.FromArgb(255, 255, 255);
                        } 
                        btnPendingAssigned.BackColor = btnPendingReport.BackColor = btnPendingReleasetoHIMS.BackColor = btnPendingSupVetting.BackColor = btnPendingforwarding.BackColor = btnPendingCollectInPerson.BackColor = Color.FromArgb(255, 255, 255);
                        btnPendingAssigned.ForeColor = btnPendingReport.ForeColor = btnPendingReleasetoHIMS.ForeColor = btnPendingSupVetting.ForeColor = btnPendingforwarding.ForeColor = btnPendingCollectInPerson.ForeColor = Color.FromArgb(57, 114, 121);

                    }
                    else if (stringMRStatus == "PENDING ASSIGNED")
                    {
                        pnlprocess.Visible = true; 
                        btnPendingAssigned.Enabled = true; 

                        btnPendingTracing.BackColor = btnPendingDespatch.BackColor = Color.FromArgb(186, 228, 252);
                        btnPendingTracing.ForeColor = btnPendingDespatch.ForeColor = Color.FromArgb(57, 114, 121);
                        if (objDueDate < DateTime.Now.Date)
                        {
                            btnPendingAssigned.BackColor = Color.FromArgb(255, 77, 77);
                            btnPendingAssigned.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        else
                        {
                            btnPendingAssigned.BackColor = Color.FromArgb(42, 167, 237);
                            btnPendingAssigned.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        btnPendingReport.BackColor = btnPendingReleasetoHIMS.BackColor = btnPendingSupVetting.BackColor = btnPendingforwarding.BackColor = btnPendingCollectInPerson.BackColor = Color.FromArgb(255, 255, 255);
                        btnPendingReport.ForeColor = btnPendingReleasetoHIMS.ForeColor = btnPendingSupVetting.ForeColor = btnPendingforwarding.ForeColor = btnPendingCollectInPerson.ForeColor = Color.FromArgb(57, 114, 121);

                    }
                    else if (stringMRStatus == "PENDING REPORT")
                    {
                        pnlprocess.Visible = true; 
                        btnPendingReport.Enabled = true;  
                        btnPendingTracing.BackColor = btnPendingDespatch.BackColor = btnPendingAssigned.BackColor = Color.FromArgb(186, 228, 252);
                        btnPendingTracing.ForeColor = btnPendingDespatch.ForeColor = btnPendingAssigned.ForeColor = Color.FromArgb(57, 114, 121);
                        if (objDueDate < DateTime.Now.Date)
                        {
                            btnPendingReport.BackColor = Color.FromArgb(255, 77, 77);
                            btnPendingReport.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        else
                        {
                            btnPendingReport.BackColor = Color.FromArgb(42, 167, 237);
                            btnPendingReport.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        btnPendingReleasetoHIMS.BackColor = btnPendingSupVetting.BackColor = btnPendingforwarding.BackColor = btnPendingCollectInPerson.BackColor = Color.FromArgb(255, 255, 255);
                        btnPendingReleasetoHIMS.ForeColor = btnPendingSupVetting.ForeColor = btnPendingforwarding.ForeColor = btnPendingCollectInPerson.ForeColor = Color.FromArgb(57, 114, 121);

                    }
                    else if (stringMRStatus == "PENDING RELEASE TO HIMS")
                    {
                        pnlprocess.Visible = true; 
                        btnPendingReleasetoHIMS.Enabled = true; 
                        btnPendingTracing.BackColor = btnPendingDespatch.BackColor = btnPendingAssigned.BackColor = btnPendingReport.BackColor = Color.FromArgb(186, 228, 252);
                        btnPendingTracing.ForeColor = btnPendingDespatch.ForeColor = btnPendingAssigned.ForeColor = btnPendingReport.ForeColor = Color.FromArgb(57, 114, 121);
                        if (objDueDate < DateTime.Now.Date)
                        {
                            btnPendingReleasetoHIMS.BackColor = Color.FromArgb(255, 77, 77);
                            btnPendingReleasetoHIMS.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        else
                        {
                            btnPendingReleasetoHIMS.BackColor = Color.FromArgb(42, 167, 237);
                            btnPendingReleasetoHIMS.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        btnPendingSupVetting.BackColor = btnPendingforwarding.BackColor = btnPendingCollectInPerson.BackColor = Color.FromArgb(255, 255, 255);
                        btnPendingSupVetting.ForeColor = btnPendingforwarding.ForeColor = btnPendingCollectInPerson.ForeColor = Color.FromArgb(57, 114, 121);
                    }
                    else if (stringMRStatus == "PENDING SUP VETTING")
                    {
                        pnlprocess.Visible = true; 
                        btnPendingSupVetting.Enabled = true; 
                        btnPendingTracing.BackColor = btnPendingDespatch.BackColor = btnPendingAssigned.BackColor = btnPendingReport.BackColor = btnPendingReleasetoHIMS.BackColor = Color.FromArgb(186, 228, 252);
                        btnPendingTracing.ForeColor = btnPendingDespatch.ForeColor = btnPendingAssigned.ForeColor = btnPendingReport.ForeColor = btnPendingReleasetoHIMS.ForeColor = Color.FromArgb(57, 114, 121);
                        if (objDueDate < DateTime.Now.Date)
                        {
                            btnPendingSupVetting.BackColor = Color.FromArgb(255, 77, 77);
                            btnPendingSupVetting.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        else
                        {
                            btnPendingSupVetting.BackColor = Color.FromArgb(42, 167, 237);
                            btnPendingSupVetting.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        btnPendingforwarding.BackColor = btnPendingCollectInPerson.BackColor = Color.FromArgb(255, 255, 255);
                        btnPendingforwarding.ForeColor = btnPendingCollectInPerson.ForeColor = Color.FromArgb(57, 114, 121); 
                    }
                    else if (stringMRStatus == "PENDING FORWARDING")
                    {
                        pnlprocess.Visible = true; 
                        btnPendingforwarding.Enabled = true; 

                        btnPendingTracing.BackColor = btnPendingDespatch.BackColor = btnPendingAssigned.BackColor = btnPendingReport.BackColor = btnPendingReleasetoHIMS.BackColor = btnPendingSupVetting.BackColor = Color.FromArgb(186, 228, 252);
                        btnPendingTracing.ForeColor = btnPendingDespatch.ForeColor = btnPendingAssigned.ForeColor = btnPendingReport.ForeColor = btnPendingReleasetoHIMS.ForeColor = btnPendingSupVetting.ForeColor = Color.FromArgb(57, 114, 121);
                        if (objDueDate < DateTime.Now.Date)
                        {
                            btnPendingforwarding.BackColor = Color.FromArgb(255, 77, 77);
                            btnPendingforwarding.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        else
                        {
                            btnPendingforwarding.BackColor = Color.FromArgb(42, 167, 237);
                            btnPendingforwarding.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        btnPendingCollectInPerson.BackColor = Color.FromArgb(255, 255, 255);
                        btnPendingCollectInPerson.ForeColor = Color.FromArgb(57, 114, 121); 
                    }
                    else if (stringMRStatus == "PENDING COLLECT IN PERSON")
                    {
                        pnlprocess.Visible = true; 
                        btnPendingCollectInPerson.Enabled = true;

                        btnPendingTracing.BackColor = btnPendingDespatch.BackColor = btnPendingAssigned.BackColor = btnPendingReport.BackColor = btnPendingReleasetoHIMS.BackColor = btnPendingSupVetting.BackColor = btnPendingforwarding.BackColor = Color.FromArgb(186, 228, 252);
                        btnPendingTracing.ForeColor = btnPendingDespatch.ForeColor = btnPendingAssigned.ForeColor = btnPendingReport.ForeColor = btnPendingReleasetoHIMS.ForeColor = btnPendingSupVetting.ForeColor = btnPendingforwarding.ForeColor = Color.FromArgb(57, 114, 121);
                        if (objDueDate < DateTime.Now.Date)
                        {
                            btnPendingCollectInPerson.BackColor = Color.FromArgb(255, 77, 77);
                            btnPendingCollectInPerson.ForeColor = Color.FromArgb(255, 255, 255);
                        }
                        else
                        {
                            btnPendingCollectInPerson.BackColor = Color.FromArgb(42, 167, 237);
                            btnPendingCollectInPerson.ForeColor = Color.FromArgb(255, 255, 255);
                        } 
                    }
                    else if (stringMRStatus == "FORWARDED" || stringMRStatus == "COLLECTED")
                    {
                        pnlprocess.Visible = true;
                        pnlForwarded.Visible = true;
                        if (stringMRStatus == "FORWARDED")
                        {
                            if (pnlPendingCollectInPerson.Visible == true)
                            {
                                //btnForwarded.Text = "10";
                            }
                            else
                            {
                                //btnForwarded.Text = "9";
                            }
                            lblForwardStatus.Text = "Forwarded";
                        }
                        else if (stringMRStatus == "COLLECTED")
                        {
                            if (pnlPendingCollectInPerson.Visible == true)
                            {
                                //btnForwarded.Text = "10";
                            }
                            else
                            {
                                //btnForwarded.Text = "9";
                            }
                            lblForwardStatus.Text = "Collected";
                        } 
                        btnPendingTracing.Enabled = false;
                        btnPendingDespatch.Enabled = false;
                        btnPendingAssigned.Enabled = false;
                        btnPendingReport.Enabled = false;
                        btnPendingReleasetoHIMS.Enabled = false;
                        btnPendingSupVetting.Enabled = false;
                        btnPendingforwarding.Enabled = false;
                        btnPendingCollectInPerson.Enabled = false;

                        btnPendingTracing.BackColor = btnPendingDespatch.BackColor = btnPendingAssigned.BackColor = btnPendingReport.BackColor = btnPendingReleasetoHIMS.BackColor = btnPendingSupVetting.BackColor = btnPendingforwarding.BackColor = btnPendingCollectInPerson.BackColor = Color.FromArgb(186, 228, 252);
                        btnPendingTracing.ForeColor = btnPendingDespatch.ForeColor = btnPendingAssigned.ForeColor = btnPendingReport.ForeColor = btnPendingReleasetoHIMS.ForeColor = btnPendingSupVetting.ForeColor = btnPendingforwarding.ForeColor = btnPendingCollectInPerson.ForeColor = Color.FromArgb(57, 114, 121);
                         
                    } 
                }
                else
                {
                    pnlprocess.Visible = false; 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        private void ProcessTABControlProcesstype(String stringMRProcessID, String stringTYPE)
        { 
            DataSet objDatasetResult = null;
            DataTable objDataTable = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string[] stringOutputResult = null;
            string stringformid = "FA0033R1V1";
            string stringOrderBy = "";
            string stringServiceType = "";
            string stringExpression = "";
            string stringBoID = "";
            string stringMRStatus = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            { 
                pnlPendingTracing.Visible = false;
                pnlPendingDespatch.Visible = false;
                pnlPendingAssigned.Visible = false;
                pnlPendingReport.Visible = false;
                pnlPendingReleasetoHIMS.Visible = false;
                pnlSupervisorVetting.Visible = false;
                pnlforwarding.Visible = false;
                pnlPendingCollectInPerson.Visible = false; 
                if (stringMRProcessID.Length > 0)
                {
                    if ((Session["LoadProcessTABControlProcesstype"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                    {
                        stringServiceType = "List1R1V1";
                        stringExpression = "And mrstprts.be_id= '" + stringBoID + "' And mrstprts.mrp_id= '" + stringMRProcessID + "' and mrstprts.delmark ='N' "; 
                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                            {
                                objDataTable = objDatasetResult.Tables["t1"];

                                ProcessHeaderDynamicName(objDataTable);
                            } 
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                            pnlProcessHistory.Visible = false;
                        }
                    }
                    else
                    {
                        if (HttpContext.Current.Session["LoadProcessTABControlProcesstype"] != null)
                        {
                            objDataTable = (DataTable)HttpContext.Current.Session["LoadProcessTABControlProcesstype"];
                        }
                    } 
                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        objDataTable.DefaultView.Sort = "seq_id asc";
                        objDataTable = objDataTable.DefaultView.ToTable();

                        foreach (DataRow objDataRow in objDataTable.Rows)
                        {
                            stringMRStatus = objDataRow["TRANS_STATUS"].ToString();

                            if (stringMRStatus == "PENDING TRACING")
                            {
                                pnlPendingTracing.Visible = true;
                            }
                            else if (stringMRStatus == "PENDING DESPATCH")
                            {
                                pnlPendingDespatch.Visible = true;
                            }
                            else if (stringMRStatus == "PENDING ASSIGNED")
                            {
                                pnlPendingAssigned.Visible = true;
                            }
                            else if (stringMRStatus == "PENDING REPORT")
                            {
                                pnlPendingReport.Visible = true;
                            }
                            else if (stringMRStatus == "PENDING RELEASE TO HIMS")
                            {
                                pnlPendingReleasetoHIMS.Visible = true;
                            }
                            else if (stringMRStatus == "PENDING SUP VETTING")
                            {
                                pnlSupervisorVetting.Visible = true;
                            }
                            else if (stringMRStatus == "PENDING FORWARDING")
                            {
                                pnlforwarding.Visible = true;
                            }
                            else if (stringMRStatus == "PENDING COLLECT IN PERSON")
                            {
                                pnlPendingCollectInPerson.Visible = true;

                            }
                            //else if (stringMRStatus == "FORWARDED" || stringMRStatus == "COLLECTED")
                            //{
                            //    pnlForwarded.Visible = false;
                            //}
                        }
                    } 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null;
                objDataTable = null;
                stringExpression = null;
                stringBoID = null;
                stringMRStatus = null;
            }
        } 
        private void ProcessHeaderDynamicName(DataTable objDataTable) 
        {
            string stringTRANS_STATUS = "";
            int intNoOfDays = 0;
            int intForwarded = 0;
            try
            {
                for (int intIndex3 = 0; intIndex3 < objDataTable.Rows.Count; intIndex3++)
                {
                    stringTRANS_STATUS = objDataTable.Rows[intIndex3]["TRANS_STATUS"].ToString();
                    if (stringTRANS_STATUS.ToUpper() == "PENDING TRACING")
                    {
                        btnPendingTracing.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                    else if (stringTRANS_STATUS.ToUpper() == "PENDING DESPATCH")
                    {
                        btnPendingDespatch.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                    else if (stringTRANS_STATUS.ToUpper() == "PENDING ASSIGNED")
                    {
                        btnPendingAssigned.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                    else if (stringTRANS_STATUS.ToUpper() == "PENDING REPORT")
                    {
                        btnPendingReport.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                    else if (stringTRANS_STATUS.ToUpper() == "PENDING RELEASE TO HIMS")
                    {
                        btnPendingReleasetoHIMS.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                    else if (stringTRANS_STATUS.ToUpper() == "PENDING SUP VETTING")
                    {
                        btnPendingSupVetting.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                    else if (stringTRANS_STATUS.ToUpper() == "PENDING FORWARDING")
                    {
                        btnPendingforwarding.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                    else if (stringTRANS_STATUS.ToUpper() == "PENDING COLLECT IN PERSON")
                    {
                        btnPendingCollectInPerson.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                    else if (stringTRANS_STATUS.ToUpper() == "PENDING FORWARDED")
                    {
                        btnForwarded.Text = objDataTable.Rows[intIndex3]["seq_id"].ToString();
                    }
                }
                if (txtDelToID.Text.Trim().Length == 0 && btnPendingforwarding.Text.Length > 0 )
                { 
                    intNoOfDays = Convert.ToInt32(btnPendingforwarding.Text);
                    intForwarded = intNoOfDays + 1;
                    btnForwarded.Text = intForwarded.ToString();
                }
                else if (txtDelToID.Text.Trim().Length > 0 && btnPendingforwarding.Text.Length > 0 && txtDelToID.Text.Trim().ToUpper() != "INPERSON")
                {
                    intNoOfDays = Convert.ToInt32(btnPendingforwarding.Text);
                    intForwarded = intNoOfDays + 1;
                    btnForwarded.Text = intForwarded.ToString();
                }
                else if (txtDelToID.Text.Trim().Length > 0 && btnPendingforwarding.Text.Length > 0 && txtDelToID.Text.Trim().ToUpper() == "INPERSON")
                { 
                    intNoOfDays = Convert.ToInt32(btnPendingCollectInPerson.Text);
                    intForwarded = intNoOfDays + 1;
                    btnForwarded.Text = intForwarded.ToString();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringTRANS_STATUS = null;
                intNoOfDays = 0;
                intForwarded = 0;
            }
        }
        #endregion
        #endregion

        protected void imgbtnSaveAsDraft_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                SaveData("DRAFT");
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        protected void imgbtnCONFIRM_MENU_Click(object sender, ImageClickEventArgs e)
        {
            int intTotalRecord = 0;
            int interrorcount = 0;
            string stringRequestMODE = "";
            string stringBatchseqID = "";
            string stringrequestID = ""; 
            string stringServiceType001 = "DEFAULT";
            string stringexp = "";
            string stringServiceType02 = "";
            string stringformid = "FC0001R1V1";
            string stringTemp = "";
            string stringTYPE = "CONFIRM";
            bool boolcheckvalidation = true;
            pnlBatchRequest.Visible = false;
            mpePdtBatchrequest.Hide();
            string[] stringOutputResult = null;
            DataRow objdatarow = null;
            DataRow objDataRow = null;
            DataSet objDatasetResult = null;
            DataTable objDataTableReqDetail01 = null;
            DataTable objDataTableReqDetail = null;
            decimal decimalMRAmount = 0;
            decimal decimalOtherAmount = 0;
            try
            {
                if (ddlApplicationStatus.SelectedValue != null && ddlApplicationStatus.SelectedItem.Value != "")
                {
                    stringRequestMODE = ddlApplicationStatus.SelectedValue.ToString();
                } 
                if (stringRequestMODE.Length > 0 && (stringRequestMODE == "BATCHREQUESTBYPATIENT" || stringRequestMODE == "BATCHREQUESTBYREQUESTDETAIL"))
                {
                    if (!ValidatePatientDetails("") || !ValidateRequestorDetails("") || !ValidateRequestDetails("") || !ValidateBusinessLogic())
                    {
                        boolcheckvalidation = false;
                    }
                    if (boolcheckvalidation)
                    {
                        if (GetData1("I", out string stringID, stringTYPE, stringRequestMODE, out stringBatchseqID))
                        {
                            if (stringBatchseqID.Length > 0)
                            {
                                objDataTableReqDetail = GetRequestDetails("", stringBatchseqID);
                                if (objDataTableReqDetail != null && objDataTableReqDetail.Rows.Count > 0)
                                {
                                    for (int intIndex3 = 0; intIndex3 < objDataTableReqDetail.Rows.Count; intIndex3++)
                                    {
                                        stringrequestID = objDataTableReqDetail.Rows[intIndex3]["REQUEST_ID"].ToString();
                                        if (stringrequestID.Length > 0)
                                        {
                                            SavewaiverDetails("I", stringrequestID, stringTYPE); 
                                            objDatasetResult = null; 
                                            objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType001, stringformid, stringexp, "", 0, int.MaxValue, out intTotalRecord, out interrorcount, out stringOutputResult);
                                            if (interrorcount == 0)
                                            {
                                                if (objDatasetResult != null && objDatasetResult.Tables["t10"].Rows.Count == 0)
                                                {
                                                    objdatarow = objDatasetResult.Tables["t10"].NewRow();
                                                    objdatarow["be_id"] = CommonFunctions.GETBussinessEntity().ToString();
                                                    objdatarow["Request_ID"] = stringrequestID.ToUpper();

                                                    objDatasetResult.Tables["t10"].Rows.Add(objdatarow);
                                                    objDatasetResult.Tables["t10"].Rows[0].RowState.ToString();

                                                    if (objDatasetResult != null && objDatasetResult.Tables["t10"].Rows.Count > 0)
                                                    {
                                                        objDatasetResult = objDatasetResult.GetChanges();
                                                        stringServiceType02 = "OperationServiceDML"; 
                                                        objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType02, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);
                                                        if (intErrorCount == 0)
                                                        {
                                                            if (ddlBlockBill.SelectedItem.Value == "NO")
                                                            {
                                                                objDataTableReqDetail01 = GetRequestDetails(stringrequestID, "");
                                                                if (objDataTableReqDetail01 != null && objDataTableReqDetail01.Rows.Count > 0)
                                                                {
                                                                    objDataRow = objDataTableReqDetail01.Rows[0]; 
                                                                    stringTemp = objDataRow["mr_amount"].ToString();
                                                                    if (stringTemp != null && stringTemp.Trim().Length > 0)
                                                                    { decimal.TryParse(stringTemp, out decimalMRAmount); }

                                                                    stringTemp = objDataRow["other_amount"].ToString();
                                                                    if (stringTemp != null && stringTemp.Trim().Length > 0)
                                                                    { decimal.TryParse(stringTemp, out decimalOtherAmount); }
                                                                }
                                                                if ((decimalMRAmount + decimalOtherAmount) > 0)
                                                                {
                                                                    SavePendingItems(stringrequestID);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            Errorpopup(stringOutputResult);
                                                        }
                                                    }
                                                } 
                                            }
                                            else
                                            {
                                                Errorpopup(stringOutputResult);
                                            }
                                        }
                                    } 
                                    gvlistBATCHPROLILE.DataSource = objDataTableReqDetail;
                                    gvlistBATCHPROLILE.DataBind();
                                    pnlBatchRequest.Visible = true;
                                    mpePdtBatchrequest.Show();
                                }
                                else
                                {
                                    gvlistBATCHPROLILE.DataSource = null;
                                    gvlistBATCHPROLILE.DataBind();
                                    pnlBatchRequest.Visible = false;
                                    mpePdtBatchrequest.Hide();
                                } 
                            } 
                        }
                    }
                }
                else
                {
                    SaveData(stringTYPE);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringRequestMODE = null;
                stringBatchseqID = null;
                stringrequestID = null; 
                stringServiceType001 = null;
                stringexp = null;
                stringServiceType02 = null; 
                stringTemp = null;
                objDataTableReqDetail = null;
                objdatarow = null;
                objDatasetResult = null;
                stringOutputResult = null;
                objDataTableReqDetail01 = null;
                objDataRow = null;
            }
        }
        protected void btnokBATCHPROLILE_Click(object sender, EventArgs e)
        {
            try
            {
                Response.Redirect("FE0001R1V1.aspx?TO=Y");
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void lnkbtnloadBATCHPROLILE_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringreqId = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringreqId = stringValues[0];

                            Session["REQUEST_FromSummary"] = stringreqId;
                            Response.Redirect("FC0001R1V1.aspx?TO=Y");
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringreqId = null;
                stringValues = null;
            }
        }
        private void TABActive(int intIndex)//fix
        {
            try
            {
                switch (intIndex)
                {

                    case 1:  // Patients
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel('li_Patient');", true);
                            btnpatientprofile_Click(null, null);
                            txtHRN.Attributes.Add("onfocus", "this.select()");
                            break;
                        }
                    case 2: // Requestor
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel1('li_Requestor');", true);
                            btnrequestordetails_Click(null, null);
                            txtReqID.Attributes.Add("onfocus", "this.select()");
                            break;
                        }
                    case 3: // Request
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel2('li_Request');", true);
                            btnrequestdetails_Click(null, null);
                            txtCreateDate.Attributes.Add("onfocus", "this.select()");
                            break;
                        }
                    case 4: // Attachment
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel3('li_Attachment');", true);
                            btnattachment_Click(null, null);
                            txtRemark.Attributes.Add("onfocus", "this.select()");

                            break;
                        }
                    case 5: // WAVER Waiver Info
                        { 
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel4('li_Waiver Info');", true);
                            btnwaiver_Click(null, null);
                            ddlWApp.Attributes.Add("onfocus", "this.select()");
                            break;
                        }

                    case 6: // AssignDocter
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel5('li_AssignDocter');", true);
                            btnAssignDocter_Click(null, null);
                            txtDepartmentOUID.Attributes.Add("onfocus", "this.select()");

                            break;
                        }
                    case 7: // Enquiry
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel6('li_Enquiry');", true);
                            btnenquiry_Click(null, null);

                            break;
                        }
                    case 8: // Pendingitems
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel7('li_Pendingitems');", true);
                            btnpendingitems_Click(null, null);

                            break;
                        }
                    case 9: // ProcessHistory
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), Guid.NewGuid().ToString(), "showpanel8('li_ProcessHistory');", true);
                            btnProcessHistory_Click(null, null);

                            break;
                        }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }


        protected void btnOKRedirectPaymentscreen_Click(object sender, EventArgs e)
        {
            string stringNewReqID = "";
            try
            {
                stringNewReqID = txtReqNo.Text.Trim();
                Session["REQUESTID_PAYMENT"] = stringNewReqID;
                Response.Redirect("FC0003R1V1.aspx");
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringNewReqID = null;
            }
        } 
        protected void btnRedirectPaymentscreen_Click(object sender, EventArgs e)
        {
            string stringNewReqID = "";
            try
            {
                stringNewReqID = txtReqNo.Text.Trim();
                modelpopupRedirectPaymentscreen.Hide();
                UpdatePanel2.Visible = false;
                Session["REQUEST_FromSummary"] = stringNewReqID;
                Response.Redirect("FC0001R1V1.aspx");
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringNewReqID = null;
            }
        }

        #region PATIENT PROFILE
        private void LoadPatientInformations(DataRow objDataRow)
        {
            string stringReference = "";
            string stringHRNID = "";
            try
            {
                stringHRNID = objDataRow["hrn_id"].ToString();
                txtpatientID.Text = objDataRow["patient_id"].ToString();
                txtpatientIDEncripted.Text = objDataRow["hrn_encryption"].ToString();

                txtHRN.Text = txtHRNHEADER.Text = stringHRNID.Trim().ToUpper();
                if (stringHRNID.Trim().Length > 0) { btnHRNsearch_Click(null, null); }

                if (objDataRow["EMR"].ToString().ToUpper() == "Y")
                {
                    rbtEMR.Checked = true;
                    updpnlEMR.Update();
                    pnlPendingTracing.Visible = false;
                    lnkbtnRecallRequest2.Visible = false;
                    ddlReference.Enabled = true;
                    ddlReference.CssClass = "form-control ReadOnly";

                }
                else if (objDataRow["EMR"].ToString().ToUpper() == "N")
                {
                    rbt1EMR.Checked = true;
                    rbtEMR.Checked = false;
                    updpnlEMR.Update();
                    pnlPendingTracing.Visible = true;
                    lnkbtnRecallRequest2.Visible = true;
                    ddlReference.Enabled = false;
                    ddlReference.CssClass = "form-control ReadOnly";
                }
                else
                {
                    rbtnboth.Checked = true;
                    updpnlEMR.Update();
                    pnlPendingTracing.Visible = true;
                    lnkbtnRecallRequest2.Visible = true;
                    ddlReference.Enabled = true;
                    ddlReference.CssClass = "form-control ReadOnly";
                }
                stringReference = objDataRow["SOURCE_REF"].ToString();
                if (ddlReference.Items.FindByValue(stringReference) != null)
                { ddlReference.ClearSelection(); ddlReference.Items.FindByValue(stringReference).Selected = true; }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringReference = null;
                stringHRNID = null;
            }
        }
        private DataSet LoadPatientProfileDetail(string stringexp012)
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string[] stringOutputResult = null;
            string stringformid = "FA0017R1V1";
            string stringOrderBy = "";
            string stringBoID = ""; 
            string stringServiceType = "List1R1V1"; 
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (stringexp012.Length > 0)
                {
                    stringexp012 += "And mrpats.be_id= '" + stringBoID.ToString() + "'";

                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            return objDatasetResult;
                        } 
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        return null;
                    }
                }
                return null;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return null;
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringBoID = null; 
                stringServiceType = null;
                stringexp012 = null;
            }
        } 
        private void PatientFieldenabledisable()
        {
            try
            {
                txtHRN.ReadOnly = true;
                txtHRN.CssClass = "form-control ReadOnly";
                txtName.ReadOnly = true;
                txtName.CssClass = "form-control ReadOnly";
                txtDOB.ReadOnly = true;
                txtDOB.CssClass = "form-control ReadOnly";
                txtAddress.ReadOnly = true;
                txtAddress.CssClass = "form-control ReadOnly";
                txtEmail.ReadOnly = true;
                txtEmail.CssClass = "form-control ReadOnly";
                txtPostCode.ReadOnly = true;
                txtPostCode.CssClass = "form-control ReadOnly";
                txtGender.ReadOnly = true;
                txtGender.CssClass = "form-control ReadOnly";

                chkDeath.Enabled = false;
                chkDeath.CssClass = "form-control ReadOnly";
                rbtEMR.Enabled = false;
                rbtEMR.CssClass = "form-control ReadOnly";
                rbt1EMR.Enabled = false;
                rbt1EMR.CssClass = "form-control ReadOnly";
                rbtnboth.Enabled = false;
                rbtnboth.CssClass = "form-control ReadOnly";
                ddlReference.Enabled = false;
                ddlReference.CssClass = "form-control ReadOnly";
                txtPhone.ReadOnly = false;
                txtPhone.CssClass = "form-control ReadOnly";
                txtDDate.ReadOnly = false;
                txtDDate.CssClass = "form-control ReadOnly";
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }
        protected void btnHRNsearch_Click(object sender, EventArgs e)
        {
            lnkbtnaddattachments.Enabled = false;
            FileUpload1.Enabled = false;
            DataSet objDatasetPatDetails = null;
            DataRow objDataRowPatient = null;
            string stringBlock = "";
            string stringLevel = "";
            string stringUnit = "";
            string stringStreet1 = "";
            string stringStreet2 = "";
            string stringAddress = "";
            string stringDeathStatus = "";
            string stringpost_code = "";
            string stringHRNID = string.Empty;
            string stringexp012 = string.Empty;
            string stringInput = string.Empty;
            string stringEncrypyValue = string.Empty;
            try
            {
                object[] objControls = new object[]
                       {
                txtHRN,
                       };
                if (txtHRN.Text.Trim().Length > 0 && DoNonCGHHrnValidation(objControls))
                {
                    if (e != null)
                    {
                        ShowSpecialInfo();
                    } 
                    ClearValues(0); 
                    stringInput = txtHRN.Text.Trim();
                    if (stringInput.Length > 0)
                    {
                        stringEncrypyValue = CommonFunctions.HRNtoEncrypyValue(stringInput);

                        if (stringEncrypyValue.Length > 0 && txtReqNo.Text.ToString().Length > 0)
                        {
                            stringexp012 = " And mrpats.hrn_id= '" + stringEncrypyValue.Trim().ToUpper() + "'";
                        }
                        else
                        {
                            stringexp012 = " And mrpats.hrn_id= '" + stringEncrypyValue.Trim().ToUpper() + "'  And mrpats.delmark= 'N'";
                        }
                        objDatasetPatDetails = LoadPatientProfileDetail(stringexp012);
                    }
                    
                    if (objDatasetPatDetails != null && objDatasetPatDetails.Tables.Count > 0 && objDatasetPatDetails.Tables[0].Rows.Count > 0)
                    {
                        Session["PARTICULARPATIENTPROFILE"] = objDatasetPatDetails;
                        objDataRowPatient = objDatasetPatDetails.Tables[0].Rows[0];
                        if (objDataRowPatient != null)
                        {
                            txtpatientID.Text = objDataRowPatient["patient_id"].ToString();
                            txtName.Text = txtPatientNameHEADER.Text = objDataRowPatient["short_name"].ToString();
                            txtpatnamemrn.Text = objDataRowPatient["short_name"].ToString() + " [" + objDataRowPatient["patient_id"].ToString() + "] " ;
                            FileUpload1.Enabled = true;
                            lnkbtnaddattachments.Enabled = true;
                            txtPatientNameHEADER.Text = objDataRowPatient["short_name"].ToString();
                            if (objDataRowPatient["dob"] != null && objDataRowPatient["dob"].ToString().Trim().Length > 0)
                            { txtDOB.Text = Convert.ToDateTime(objDataRowPatient["dob"]).ToString("dd-MM-yyyy"); }

                            stringBlock = objDataRowPatient["blk"].ToString();
                            stringLevel = objDataRowPatient["level_no"].ToString();
                            stringUnit = objDataRowPatient["unit_no"].ToString();
                            stringStreet1 = objDataRowPatient["street_name1"].ToString();
                            stringStreet2 = objDataRowPatient["street_name2"].ToString();
                            stringAddress = "";
                            stringDeathStatus = objDataRowPatient["death_status"].ToString();
                            stringpost_code = objDataRowPatient["post_code"].ToString(); 
                            if (stringStreet1 != null && stringStreet1.Trim().Length > 0) { stringAddress += stringStreet1 + " \n"; }
                            if (stringStreet2 != null && stringStreet2.Trim().Length > 0) { stringAddress += stringStreet2 + " \n"; }
                            if (stringBlock != null && stringBlock.Trim().Length > 0) { stringAddress += "Blk " + stringBlock + " "; }
                            if (stringLevel != null && stringLevel.Trim().Length > 0) { stringAddress += "#" + stringLevel + " "; }
                            if (stringUnit != null && stringUnit.Trim().Length > 0) { stringAddress += " - " + stringUnit + " \n"; }
                            if (stringpost_code != null && stringpost_code.Trim().Length > 0) { stringAddress += stringpost_code + " \n"; } 

                            if (stringAddress.Trim().Length == 0 || stringAddress.Trim().ToUpper() == "NA")
                            { txtAddress.Text = objDataRowPatient["address"].ToString(); }
                            else
                            { txtAddress.Text = stringAddress; }

                            txtEmail.Text = objDataRowPatient["email"].ToString();
                            txtPhone.Text = objDataRowPatient["ph_no1"].ToString();
                            txtPostCode.Text = objDataRowPatient["post_code"].ToString();
                            txtGender.Text = objDataRowPatient["gender"].ToString();
                            if (stringDeathStatus.ToUpper() == "Y")
                            {
                                chkDeath.Checked = true; lblDDate.Visible = true;
                                if (objDataRowPatient["DEATH_DATE"] != null && objDataRowPatient["DEATH_DATE"].ToString().Trim().Length > 0)
                                { txtDDate.Text = Convert.ToDateTime(objDataRowPatient["DEATH_DATE"]).ToString("dd-MM-yyyy"); }
                                txtDDate.Visible = true;
                            }
                            else
                            {
                                chkDeath.Checked = false; lblDDate.Visible = true;
                                txtDDate.Text = ""; txtDDate.Visible = true;
                            }
                            txtHRN.Focus();
                            SelectText(txtHRN);
                            if (ddlReference.SelectedItem != null && ddlReference.SelectedItem.Value.Length == 0)
                            {
                                ddlReference.SelectedIndex = 1;
                            }
                        }
                    }
                    else
                    {
                        Session["PARTICULARPATIENTPROFILE"] = null;
                        CommonFunctions.ShowMessageboot(this, "Patient Not Found");
                        txtHRN.Focus();
                        SelectText(txtHRN);
                    }

                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetPatDetails = null;
                objDataRowPatient = null;
                stringBlock = null;
                stringLevel = null;
                stringUnit = null;
                stringStreet1 = null;
                stringStreet2 = null;
                stringAddress = null;
                stringDeathStatus = null;
                stringpost_code = null;
            }
        }
        #region BATCHREQBYPATIENT
        //patientgrid for BatchRequestbyP{atient ADD/DELETE/CLEAR------------------
        protected void btnDeleteAddpatintinGRID_Click(object sender, EventArgs e)
        {
            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            string stringCmdArgument = "";
            string stringcustringcusID1 = "";
            string stringcustringcus2 = "";
            string stringpatient_id = "";
            string[] stringValues = null;
            try
            {
                //link button id
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length >= 3)
                        {
                            stringcustringcusID1 = stringValues[0];
                            stringcustringcus2 = stringValues[1];
                            stringpatient_id = stringValues[2]; 
                            if (Session["ADD_BATCHPROFILE"] != null)
                            {
                                objOrderTable = (DataTable)Session["ADD_BATCHPROFILE"];
                            } 
                            if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                            {
                                objDataRow = objOrderTable.Select("patient_id='" + stringpatient_id + "' ");
                                if (objDataRow != null && objDataRow.Length > 0)
                                {
                                    objDataRow[0].Delete();
                                } 
                                objOrderTable.AcceptChanges();
                                Session["ADD_BATCHPROFILE"] = objOrderTable;
                                BindPatientData(objOrderTable);

                            } 
                        }
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                stringCmdArgument = null;
                stringcustringcusID1 = null;
                stringcustringcus2 = null;
                stringpatient_id = null;
                stringValues = null;
            }
        }
        private void BindPatientData(DataTable objDataTableCopy)
        {
            string stringTotalrecPatient = "0";
            try
            {

                gvlistBatchpatientprofile.DataSource = objDataTableCopy;
                gvlistBatchpatientprofile.DataBind();
                if (objDataTableCopy != null && objDataTableCopy.Rows.Count > 0)
                {
                    stringTotalrecPatient = objDataTableCopy.Rows.Count.ToString();
                }
                TotalrecPatient.InnerText = stringTotalrecPatient; 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringTotalrecPatient = null;
            }
        }
        //for EDIT patient detail inside grid
        protected void btnEditAddpatintinGRID_Click(object sender, EventArgs e)
        {
            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            DataRow objDataRowparticularinf = null;
            string stringCmdArgument = "";
            string stringHRN = "";
            string stringcustringcusID1 = "";
            string stringpatID = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length >= 3)
                        {
                            stringHRN = stringValues[0];
                            stringcustringcusID1 = stringValues[1];
                            stringpatID = stringValues[2];
                            if (Session["ADD_BATCHPROFILE"] != null)
                            {
                                objOrderTable = (DataTable)Session["ADD_BATCHPROFILE"];
                            } 
                            if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                            {
                                objDataRow = objOrderTable.Select("patient_id='" + stringpatID + "' ");
                                if (objDataRow != null && objDataRow.Length > 0)
                                {
                                    objDataRowparticularinf = objDataRow[0];
                                    LoadPatientInformations(objDataRowparticularinf);
                                } 
                            } 
                        }
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                objDataRowparticularinf = null;
                stringCmdArgument = null;
                stringHRN = null;
                stringcustringcusID1 = null;
                stringpatID = null;
                stringValues = null;
            }
        }
        protected void LinkbtnaddBatchProfile_Click(object sender, EventArgs e)
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            bool boolCHECKRecordExist = true;
            DataTable objDataTableAddAttachments = new DataTable();
            DataSet objDatasetResult = null;
            DataSet objDatasetAddprofile = null;
            DataRow objDataRow = null;
            DataRow[] objdatarow = null;
            string[] stringOutputResult = null;
            string stringpatient_id = "";
            string stringformid = "FA0017R1V1";
            string stringOrderBy = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            string stringHRNid = "";
            try
            {
                if (ValidatePatientDetailsBATCHADD("BATCH"))
                {
                    if (Session["ADD_BATCHPROFILE"] != null)
                    { objDataTableAddAttachments = (DataTable)Session["ADD_BATCHPROFILE"]; }
                    else
                    {
                        if (Session["PARTICULARPATIENTPROFILE"] != null)
                        {
                            objDatasetAddprofile = (DataSet)Session["PARTICULARPATIENTPROFILE"];
                            objDataTableAddAttachments = objDatasetAddprofile.Tables[0];
                            if (objDataTableAddAttachments != null)
                            {
                                objDataTableAddAttachments = objDataTableAddAttachments.Clone();
                            }
                        }
                        else
                        { 
                            objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                            if (interrorcount == 0)
                            {
                                if (objDatasetResult != null && objDatasetResult.Tables["t1"].Rows.Count == 0)
                                {
                                    objDataTableAddAttachments = objDatasetResult.Tables["t1"];
                                } 
                            }
                        }
                    } 
                    if (objDataTableAddAttachments != null)
                    {
                        stringpatient_id = txtpatientID.Text.Trim();
                        stringHRNid = txtHRN.Text.Trim();
                        if (objDataTableAddAttachments != null && objDataTableAddAttachments.Rows.Count > 0)
                        {
                            objdatarow = objDataTableAddAttachments.Select("patient_id = '" + stringpatient_id.ToString() + "'");
                            if (objdatarow != null && objdatarow.Length > 0)
                            {
                                boolCHECKRecordExist = false;
                            }
                        }
                        if (boolCHECKRecordExist)
                        { 
                            if (objDataTableAddAttachments != null)
                            {
                                objDataRow = objDataTableAddAttachments.NewRow(); 
                                objDataRow["patient_id"] = stringpatient_id;
                                objDataRow["hrn_id"] = stringHRNid; 
                                if (rbtEMR.Checked == true)
                                {
                                    objDataRow["EMR"] = "Y";
                                }
                                else if (rbt1EMR.Checked == true)
                                {
                                    objDataRow["EMR"] = "N";
                                }
                                else if (rbtnboth.Checked == true)
                                {
                                    objDataRow["EMR"] = "BOTH";

                                }
                                objDataRow["SHORT_NAME"] = txtName.Text.Trim();
                                if (txtDOB.Text.Trim().Length > 0)
                                { objDataRow["DOB"] = CommonFunctions.ConvertToDateTime(txtDOB.Text.Trim(), "dd-MM-yyyy"); }
                                objDataRow["Address"] = txtAddress.Text.Trim();
                                objDataRow["Gender"] = txtGender.Text.Trim();
                                objDataRow["post_code"] = txtPostCode.Text.Trim();
                                objDataRow["ph_no1"] = txtPhone.Text.Trim().ToString();
                                objDataRow["Email"] = txtEmail.Text.Trim();
                                if (ddlReference.SelectedItem != null)
                                {
                                    objDataRow["SOURCE_REF"] = ddlReference.SelectedItem.Value.ToUpper();
                                }
                                objDataTableAddAttachments.Rows.Add(objDataRow);
                                Session["ADD_BATCHPROFILE"] = objDataTableAddAttachments;
                                ClearValues(0);
                                txtHRN.Text = "";
                                txtpatientID.Text = "";
                            } 
                        }
                        else
                        {
                            ClearValues(0);
                            CommonFunctions.ShowMessageboot(this, "Record already exist");
                        }
                    }

                    BindPatientData(objDataTableAddAttachments);
                    txtHRN.Focus();
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringpatient_id = null;
                objdatarow = null;
                objDatasetResult = null;
                objDatasetAddprofile = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                stringServiceType = null;
                stringexp = null;
                stringHRNid = null;
                objDataRow = null;
            }
        }
        #endregion

        #endregion
        #region REQUESTORS
        protected void lnkbtnNewReq_Click(object sender, EventArgs e)
        {
            try
            {
                Response.Redirect("FA0027R1V1.aspx", true);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void lnkbtnselfReq_Click(object sender, EventArgs e)
        {
            string stringApplicationStatus = "";
            string stringbeid = "";
            try
            {
                stringbeid = CommonFunctions.GETBussinessEntity();
                if (ddlApplicationStatus.SelectedValue != null && ddlApplicationStatus.SelectedItem.Value != "")
                {
                    stringApplicationStatus = ddlApplicationStatus.SelectedValue.ToString();
                }
                if ((txtReqNo.Text.Trim().Length == 0) || (txtReqNo.Text.Trim().Length > 0 && txtReqNo.Text.Contains("DRAFT")) || ((stringApplicationStatus.Length > 0 && stringApplicationStatus == "COPYREQUEST")))
                {
                    txtReqID.Text = "SELF";
                    txtReqname.Text = "PATIENT SELF-REQUEST"; 
                    if (ddlBlockBill.SelectedValue == "YES")
                    {
                        txtRegReferenceNo.CssClass = "form-control ReadOnly";
                    }
                    else
                    {
                        ddlReference.Enabled = false;
                        ddlReference.CssClass = "form-control ReadOnly";
                        txtRegReferenceNo.BackColor = Color.FromArgb(221, 245, 255);
                        txtRequestorTypename.CssClass = "form-control ReadOnly";
                    }
                    updpnltxtReqID.Update();
                    ddlReq_SelectedIndexChanged(txtReqID, null);
                    ControlsDropdownValues("REQUESTORTYPE", false); 
                }
                //if(stringbeid.ToUpper() =="CGH")
                //{
                //    txtRequestorTypeID.Text = "01";
                //}
                //else
                //{
                //    txtRequestorTypeID.Text = "REQ001";
                //}
                //txtRequestorTypename.Text = "SELF";
                //updpnltxtRequestorTypeID.Update();
                txtRequestorTypename.CssClass = "form-control ReadOnly";
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringbeid = null;
            }
        }
        protected void lnkbtnEditReq_Click(object sender, EventArgs e)
        {
            try
            {
                ControlsDropdownValues("REQUESTOR", true);
                ControlsDropdownValues("REQUESTORTYPE", true);
                txtRequestorTypename.CssClass = "form-control ReadOnly";
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void lnkbtnOthers_Click(object sender, EventArgs e)
        {
            try
            {
                if ((txtReqNo.Text.Trim().Length == 0) || (txtReqNo.Text.Trim().Length > 0 && txtReqNo.Text.Contains("DRAFT")))
                {
                    txtReqID.Text = "OTHERS";
                    txtReqname.Text = "OTHERS";
                    updpnltxtReqID.Update();

                    ddlReq_SelectedIndexChanged(txtReqID, null);
                    txtReqAdd.ReadOnly = false;
                    txtReqEmail.ReadOnly = false;
                    txtReqPhNo.ReadOnly = false;
                    ControlsDropdownValues("REQUESTORTYPE", true);
                    txtRequestorTypename.CssClass = "form-control ReadOnly";
                    txtRequestorTypename.Enabled = true; 
                }
                else
                {
                    ControlsDropdownValues("REQUESTORTYPE", true);
                    txtRequestorTypename.CssClass = "form-control ReadOnly";
                    txtRequestorTypename.Enabled = true;
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }
        protected void lnkbtnReqlist_Click(object sender, EventArgs e)
        {
            try
            { 
                txtRequestorTypename.CssClass = "form-control ReadOnly";
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void chkinternalstaff_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (chkinternalstaff.Checked == true)
                {
                    chkinternalstaff1.Text = " " + " * Please choose Cost Centre";
                    chkinternalstaff1.ForeColor = System.Drawing.Color.Red;
                    ControlsDropdownValues("COSTCENTER", true);
                    txtReqMobileNo.BackColor = Color.FromArgb(221, 245, 255);
                    txtcostcentername.CssClass = "form-control Manditory";
                }
                else
                {
                    txtcostcentername.Text = "";
                    txtcostcenterID.Text = "";
                    chkinternalstaff1.Text = "";
                    ControlsDropdownValues("COSTCENTER", false);
                    txtcostcentername.CssClass = "form-control ReadOnly";
                    txtReqMobileNo.CssClass = "form-control ReadOnly"; 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void ddlReq_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] stringValues = null;
            DataRow[] objDataRowPatient = null;
            DataSet objDatasetPatDetails = null;
            DataTable objDataTableReqInfo = null;
            DataRow objDataRowReqInfo = null;
            string stringReqID = "";
            string stringApplicationStatus = "";
            string stringexp012 = "";
            string stringAddress = "";
            string stringBlock = "";
            string stringLevel = "";
            string stringUnit = "";
            string stringStreet1 = "";
            string stringStreet2 = "";
            string stringDeathStatus = "";
            string stringCountry = "";
            string stringPostalCode = "";  
            string stringapptype = "";
            string stringReqType = "";
            string stringIntHospName = "";
            string stringTemp = "";
            string stringexgetdata = "";
            try
            {
                if (txtReqID.Text.Trim().Length > 0)
                {
                    ControlsDropdownValues("RELATIONSHIPWITHPATIENT", false);
                    stringReqID = txtReqID.Text.Trim().ToString();
                    if (ddlApplicationStatus.SelectedValue != null && ddlApplicationStatus.SelectedItem.Value != "")
                    {
                        stringApplicationStatus = ddlApplicationStatus.SelectedValue.ToString();
                    }

                    if (stringApplicationStatus.Length > 0 && stringApplicationStatus != "BATCHREQUESTBYPATIENT" && txtHRN.Text.Trim().Length == 0)
                    {
                        CommonFunctions.ShowMessageboot(this, "Please select a patient first, before proceed to requestor selection!");
                        txtReqID.Text = "";
                        txtReqname.Text = "";
                        updpnltxtReqID.Update();
                        TABActive(1);
                        return;
                    }
                    else
                    {
                        ClearValues(1);
                        if (stringReqID == "OTHERS")
                        {
                            txtReqAdd.ReadOnly = false;
                        }
                        else
                        {
                            txtReqAdd.ReadOnly = true;
                        }
                        if (lnkbtnEditReq.Visible && lnkbtnEditReq.Enabled && txtRptTypeID.Text.Trim().Length > 0)
                        {
                            ViewState["Reporttype"] = txtRptTypeID.Text.Trim();
                        }
                        if (stringReqID.Trim().ToUpper() == "SELF")
                        {
                            stringexp012 = "patient_id= '" + txtpatientID.Text.Trim().ToUpper() + "'";

                            if (Session["PARTICULARPATIENTPROFILE"] != null)
                            {
                                objDatasetPatDetails = (DataSet)Session["PARTICULARPATIENTPROFILE"];
                            }
                            else
                            {
                                stringexgetdata = "And mrpats.patient_id= '" + txtpatientID.Text.Trim().ToUpper() + "'  And mrpats.delmark= 'N'"; 
                                objDatasetPatDetails = LoadPatientProfileDetail(stringexgetdata); 
                            }
                            if (objDatasetPatDetails != null && objDatasetPatDetails.Tables.Count > 0 && objDatasetPatDetails.Tables[0].Rows.Count > 0)
                            {
                                objDataRowPatient = objDatasetPatDetails.Tables[0].Select(stringexp012);
                                if (objDataRowPatient != null && objDataRowPatient.Length > 0)
                                { 
                                    stringBlock = objDataRowPatient[0]["blk"].ToString();
                                    stringLevel = objDataRowPatient[0]["level_no"].ToString();
                                    stringUnit = objDataRowPatient[0]["unit_no"].ToString();
                                    stringStreet1 = objDataRowPatient[0]["street_name1"].ToString();
                                    stringStreet2 = objDataRowPatient[0]["street_name2"].ToString();
                                    stringDeathStatus = objDataRowPatient[0]["death_status"].ToString();
                                    stringCountry = objDataRowPatient[0]["city"].ToString();
                                    stringPostalCode = objDataRowPatient[0]["post_code"].ToString();

                                    if (stringStreet1 != null && stringStreet1.Trim().Length > 0) { stringAddress += stringStreet1 + " \n"; }
                                    if (stringStreet2 != null && stringStreet2.Trim().Length > 0) { stringAddress += stringStreet2 + " \n"; }
                                    if (stringBlock != null && stringBlock.Trim().Length > 0) { stringAddress += "Blk " + stringBlock + " "; }
                                    if (stringLevel != null && stringLevel.Trim().Length > 0) { stringAddress += "#" + stringLevel + " "; }
                                    if (stringUnit != null && stringUnit.Trim().Length > 0) { stringAddress += " - " + stringUnit + " \n"; }
                                    if (stringPostalCode != null && stringPostalCode.Trim().Length > 0) { stringAddress += stringPostalCode + " \n"; }

                                    if (stringAddress.Trim().Length == 0 || stringAddress.Trim().ToUpper() == "NA")
                                    { stringAddress = objDataRowPatient[0]["address"].ToString(); }

                                    txtReqAdd.Text = stringAddress;
                                    txtMailAdd.Text = stringAddress;
                                    txtReqEmail.Text = objDataRowPatient[0]["email"].ToString();

                                    txtReqPhNo.Text = objDataRowPatient[0]["ph_no1"].ToString();
                                    ControlsDropdownValues("RELATIONSHIPWITHPATIENT", true);
                                    txtReqBy.Text = objDataRowPatient[0]["short_name"].ToString();

                                    objDataTableReqInfo = GetRequestorInfo(stringReqID);
                                    if (objDataTableReqInfo != null && objDataTableReqInfo.Rows.Count > 0)
                                    {
                                        objDataRowReqInfo = objDataTableReqInfo.Rows[0];
                                        if (objDataRowReqInfo != null)
                                        { 
                                            ddlBlockBill.ClearSelection();
                                            if (ddlBlockBill.Items.FindByValue(objDataRowReqInfo["block_billing"].ToString()) != null)
                                            { ddlBlockBill.Items.FindByValue(objDataRowReqInfo["block_billing"].ToString()).Selected = true; }
                                             
                                            txtRequestorTypeID.Text = objDataRowReqInfo["ReqTyp_ID"].ToString();
                                            txtRequestorTypename.Text = objDataRowReqInfo["MRREQTYP_SHORT_NAME"].ToString();

                                            string stringRequestType = objDataRowReqInfo["reference_2"].ToString();
                                            if (stringRequestType != null && stringRequestType.Trim().Length > 0)
                                            {
                                                txtReqTypeID.Text = stringRequestType;
                                                txtReqTypename.Text = objDataRowReqInfo["REQUESTOR_REFERENCE_NAME"].ToString();
                                                 
                                                if (ddlApplicationStatus.SelectedItem != null && ddlApplicationStatus.SelectedValue.Length > 0)
                                                {
                                                    stringapptype = ddlApplicationStatus.SelectedValue.ToString();
                                                }
                                                if (stringapptype != "COPYREQUEST")
                                                {
                                                    ddlReqType_SelectedIndexChanged(txtReqTypeID, null); 
                                                } 
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                CommonFunctions.ShowMessageboot(this, "Patient Not Found");
                                txtHRN.Focus();
                            }

                        }
                        else
                        {
                            ControlsDropdownValues("RELATIONSHIPWITHPATIENT", true);
                            objDataTableReqInfo = GetRequestorInfo(stringReqID);
                            if (objDataTableReqInfo != null && objDataTableReqInfo.Rows.Count > 0)
                            {
                                objDataRowReqInfo = objDataTableReqInfo.Rows[0]; 
                                txtReqAdd.Text = objDataRowReqInfo["address"].ToString();
                                txtMailAdd.Text = objDataRowReqInfo["address"].ToString();
                                txtReqBy.Text = objDataRowReqInfo["short_name"].ToString();

                                if (Session["MailAdd_ADDRESS"] != null) { Session.Remove("MailAdd_ADDRESS"); }
                                Session["MailAdd_ADDRESS"] = txtMailAdd.Text.Trim().ToUpper();
                                 
                                ddlBlockBill.ClearSelection();
                                if (ddlBlockBill.Items.FindByValue(objDataRowReqInfo["block_billing"].ToString()) != null)
                                { ddlBlockBill.Items.FindByValue(objDataRowReqInfo["block_billing"].ToString()).Selected = true; }
                                if (objDataRowReqInfo["block_billing"].ToString() == "YES")
                                {
                                    txtRegReferenceNo.CssClass = "form-control Manditory";
                                }
                                else
                                {
                                    txtRegReferenceNo.CssClass = "form-control optional";
                                }
                                txtReqPhNo.Text = objDataRowReqInfo["ph_no"].ToString(); 
                                 
                                txtRequestorTypeID.Text = objDataRowReqInfo["ReqTyp_ID"].ToString();
                                txtRequestorTypename.Text = objDataRowReqInfo["MRREQTYP_SHORT_NAME"].ToString();
                                txtReqEmail.Text = objDataRowReqInfo["email"].ToString();
                                stringReqType = objDataRowReqInfo["reference_2"].ToString();
                                if (stringReqType != null && stringReqType.Trim().Length > 0)
                                {
                                    txtReqTypeID.Text = stringReqType;
                                    txtReqTypename.Text = objDataRowReqInfo["REQUESTOR_REFERENCE_NAME"].ToString();
                                    updpnltxtReqTypeID.Update();
                                }
                            }
                        }
                    }
                    txtLoanFromInst.Text = "";
                    if (stringReqID.Trim().ToUpper().StartsWith("IHL"))
                    {
                        stringIntHospName = "";
                        if (txtReqID.Text.Trim().Length > 0)
                        {
                            stringTemp = txtReqID.Text.Trim();
                            stringValues = stringTemp.Split(new char[] { '-', '(' });
                            if (stringValues != null && stringValues.Length > 1)
                            {
                                stringIntHospName = stringValues[1];
                                txtLoanFromInst.Text = stringIntHospName.Trim();
                            }
                        }
                    } 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetPatDetails = null;
                stringReqID = null;
                stringApplicationStatus = null;
                stringexp012 = null;
                stringAddress = null;
                stringBlock = null;
                stringLevel = null;
                stringUnit = null;
                stringStreet1 = null;
                stringStreet2 = null;
                stringDeathStatus = null;
                stringCountry = null;
                stringPostalCode = null;
                objDataTableReqInfo = null;  
                stringapptype = null;
                stringReqType = null;
                stringIntHospName = null;
                stringTemp = null;
                stringValues = null;
                objDataRowPatient = null;
            }
        }

        private void LoadRequestorInformations(ref string stringreqvalue, DataRow objDataRow)
        {
            string stringRequestor = "";  
            string stringBlockBilling = "";  
            try
            {
                stringRequestor = objDataRow["rptreq_id"].ToString();
                ViewState["rptreq_id"] = objDataRow["rptreq_id"].ToString();
                txtReqID.Text = stringRequestor;
                txtReqname.Text = txtRequestorHEADER.Text = objDataRow["REQUESTOR_SHORT_NAME"].ToString();
                ViewState["REQUESTOR_SHORT_NAME"] = objDataRow["REQUESTED_BY"].ToString();
                updpnltxtReqID.Update();
                txtRegReferenceNo.Text = objDataRow["REGREF_NO"].ToString();//02
                if (stringRequestor.Trim().ToUpper() == "OTHERS")
                { txtReqOthers.Text = objDataRow["REQUEST_OTHERS"].ToString(); }//03
                else { txtReqOthers.Text = ""; }
                ViewState["REQUEST_OTHERS"] = objDataRow["REQUEST_OTHERS"].ToString();  
                txtRequestorTypeID.Text = objDataRow["reqtyp_id"].ToString();//04 
                txtRequestorTypename.Text = objDataRow["REQUESTOR_TYPE_SHORT_NAME"].ToString();
                updpnltxtRequestorTypeID.Update(); 
                txtReqBy.Text = objDataRow["REQUESTED_BY"].ToString();//05  
                txtReqRelationID.Text = objDataRow["req_relation"].ToString();//06
                txtReqRelationname.Text = objDataRow["REQUESTOR_RELATION"].ToString();
                updpnltxtReqRelationID.Update();
                txtReqAdd.Text = objDataRow["req_address"].ToString();//06
                if (Session["ReqAdd_ADDRESS"] != null) { Session.Remove("ReqAdd_ADDRESS"); }
                Session["ReqAdd_ADDRESS"] = txtReqAdd.Text.Trim().ToUpper(); 
                txtMailAdd.Text = objDataRow["REQ_MAIL_ADDRESS"].ToString();//07
                if (Session["MailAdd_ADDRESS"] != null) { Session.Remove("MailAdd_ADDRESS"); }
                Session["MailAdd_ADDRESS"] = txtMailAdd.Text.Trim().ToUpper(); 
                txtReqEmail.Text = objDataRow["Email"].ToString();//08
                txtReqPhNo.Text = objDataRow["REQ_BY_PHNO"].ToString();//09
                if (objDataRow["INRNL_STF_REQ"].ToString() == "Y")
                {
                    chkinternalstaff.Checked = true;
                    chkinternalstaff.Enabled = false;
                }
                else
                {
                    chkinternalstaff.Checked = false;
                    chkinternalstaff.Enabled = true;
                } 
                stringBlockBilling = objDataRow["block_billing"].ToString();
                if (ddlBlockBill.Items.FindByValue(stringBlockBilling) != null)
                {
                    ddlBlockBill.ClearSelection();
                    ddlBlockBill.Items.FindByValue(stringBlockBilling).Selected = true;
                }
                if (stringBlockBilling.ToString() == "YES")
                {
                    lblblockbilling.InnerText = "Block Billing";

                }
                else
                {
                    lblblockbilling.InnerText = "Non-Block Billing";
                } 
                txtcostcenterID.Text = objDataRow["COST_CENTER"].ToString();
                txtcostcentername.Text = objDataRow["COST_CENTER_NAME"].ToString();
                updpnltxtcostcenterID.Update();

                txtReqMobileNo.Text = objDataRow["mobileno"].ToString(); 
                if (ddlContactPreference.Items.FindByValue(objDataRow["Contact_Preference"].ToString()) != null)
                {
                    ddlContactPreference.ClearSelection();
                    ddlContactPreference.Items.FindByValue(objDataRow["Contact_Preference"].ToString()).Selected = true;
                }

                txtsmremailRequestor.Text = objDataRow["Requestors_email"].ToString();//smr email
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringRequestor = null; 
                stringBlockBilling = null;  
            }
        }
        private void RequestorFieldenabledisable(bool boolENABLE, bool boolReadonly)
        {
            try
            {
                ControlsDropdownValues("REQUESTOR", boolENABLE);
                ControlsDropdownValues("RELATIONSHIPWITHPATIENT", boolENABLE);
                chkinternalstaff.Enabled = boolENABLE;
                ddlBlockBill.Enabled = boolENABLE;
                ddlContactPreference.Enabled = boolENABLE;
                ControlsDropdownValues("COSTCENTER", boolENABLE); 
                txtReqOthers.ReadOnly = boolReadonly;
                txtRegReferenceNo.ReadOnly = boolReadonly;
                txtReqAdd.ReadOnly = boolReadonly;
                txtMailAdd.ReadOnly = boolReadonly;
                if (txtMailAdd.ReadOnly == true)
                {
                    txtMailAdd.CssClass = "form-control ReadOnly";
                }
                txtReqEmail.ReadOnly = boolReadonly;
                txtReqPhNo.ReadOnly = boolReadonly;
                txtReqBy.ReadOnly = boolReadonly;
                if (txtReqBy.ReadOnly == true)
                {
                    txtReqBy.CssClass = "form-control ReadOnly";
                }
                txtReqMobileNo.ReadOnly = boolReadonly; 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            } 
        }
        #endregion
        #region RequestDetails
        protected void ddlReqType_SelectedIndexChanged(object sender, EventArgs e)
        {
            string stringReqType = "";
            DataTable objdatatableLoadPaymentReceiptsGridFC0001 = null;
            try
            {
                if (txtReqTypeID.Text.Trim().Length > 0)
                {
                    stringReqType = txtReqTypeID.Text.Trim();
                    if (stringReqType != null && stringReqType.Trim().Length > 0)
                    {
                        txtRptTypeID.Text = "";
                        txtRptTypename.Text = "";
                        updpnltxtRptTypeID.Update();
                        if (stringReqType != null)
                        { 
                            txtAppDate.Enabled = true;
                            txtAppDate.CssClass = "form-control ReadOnly";
                            txtAssessmentDate.Enabled = true;
                            txtAssessmentDate.CssClass = "form-control ReadOnly";
                            ControlsDropdownValues("RECMODRECORDTYPE", true); 
                            txtReassDate.Enabled = true;
                            txtReassDate.CssClass = "form-control ReadOnly";
                            ddlWApp.Enabled = true;
                            ddlWApp.CssClass = "form-control ReadOnly";

                            if (ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.ToString() == "YES")
                            { 
                                ddlWApp_SelectedIndexChanged(ddlWApp, null);
                            }
                            if (Session["LoadPaymentReceiptsGridFC0001"] != null)
                            {
                                objdatatableLoadPaymentReceiptsGridFC0001 = (DataTable)Session["LoadPaymentReceiptsGridFC0001"];
                                if (objdatatableLoadPaymentReceiptsGridFC0001 != null && objdatatableLoadPaymentReceiptsGridFC0001.Rows.Count > 0)
                                {
                                    ddlWApp.Enabled = false;
                                    ddlWApp.CssClass = "form-control ReadOnly";
                                    ddlWApp_SelectedIndexChanged(ddlWApp, null);
                                }
                            }
                            txtReqRefNo.Enabled = true;
                            txtReqRefNo.CssClass = "form-control ReadOnly";
                            txtReqRef.Enabled = true;
                            txtReqRef.CssClass = "form-control ReadOnly";
                            txtReqStartDate.Enabled = true;
                            txtReqStartDate.CssClass = "form-control ReadOnly"; 

                            txtCopies.Enabled = true;
                            txtCopies.CssClass = "form-control ReadOnly";
                            txtAccidentDate.Enabled = true;
                            txtAccidentDate.CssClass = "form-control ReadOnly";
                            ddlRecBy.Enabled = true;
                            ddlRecBy.CssClass = "form-control ReadOnly";
                            ControlsDropdownValues("REPORTFORMAT", true);
                            ControlsDropdownValues("PURPOSE", true);
                            ControlsDropdownValues("REQUESTCATEGORY", true);
                            ControlsDropdownValues("DELIVERBY", true);

                            if (txtReqNo.Text.Trim().Length > 0 && txtMRStatus.Text.ToString() != "DRAFT")
                            {
                                ControlsEnabled(3);
                            } 
                            updPnlPreRequest.Update();
                        }
                    }
                }

                txtReqTypeID.Focus();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            { 
                stringReqType = null;
                objdatatableLoadPaymentReceiptsGridFC0001 = null;
            }

        } 
        private void LoadRequestDetailsInformations(DataRow objDataRow)
        { 
            string stringRequestType = "";  
            string stringPriority = "";
            string stringCAT = "";
            string stringPMI = ""; 
            string stringMR_PAYMENT_AMT = "";
            string stringapptype = ""; 
            try
            {
                if (objDataRow["create_date"] != null && objDataRow["create_date"].ToString().Trim().Length > 0)
                { txtCreateDate.Text = Convert.ToDateTime(objDataRow["create_date"]).ToString("dd-MM-yyyy"); }
                if (objDataRow["doha"] != null && objDataRow["doha"].ToString().Trim().Length > 0)
                { txtDOHA.Text = Convert.ToDateTime(objDataRow["doha"]).ToString("dd-MM-yyyy"); }
                if (objDataRow["request_date"] != null && objDataRow["request_date"].ToString().Trim().Length > 0)
                { txtReqDate.Text = Convert.ToDateTime(objDataRow["request_date"]).ToString("dd-MM-yyyy"); }
                if (objDataRow["receive_date"] != null && objDataRow["receive_date"].ToString().Trim().Length > 0)
                { txtRecDate.Text = Convert.ToDateTime(objDataRow["receive_date"]).ToString("dd-MM-yyyy"); }

                txtRecFrmID.Text = objDataRow["received_from"].ToString();
                txtRecFrmname.Text = objDataRow["RECEIVED_FROM_NAME"].ToString();
                updpnltxtRecFrmID.Update();


                stringRequestType = objDataRow["RequestTyp_ID"].ToString();
                stringMR_PAYMENT_AMT = objDataRow["MR_PAYMENT_AMT"].ToString();
                hdfmrreporttypeamount.Value = stringMR_PAYMENT_AMT;
                if (stringRequestType.Length > 0)
                {
                    txtReqTypeID.Text = stringRequestType;
                    txtReqTypename.Text = objDataRow["REQUEST_TYPE_NAME"].ToString() + "( $" + stringMR_PAYMENT_AMT.ToString() + " )";
                    txtReqTypename.Text = objDataRow["REQUEST_TYPE_NAME"].ToString();
                    updpnltxtReqTypeID.Update();

                    stringapptype = "";
                    if (ddlApplicationStatus.SelectedItem != null && ddlApplicationStatus.SelectedValue.Length > 0)
                    {
                        stringapptype = ddlApplicationStatus.SelectedValue.ToString();
                    }
                    if ((stringapptype != "COPYREQUEST"))
                    {
                        ddlReqType_SelectedIndexChanged(txtReqTypeID, null);
                    }
                }
                txtRptTypeID.Text = objDataRow["rpttyp_id"].ToString();
                txtRptTypename.Text = objDataRow["REPORT_TYPE_SHORT_NAME"].ToString();
                txtRequestorTypeHEADER.Text = objDataRow["REPORT_TYPE_SHORT_NAME"].ToString();
                updpnltxtRptTypeID.Update(); 
                 
                txtProcessTypeID.Text = objDataRow["mrp_id"].ToString();
                txtProcessTypename.Text = objDataRow["MR_PROCESS_NAME"].ToString();
                updpnltxtProcessTypeID.Update();
                 
                txtPurposeID.Text = objDataRow["rptpur_id"].ToString();
                txtPurposename.Text = objDataRow["REPORT_PURPOSE_NAME"].ToString();
                updpnltxtPurposeID.Update(); 
                txtRecModReqTypeID.Text = objDataRow["MODREQ_TYPE"].ToString();
                txtRecModReqTypename.Text = objDataRow["RECORD_TYPE_NAME"].ToString();
                updpnlRecModReqTypeID.Update();
                 
                txtRptFormatID.Text = objDataRow["rptfmt_id"].ToString();
                txtRptFormatname.Text = objDataRow["REPORT_FORMAT_NAME"].ToString();
                updpnltxtRptFormatID.Update(); 

                txtRecTypeID.Text = objDataRow["rectyp_id"].ToString();
                txtRecTypename.Text = objDataRow["MR_RECORD_TYPE_NAME"].ToString();
                updpnltxtRecTypeID.Update();
                 
                txtPriorityID.Text = objDataRow["priority"].ToString();
                txtPriorityname.Text = objDataRow["MR_PRIORITY_SHORT_NAME"].ToString();
                updpnltxtPriorityID.Update();

                if (objDataRow["due_date"] != null && objDataRow["due_date"].ToString().Trim().Length > 0)
                { txtDueDate.Text = Convert.ToDateTime(objDataRow["due_date"]).ToString("dd-MM-yyyy"); }

                txtCopies.Text = objDataRow["no_of_copies"].ToString();
                txtConInforDoctor.Text = objDataRow["Con_Info_Doc"].ToString();

                stringPMI = objDataRow["PMI"].ToString();
                if (ddlPMI.Items.FindByValue(stringPriority) != null)
                { ddlPMI.ClearSelection(); ddlPMI.Items.FindByValue(stringPriority).Selected = true; }

                stringCAT = objDataRow["CAT_A"].ToString();
                if (ddlCAT.Items.FindByValue(stringPriority) != null)
                { ddlCAT.ClearSelection(); ddlCAT.Items.FindByValue(stringPriority).Selected = true; }
                 
                txtDelToID.Text = objDataRow["delmod_id"].ToString();
                txtDelToname.Text = objDataRow["DELIVERY_MODE_NAME"].ToString();
                updpnltxtDelToID.Update();

                txtLoanFromInst.Text = objDataRow["LOAN_FORM"].ToString();  

                txttypeofvisitID.Text = objDataRow["Type_visit"].ToString();
                txttypeofvisitname.Text = objDataRow["TYPEOF_VISIT"].ToString();
                updpnltxttypeofvisitID.Update();

                txtcasevisitno.Text = objDataRow["case_visit_no"].ToString();
                if (objDataRow["accident_date"] != null && objDataRow["accident_date"].ToString().Trim().Length > 0)
                { txtAccidentDate.Text = Convert.ToDateTime(objDataRow["accident_date"]).ToString("dd-MM-yyyy"); }
                if (objDataRow["TCU_DATE"] != null && objDataRow["TCU_DATE"].ToString().Trim().Length > 0)
                { txtAppDate.Text = Convert.ToDateTime(objDataRow["TCU_DATE"]).ToString("dd-MM-yyyy"); }
                if (objDataRow["assessment_date"] != null && objDataRow["assessment_date"].ToString().Trim().Length > 0)
                { txtAssessmentDate.Text = Convert.ToDateTime(objDataRow["assessment_date"]).ToString("dd-MM-yyyy"); }
                txtrelatedMRref.Text = objDataRow["Related_MR_Ref"].ToString();
                if (objDataRow["reasses_date"] != null && objDataRow["reasses_date"].ToString().Trim().Length > 0)
                { txtReassDate.Text = Convert.ToDateTime(objDataRow["reasses_date"]).ToString("dd-MM-yyyy"); }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            { 
                stringRequestType = null;  
                stringPriority = null;
                stringCAT = null;
                stringPMI = null; 
                stringMR_PAYMENT_AMT = null;
                stringapptype = null; 
            }
        }

        private void RequestDetailsFieldenabledisable(bool boolENABLE, bool boolReadonly)
        {
            try
            {
                ControlsDropdownValues("RECEIVEDFROM", boolENABLE);
                ControlsDropdownValues("REQUESTTYPE", boolENABLE);
                ControlsDropdownValues("REPORTTYPE", boolENABLE);
                ControlsDropdownValues("PROCESSTYPE", boolENABLE);
                ControlsDropdownValues("PURPOSE", boolENABLE);
                ControlsDropdownValues("RECMODRECORDTYPE", boolENABLE);
                ControlsDropdownValues("REPORTFORMAT", boolENABLE);
                ControlsDropdownValues("REQUESTCATEGORY", boolENABLE);
                ControlsDropdownValues("PRIORITY", boolENABLE);
                ddlPMI.Enabled = boolENABLE;
                ddlCAT.Enabled = boolENABLE;
                ControlsDropdownValues("TYPEOFVISIT", boolENABLE);

                txtDOHA_CalendarExtender.Enabled = boolENABLE;
                txtReqDate_CalendarExtender.Enabled = boolENABLE;
                txtRecDate_CalendarExtender.Enabled = boolENABLE;
                txtDueDate_CalendarExtender.Enabled = boolENABLE;
                txtAccidentDate_CalendarExtender.Enabled = boolENABLE;
                txtAppDate_CalendarExtender.Enabled = boolENABLE;
                txtAssessmentDate_CalendarExtender.Enabled = boolENABLE;
                txtReassDate_CalendarExtender.Enabled = boolENABLE; 
                txtAssessmentDate.ReadOnly = boolReadonly;
                txtAppDate.ReadOnly = boolReadonly;
                txtAccidentDate.ReadOnly = boolReadonly;
                txtDueDate.ReadOnly = boolReadonly;
                txtRecDate.ReadOnly = boolReadonly;
                if (txtRecDate.ReadOnly == true)
                {
                    txtRecDate.CssClass = "form-control ReadOnly";
                }
                txtReqDate.ReadOnly = boolReadonly;
                if (txtReqDate.ReadOnly == true)
                {
                    txtReqDate.CssClass = "form-control ReadOnly";
                }
                txtDOHA.ReadOnly = boolReadonly;
                txtCopies.ReadOnly = boolReadonly;
                txtConInforDoctor.ReadOnly = boolReadonly;
                txtLoanFromInst.ReadOnly = boolReadonly;
                txtcasevisitno.ReadOnly = boolReadonly;
                txtrelatedMRref.ReadOnly = boolReadonly;
                txtReassDate.ReadOnly = boolReadonly; 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            } 
        }
        #region BATCHRequestDetails 
        protected void btnaddpatientgridbatchreq_Click(object sender, EventArgs e)
        {
            DataTable objDataTableAddAttachments = new DataTable();
            DataRow[] objdatarowRecordExist = null;
            DataSet objDatasetResult = null;
            DataRow objdatarow = null;
            bool boolCHECKRecordExist = true;
            bool boolEDITRecordExist = false;
            string stringReportType = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            try
            {
                ControlsDropdownValues("REPORTTYPE", true);
                if (ValidateRequestDetailsBATCHADD("BATCH"))
                {
                    if (Session["ADD_BATCHREQUEST"] != null)
                    { objDataTableAddAttachments = (DataTable)Session["ADD_BATCHREQUEST"]; }
                    else
                    { 
                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResult != null && objDatasetResult.Tables["t1"].Rows.Count == 0)
                            {
                                objDataTableAddAttachments = objDatasetResult.Tables["t1"];
                            } 
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                        }
                    }  
                    if (objDataTableAddAttachments != null)
                    {
                        if (txtRptTypeID.Text.Trim().Length > 0)
                        {
                            stringReportType = txtRptTypeID.Text.Trim().ToUpper();
                        }
                        if (objDataTableAddAttachments != null && objDataTableAddAttachments.Rows.Count > 0)
                        {
                            if (hdfEditrequestDetail.Value != null && hdfEditrequestDetail.Value.Length > 0 && hdfEditrequestDetail.Value.ToString() == "EDIT")
                            {
                                boolEDITRecordExist = true;
                            }
                            else
                            {
                                objdatarowRecordExist = objDataTableAddAttachments.Select("be_id= '" + stringbeid + "' and RptTyp_ID = '" + stringReportType.ToString() + "'");
                                if (objdatarowRecordExist != null && objdatarowRecordExist.Length > 0)
                                {
                                    boolCHECKRecordExist = false;
                                }
                            }
                        }
                        if (boolCHECKRecordExist)
                        {
                            if (objDataTableAddAttachments != null)
                            {
                                if (boolEDITRecordExist)
                                {
                                    objdatarowRecordExist = objDataTableAddAttachments.Select("be_id= '" + stringbeid + "' and RptTyp_ID = '" + stringReportType.ToString() + "'");
                                    if (objdatarowRecordExist != null && objdatarowRecordExist.Length > 0)
                                    {
                                        SaveRequestDetailUpdate("", objdatarowRecordExist); 
                                        Session["ADD_BATCHREQUEST"] = objDataTableAddAttachments;
                                        ClearValues(2);
                                        hdfEditrequestDetail.Value = "";
                                    }
                                }
                                else
                                {
                                    objdatarow = objDataTableAddAttachments.NewRow();
                                    SaveRequestDetail("", objdatarow);
                                    objDataTableAddAttachments.Rows.Add(objdatarow);
                                    objDataTableAddAttachments.AcceptChanges();
                                    Session["ADD_BATCHREQUEST"] = objDataTableAddAttachments;
                                    ClearValues(2);
                                    hdfEditrequestDetail.Value = "";
                                }
                            } 
                        }
                        else
                        {
                            ClearValues(2);
                            CommonFunctions.ShowMessageboot(this, "Record already exist");
                            hdfEditrequestDetail.Value = "";
                        }
                    }
                    BindRequestData(objDataTableAddAttachments);
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringReportType = null;
                objdatarowRecordExist = null;
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                stringServiceType = null;
                stringexp = null;
                objdatarow = null;
            }
        } 
        protected void btnDeleteAddRequestGRID_Click(object sender, EventArgs e)
        {
            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            string stringCmdArgument = "";
            string stringcustringcusID1 = "";
            string stringcustringcus2 = "";
            string[] stringValues = null;
            try
            { 
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length >= 2)
                        {
                            stringcustringcusID1 = stringValues[0];
                            stringcustringcus2 = stringValues[1];

                            if (Session["ADD_BATCHREQUEST"] != null)
                            {
                                objOrderTable = (DataTable)Session["ADD_BATCHREQUEST"];
                            } 
                            if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                            {
                                objDataRow = objOrderTable.Select("RptTyp_ID='" + stringcustringcusID1 + "' ");
                                if (objDataRow != null && objDataRow.Length > 0)
                                {
                                    objDataRow[0].Delete();
                                }

                                objOrderTable.AcceptChanges();
                                Session["ADD_BATCHREQUEST"] = objOrderTable;
                                BindRequestData(objOrderTable); 
                            } 
                        }
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                stringCmdArgument = null;
                stringcustringcusID1 = null;
                stringcustringcus2 = null;
                stringValues = null;
            }
        }
        private void BindRequestData(DataTable objDataTableCopy)
        {
            string stringTotalrecPatient = "0";
            try
            { 
                gvlistBatchRequestprofile.DataSource = objDataTableCopy;
                gvlistBatchRequestprofile.DataBind();
                if (objDataTableCopy != null && objDataTableCopy.Rows.Count > 0)
                {
                    stringTotalrecPatient = objDataTableCopy.Rows.Count.ToString();
                }
                TotalrecRequest.InnerText = stringTotalrecPatient; 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringTotalrecPatient = null;
            }
        }
        //for EDIT patient detail inside grid
        protected void btnEditAddRequestGRID_Click(object sender, EventArgs e)
        {
            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            DataRow objDataRowparticularinf = null;
            hdfEditrequestDetail.Value = "";
            string stringCmdArgument = "";
            string stringreporttypeID = "";
            string stringcustringcusID1 = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length >= 2)
                        {
                            stringreporttypeID = stringValues[0];
                            stringcustringcusID1 = stringValues[1];
                            if (Session["ADD_BATCHREQUEST"] != null)
                            {
                                objOrderTable = (DataTable)Session["ADD_BATCHREQUEST"];
                            } 
                            if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                            {
                                objDataRow = objOrderTable.Select("RptTyp_ID='" + stringreporttypeID + "' ");
                                if (objDataRow != null && objDataRow.Length > 0)
                                {
                                    objDataRowparticularinf = objDataRow[0];
                                    LoadRequestDetailsInformations(objDataRowparticularinf);
                                    hdfEditrequestDetail.Value = "EDIT";
                                    ControlsDropdownValues("REPORTTYPE", false);
                                }

                            }

                        }
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                objDataRowparticularinf = null;
                stringCmdArgument = null;
                stringreporttypeID = null;
                stringcustringcusID1 = null;
                stringValues = null;
            }
        }

        #endregion
        #endregion
        #region Additional Non MR
        protected void btnDeletelevel3_Click(object sender, EventArgs e)
        {
            int intcount = 0;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringrequest_id = "";
            string stringCmdArgument = "";
            string stringIDValue = "";
            string stringshortname = "";
            string[] stringValues = null;
            DataTable objDataTableRptTypes = null;
            string stringCondition = "";
            DataRow[] objDataRowFiltered = null;
            DataTable objDataTableCopy = null;
            DataRow[] objDatarow = null;
            try
            {
                //link button id
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length >= 2)
                        {
                            stringIDValue = stringValues[0];
                            stringshortname = stringValues[1];

                            if (stringIDValue != null && stringIDValue.Trim().Length > 0)
                            {
                                if (Session["ADD_RPT_TYPES"] != null)
                                {
                                    objDataTableRptTypes = (DataTable)Session["ADD_RPT_TYPES"];
                                    if (!objDataTableRptTypes.Columns.Contains("INT_ROW_ID"))
                                    {
                                        objDataTableRptTypes.Columns.Add("INT_ROW_ID");
                                    }
                                    if (objDataTableRptTypes != null && objDataTableRptTypes.Rows.Count > 0)
                                    {
                                        stringCondition = "index='" + stringIDValue + "'";
                                        objDataRowFiltered = objDataTableRptTypes.Select(stringCondition);

                                        if (objDataRowFiltered != null && objDataRowFiltered.Length > 0)
                                        {
                                            if (objDataRowFiltered[0]["REFERENCE_2"].ToString() == "I" || (objDataRowFiltered[0]["REFERENCE_2"].ToString() == "U" && objDataRowFiltered[0]["INT_ROW_ID"].ToString().Length == 0))
                                            {
                                                objDataRowFiltered[0].Delete();
                                            }
                                            else
                                            {
                                                objDataRowFiltered[0]["REFERENCE_2"] = "D";
                                                intcount++;
                                            } 
                                            objDataTableRptTypes.AcceptChanges();
                                        }  
                                        objDatarow = objDataTableRptTypes.Select("REFERENCE_2 <>'D'");
                                        if (objDatarow != null && objDatarow.Length > 0)
                                        {
                                            objDataTableCopy = objDataTableRptTypes.Select("REFERENCE_2 <>'D'").CopyToDataTable<DataRow>();
                                        }
                                        else
                                        {
                                            objDataTableCopy = null;
                                        }
                                        if (intcount > 0)
                                        {
                                            Session["ADD_RPT_TYPES"] = objDataTableRptTypes;
                                            SaveAdditionalReports(stringrequest_id, ""); 
                                        }
                                        else
                                        {
                                            gvNonMRList.DataSource = objDataTableCopy;
                                            gvNonMRList.DataBind();
                                            AssignSerialNoToNonMRList();
                                            lblTotalRecords.InnerText = objDataTableRptTypes.Rows.Count.ToString();
                                        } 
                                    }
                                }
                            }

                        }
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                intcount = 0;
                stringbeid = null;
                stringrequest_id = null;
                stringCmdArgument = null;
                stringIDValue = null;
                stringshortname = null;
                stringValues = null;
                objDataTableRptTypes = null;
                stringCondition = null;
                objDataRowFiltered = null;
                objDataTableCopy = null;
                objDatarow = null;
            }
        }
        protected void BtnAdd_Click(object sender, EventArgs e)
        {
            string stringType = "GURUSOFT";
            string stringapptype = "";
            DataTable objDataTable = null;
            DataTable objDataTableAddReports = new DataTable();
            string stringBoID = CommonFunctions.GETBussinessEntity();
            string stringexp012 = "";
            DataRow[] objdatarow = null;
            string stringrectype = "";
            string stringexp01112 = "";
            string stringNoOfCopies = "";
            DataRow objDataRow = null; 
            bool boolrecexist = true;
            try
            {
                if (ddlApplicationStatus.SelectedItem != null && ddlApplicationStatus.SelectedValue.Length > 0)
                {
                    stringapptype = ddlApplicationStatus.SelectedValue.ToString();

                    if (stringapptype == "BATCHREQUESTBYPATIENT" || stringapptype == "BATCHREQUESTBYREQUESTDETAIL")
                    {
                        if (stringapptype == "BATCHREQUESTBYPATIENT")
                        {
                            CommonFunctions.ShowMessageboot(this, "Batch Request By Patient not able to add Additional Non-Medical Report ");
                        }
                        else if (stringapptype == "BATCHREQUESTBYREQUESTDETAIL")
                        {
                            CommonFunctions.ShowMessageboot(this, "Batch Request By Request Details not able to add Additional Non-Medical Report");
                        }
                    }
                    else
                    {
                        if (ValidateAdditionalMR() && ValidateAdditionalMRBusinessLogic())
                        {
                            if (Session["ADD_RPT_TYPES"] != null)
                            { objDataTableAddReports = (DataTable)Session["ADD_RPT_TYPES"]; }
                            else
                            {
                                stringexp012 = "be_id= '" + stringBoID.ToString() + "' And rpttyp_id= '" + stringType.ToString() + "' "; 
                                objDataTableAddReports = CommonFunctions.GETReportType(stringexp012);
                                Session.Add("ADD_RPT_TYPES", objDataTableAddReports);
                            } 
                            if (objDataTableAddReports != null)
                            {
                                if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                                {
                                    objdatarow = objDataTableAddReports.Select("rpttyp_id ='" + txtAddRptTypeID.Text.Trim() + "'");
                                    if (objdatarow.Length > 0)
                                    {
                                        boolrecexist = false;
                                    }
                                }
                                if (boolrecexist)
                                {
                                    if (!objDataTableAddReports.Columns.Contains("Index"))
                                    {
                                        DataColumn objDataColumn = new DataColumn("Index");
                                        objDataColumn.AutoIncrement = true;
                                        objDataColumn.AutoIncrementSeed = 1;
                                        objDataColumn.AutoIncrementStep = 1;
                                        objDataTableAddReports.Columns.Add(objDataColumn);
                                    }  
                                    if (txtAddRptTypeID.Text.Trim().Length > 0)
                                    { 
                                        stringrectype = txtAddRptTypeID.Text.Trim();
                                        stringexp01112 = "be_id= '" + stringBoID.ToString() + "' And rpttyp_id= '" + stringrectype.ToString() + "' ";
                                        objDataTable = CommonFunctions.GETReportType(stringexp01112);
                                    } 
                                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                                    {
                                        objDataRow = objDataTable.Rows[0];
                                        stringNoOfCopies = txtAddNoCopy.Text.Trim();
                                        if (stringNoOfCopies.Trim().Length == 0) { stringNoOfCopies = "1"; } 
                                        DateTime objDateTimeCreatedOn = DateTime.Now;
                                        if (txtAddDate.Text.Trim().Length > 0)
                                        {
                                            objDateTimeCreatedOn = CommonFunctions.ConvertToDateTime(txtAddDate.Text.Trim(), "dd-MM-yyyy");
                                            objDataRow["REFERENCE_DATE_1"] = objDateTimeCreatedOn;
                                        } 
                                        objDataRow["REFERENCE_1"] = txtAddNoCopy.Text.Trim();
                                        objDataRow["REFERENCE_2"] = "I";
                                        objDataTableAddReports.ImportRow(objDataRow);
                                        Session["ADD_RPT_TYPES"] = objDataTableAddReports;
                                    }  
                                    gvNonMRList.DataSource = objDataTableAddReports;
                                    gvNonMRList.DataBind();
                                    lblTotalRecords.InnerText = objDataTableAddReports.Rows.Count.ToString();
                                }
                                else
                                {
                                    CommonFunctions.ShowMessageboot(this, "Record Already Exists");
                                }
                            }
                            else
                            {
                                gvNonMRList.DataSource = null;
                                gvNonMRList.DataBind();
                                lblTotalRecords.InnerText = "0";
                            }

                            AssignSerialNoToNonMRList();
                            txtAddRptTypename.Text = "";
                            txtAddRptTypeID.Text = "";
                            updpnltxtAddRptTypeID.Update();
                            txtAddNoCopy.Text = "1";
                            txtAddDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                            txtAddRptTypename.Focus();
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringapptype = null;
                objDataTable = null;
                objDataTableAddReports = new DataTable();
                stringBoID = null;
                stringexp012 = null;
                objdatarow = null;
                stringrectype = null;
                stringexp01112 = null;
                stringNoOfCopies = null;
                objDataRow = null;
            }
        }
        private void AssignSerialNoToNonMRList()//fix
        {
            try
            {
                for (int intCount = 0; intCount < gvNonMRList.Rows.Count; intCount++)
                {
                    gvNonMRList.Rows[intCount].Cells[0].Text = (intCount + 1).ToString();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        protected void gvNonMRList_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRowView objDRV = null;
            DataRow objDataRow = null;
            try
            {
                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }

                objDRV = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objDRV.Row;
                if (objDataRow != null)
                {
                    if (objDataRow["reference_2"].ToString() == "D")
                    {
                        e.Row.Visible = false;
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objDRV = null;
                objDataRow = null;
            }
        }
        private bool SaveAdditionalReports(string stringRequestID, string stringTYPE)
        {
            DataTable objDataTableAddReports = null;
            DataRow objdatarow = null;
            DataSet objDatasetResult1 = null;
            DataSet objDatasetResult = null;
            bool boolStatus = true;
            int intCounter = 2;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            string stringformid = "FC0001R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            string stringBoID = CommonFunctions.GETBussinessEntity();
            string stringRptTypID = "";
            string stringNoofCopies = "";
            string stringtransid = "";
            string stringrirowid = "";
            string stringDMLIndicator = "";
            string stringTemp = "";
            string stringcustemerid3 = "";
            string stringServiceType1 = "";
            string stringformid1 = "";
            int intNoofCopies = 0; 
            int intRowID = 0;   
            try
            {
                if (Session["ADD_RPT_TYPES"] != null)
                { objDataTableAddReports = (DataTable)Session["ADD_RPT_TYPES"]; } 
                if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t7"] != null && objDatasetResult.Tables["t7"].Rows.Count == 0)
                        {
                            foreach (DataRow objDataRow in objDataTableAddReports.Rows)
                            { 
                                objdatarow = objDatasetResult.Tables["t7"].NewRow(); 
                                stringRptTypID = objDataRow["rpttyp_id"].ToString();
                                stringNoofCopies = objDataRow["reference_1"].ToString();
                                intNoofCopies = 1;
                                intRowID = -1;
                                stringtransid = DateTime.Now.ToString("HHmmssfff");
                                int intIndex = Convert.ToInt32(stringtransid);
                                stringrirowid = System.Guid.NewGuid().ToString();
                                stringDMLIndicator = objDataRow["reference_2"].ToString(); 
                                if (stringDMLIndicator != null && stringDMLIndicator.Trim().Length > 0)
                                {
                                    bool boolContinue = true; 
                                    if (stringNoofCopies != null && stringNoofCopies.Trim().Length > 0)
                                    { int.TryParse(stringNoofCopies, out intNoofCopies); } 
                                    DateTime objDateTimeTransDate = DateTime.Now;
                                    if (objDataRow["REFERENCE_DATE_1"] != null && objDataRow["REFERENCE_DATE_1"].ToString().Trim().Length > 0)
                                    { objDateTimeTransDate = Convert.ToDateTime(objDataRow["REFERENCE_DATE_1"]); } 
                                    stringTemp = "";
                                    if (objDataTableAddReports.Columns.Contains("int_row_id")) { stringTemp = objDataRow["int_row_id"].ToString(); } 
                                    if (stringDMLIndicator == "I" || stringDMLIndicator == "U")
                                    {
                                        objdatarow["Int_Row_id"] = intIndex;
                                    }
                                    else
                                    {
                                        if (stringTemp.Trim().Length > 0 && int.TryParse(stringTemp, out intRowID))
                                        {
                                            objdatarow["Int_Row_id"] = Convert.ToInt32(stringTemp);
                                        }
                                        else { boolContinue = false; }
                                    }

                                    if (boolContinue)
                                    { 
                                        objdatarow["be_id"] = CommonFunctions.GETBussinessEntity().ToString(); 
                                        if (stringRequestID != null && stringRequestID.Trim().Length > 0 && stringRequestID.Trim().ToUpper() != "NULL") { objdatarow["Request_ID"] = stringRequestID.Trim().ToUpper(); }
                                        else { objdatarow["Request_ID"] = txtReqNo.Text.Trim().ToUpper(); }
                                        objdatarow["Trans_Date"] = objDateTimeTransDate;
                                        objdatarow["reference_date_1"] = objDateTimeTransDate;
                                        objdatarow["Trans_Type"] = "ADDITIONAL MR";
                                        objdatarow["RptTyp_ID"] = stringRptTypID;
                                        objdatarow["No_Of_Copies"] = intNoofCopies;  
                                        objdatarow["Be_ID"] = stringBoID;
                                        objdatarow["Long_Name"] = "";
                                        objdatarow["Remarks"] = "";  
                                        if (Session["Reassessment"] != null && Session["stringDMLIndicator"].ToString() == "I")
                                        { objdatarow["Trans_Status"] = "GENERATED"; }
                                        objdatarow["delmark"] = "N";
                                        objdatarow["REFERENCE_5"] = stringDMLIndicator; 
                                        CommonFunctions.AssignAuditLogDetails(ref objdatarow); 
                                        objDatasetResult.Tables["t7"].Rows.Add(objdatarow); 
                                        objDatasetResult.Tables["t7"].Rows[0].RowState.ToString();
                                        objDataRow["reference_2"] = "";  
                                    }
                                } 
                            }
                            if (objDatasetResult.Tables["t7"].Rows.Count > 0)
                            {
                                objDatasetResult.Tables["t7"].AcceptChanges();
                                for (int intIndex = 0; intIndex < objDatasetResult.Tables["t7"].Rows.Count; intIndex++)
                                {
                                    stringcustemerid3 = objDatasetResult.Tables["t7"].Rows[intIndex]["REFERENCE_5"].ToString();
                                    if (chkCOPYQUERY.Checked == false)
                                    {
                                        if (stringcustemerid3 == "D")
                                        {
                                            objDatasetResult.Tables["t7"].Rows[intIndex].Delete();
                                        }
                                        else if (stringcustemerid3 == "I")
                                        {
                                            objDatasetResult.Tables["t7"].Rows[intIndex].SetAdded();
                                        }
                                        else if (stringcustemerid3 == "U")
                                        {
                                            objDatasetResult.Tables["t7"].Rows[intIndex].SetModified();
                                        }
                                    }
                                    else
                                    {
                                        objDatasetResult.Tables["t7"].Rows[intIndex].SetAdded();
                                    }
                                } 
                                objDatasetResult = objDatasetResult.GetChanges();
                                stringServiceType1 = "OperationServiceDML";
                                stringformid1 = "FC0001R1V1";
                                objDatasetResult1 = CommonFunctions.DataManipulationR1V1(stringServiceType1, objDatasetResult.GetChanges(), stringformid1, out int intErrorCount, out string[] stringOutputResult1);
                                if (intErrorCount == 0)
                                {
                                    objDatasetResult = null;
                                    intCounter++;
                                    boolStatus = true;
                                }
                                else
                                {
                                    Errorpopup(stringOutputResult1);
                                    boolStatus = false;

                                }
                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        return false;
                    }
                } 
                if (boolStatus)
                {
                    LoadNonMRDetail(txtReqNo.Text.Trim(), "NONLOAD");
                } 
                return boolStatus;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDataTableAddReports = null;
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                objdatarow = null;
                objDatasetResult1 = null;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
                stringBoID = null;
                stringRptTypID = null;
                stringNoofCopies = null;
                stringtransid = null;
                stringrirowid = null;
                stringDMLIndicator = null;
                stringTemp = null;
                stringcustemerid3 = null;
                stringServiceType1 = null;
                stringformid1 = null;
            }
            return false;
        }

        //LOAD DATA RELATED CODES 
        private void LoadNonMRDetail(string stringRegID, string stringTYPE)//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            int intFromRecord = 0;
            int intToRecord = int.MaxValue; 
            int intCounter = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            DataTable objDataTable = null;
            string stringTransType = "ADDITIONAL MR";
            string stringServiceType = "List8R1V1";
            string stringexp012 = "";
           string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                if (stringRegID != null && stringRegID.Trim().Length > 0)
                {
                    if ((Session["LoadNonMRDetailFC0001"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                    { 
                        ClearValues(3);   
                        stringexp012 = "And mrregreq.be_id= '" + stringbeid + "' And mrregreq.delmark= 'N' And mrregreq.request_id= '" + stringRegID.ToString() + "' And mrregreq.trans_type= '" + stringTransType.ToString() + "'";

                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t8"] != null && objDatasetResult.Tables["t8"].Rows.Count > 0)
                            {
                                objDataTable = objDatasetResult.Tables["t8"];
                            }
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                        }
                    }
                    else
                    {
                        if (HttpContext.Current.Session["LoadNonMRDetailFC0001"] != null)
                        {
                            objDataTable = (DataTable)HttpContext.Current.Session["LoadNonMRDetailFC0001"];
                        }
                    } 
                    if (objDataTable != null)
                    {
                        if (!objDataTable.Columns.Contains("Index"))
                        {
                            DataColumn objDataColumn = new DataColumn("Index");
                            objDataColumn.AutoIncrement = true;
                            objDataColumn.AutoIncrementSeed = objDataTable.Rows.Count + 1;
                            objDataColumn.AutoIncrementStep = 1;
                            objDataTable.Columns.Add(objDataColumn);
                        } 
                        if (!objDataTable.Columns.Contains("short_name"))
                        { objDataTable.Columns.Add("short_name"); }

                        foreach (DataRow objDataRow in objDataTable.Rows)
                        {
                            objDataRow["index"] = intCounter;
                            objDataRow["reference_1"] = objDataRow["no_of_copies"].ToString();
                            objDataRow["reference_2"] = "";
                            objDataRow["reference_date_1"] = objDataRow["trans_date"];
                            objDataRow["short_name"] = objDataRow["report_typ_short_name"];
                            intCounter++;
                        }
                    }  
                    Session["ADD_RPT_TYPES"] = objDataTable;
                    gvNonMRList.DataSource = objDataTable;
                    gvNonMRList.DataBind();
                    AssignSerialNoToNonMRList();
                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        lblTotalRecords.InnerText = objDataTable.Rows.Count.ToString();
                    }
                    else
                    {
                        lblTotalRecords.InnerText = "0";
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDataTable = null;
                stringTransType = null;
                stringServiceType = null;
                stringexp012 = null;
                stringbeid = null;
            }
        }
        protected void lnkbtnUserID_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringindex = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringindex = stringValues[0];
                            LoadData(stringindex);

                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringindex = null;
                stringValues = null;
            }
        }
        private void LoadData(string stringindex)
        {
            DataRow[] objdatarow = null;
            DataTable objDataTableAddReports = null;
            string stringrpttypeid = "";
            string stringtxtdeaseaseddate = "";
            try
            {
                if (Session["ADD_RPT_TYPES"] != null)
                {
                    if (Session["ADD_RPT_TYPES"] != null)
                    { objDataTableAddReports = (DataTable)Session["ADD_RPT_TYPES"]; }

                    if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                    {
                        objdatarow = objDataTableAddReports.Select("index='" + stringindex + "'");
                        if (objdatarow != null && objdatarow.Length > 0)
                        {
                            stringrpttypeid = objdatarow[0]["rpttyp_id"].ToString();
                            txtAddRptTypename.Text = objdatarow[0]["SHORT_NAME"].ToString();
                            txtAddRptTypeID.Text = stringrpttypeid;
                            updpnltxtAddRptTypeID.Update(); 
                            txtAddNoCopy.Text = objdatarow[0]["REFERENCE_1"].ToString();
                            stringtxtdeaseaseddate = objdatarow[0]["REFERENCE_DATE_1"].ToString();
                            if (stringtxtdeaseaseddate.Trim().Length > 0)
                            {
                                txtAddDate.Text = Convert.ToDateTime(objdatarow[0]["REFERENCE_DATE_1"]).ToString("dd-MM-yyyy");
                            }
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objdatarow = null;
                objDataTableAddReports = null;
                stringrpttypeid = null;
                stringtxtdeaseaseddate = null;
            }
        }

        #endregion
        #region popup DOCTER SELECTION
        protected void btndoctorselectionpopupnew_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                Docterpopupclearvalues();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        } 
        //for clearvalues
        private void Docterpopupclearvalues()
        {
            try
            {
                ddlDepartmentOUDoctersel.ClearSelection();
                txtdocempnumdocselection.Text = "";
                txtMCRNumberdocselection.Text = "";
                if (rbtndoctor.Checked == true)
                {
                    rbtndoctor.Checked = true;
                }
                else if (rbtndepsec.Checked == true)
                {
                    rbtndepsec.Checked = true;
                }
                else if (rbtnhims.Checked == true)
                {
                    rbtnhims.Checked = true;
                }
                else { rbtndoctor.Checked = true; }
                txtSecretaryname.Text = "";
                txtDoctorNamedocselection.Text = "";
                gvlistdoctorselectionpopup.DataSource = null;
                gvlistdoctorselectionpopup.DataBind();
                PopulatePagerdoctorselection(0, intpageIndexdocselection);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void btndoctorselectionsearch_Click(object sender, ImageClickEventArgs e)
        {
            DataSet objDatasetResult = null;
            DataTable objDataTable = null;
            int interrorcount = 0;
            int intTotalRecord = 0; 
            int intRecordFrom = intrecFromdocselection;
            int intRecordTo = intrecTodocselection;
            string[] stringOutputResult = null;
            string stringformid = "";
            string stringServiceType = "List15R1V1";
            string stringOrderBy = "";
            string stringexp012 = "";
            string stringDepartmentOUDocterselection = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                {
                    stringformid = "FC0001R1V4";
                }
                else if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                {
                    stringformid = "FC0001R1V1";
                }
                if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                {
                    stringexp012 += " delmark = 'N'";
                }
                else if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                {
                    stringexp012 += "AND mrd.delmark = 'N'";
                } 
                if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                {
                    if (rbtndoctor.Checked == true)
                    {
                        stringexp012 += "And user_type= 'DOCTORS' ";
                    }
                    else if (rbtndepsec.Checked == true)
                    {
                        stringexp012 += "And user_type IN ('DEPARTMENT SECRETARY','DEPARTMENT USERS')  ";
                    }
                    else if (rbtnhims.Checked == true)
                    {
                        stringexp012 += "And user_type IN ('HIMS USERS','HIMS SUPERVISOR','HOD','NCCS HIMS TEAM LEAD','SGH HIMS TEAM LEAD')  ";
                    }
                }
                if (ddlDepartmentOUDoctersel.SelectedItem != null && ddlDepartmentOUDoctersel.SelectedItem.Value.Length > 0)
                {
                    stringDepartmentOUDocterselection = ddlDepartmentOUDoctersel.SelectedItem.Value;
                    if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                    {
                        stringexp012 += stringDepartmentOUDocterselection.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(DEPT_CODE)  LIKE UPPER('%" + stringDepartmentOUDocterselection.Trim() + "%'))" : "";
                    }
                    else if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                    {
                        stringexp012 += stringDepartmentOUDocterselection.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(mrd.DEPT_CODE)  LIKE UPPER('%" + stringDepartmentOUDocterselection.Trim() + "%'))" : "";
                    }
                } 
                if (txtdocempnumdocselection.Text.Length > 0 && txtdocempnumdocselection.Text.Trim() != "%")
                {
                    if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                    {
                        stringexp012 += txtdocempnumdocselection.Text.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(EMP_NO)  LIKE UPPER('%" + txtdocempnumdocselection.Text.Trim().ToUpper() + "%'))" : "";
                    }
                    else if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                    {
                        stringexp012 += txtdocempnumdocselection.Text.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(mrd.EMP_NO)  LIKE UPPER('%" + txtdocempnumdocselection.Text.Trim().ToUpper() + "%'))" : "";
                    } 
                }
                if (txtMCRNumberdocselection.Text.Length > 0 && txtMCRNumberdocselection.Text.Trim() != "%")
                {
                    if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                    {
                        stringexp012 += txtMCRNumberdocselection.Text.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(MCR_NO)  LIKE UPPER('%" + txtMCRNumberdocselection.Text.Trim().ToUpper() + "%'))" : "";
                    }
                    else if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                    {
                        stringexp012 += txtMCRNumberdocselection.Text.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(mrd.MCR_NO)  LIKE UPPER('%" + txtMCRNumberdocselection.Text.Trim().ToUpper() + "%'))" : "";
                    } 
                }
                if (txtSecretaryname.Text.Length > 0 && txtSecretaryname.Text.Trim() != "%")
                {
                    if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                    {
                        stringexp012 += txtSecretaryname.Text.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(short_name)  LIKE UPPER('%" + txtSecretaryname.Text.Trim().ToUpper() + "%'))" : "";
                    } 
                }
                if (txtDoctorNamedocselection.Text.Length > 0 && txtDoctorNamedocselection.Text.Trim() != "%")
                {
                    if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                    {
                        stringexp012 += txtDoctorNamedocselection.Text.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(short_name)  LIKE UPPER('%" + txtDoctorNamedocselection.Text.Trim().ToUpper() + "%'))" : "";
                    }
                    else if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                    {
                        stringexp012 += txtDoctorNamedocselection.Text.ToString().Replace("%", "").Length > 0 ? "AND (UPPER(mrd.short_name)  LIKE UPPER('%" + txtDoctorNamedocselection.Text.Trim().ToUpper() + "%'))" : "";
                    }
                }  
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intRecordFrom, intRecordTo, out intTotalRecord, out interrorcount, out stringOutputResult);

                PopulatePagerdoctorselection(intTotalRecord, intpageIndexdocselection);
                if (interrorcount == 0)
                { 
                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t15"] != null && objDatasetResult.Tables["t15"].Rows.Count > 0)
                    {
                        objDataTable = objDatasetResult.Tables["t15"];
                    }
                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        gvlistdoctorselectionpopup.DataSource = objDataTable;
                        gvlistdoctorselectionpopup.DataBind();
                        updtpnldocterselection.Visible = true;
                        mdlpopupdoctorselection.Show();
                    }
                    else
                    {
                        gvlistdoctorselectionpopup.DataSource = null;
                        gvlistdoctorselectionpopup.DataBind();
                        CommonFunctions.ShowMessageboot(this, "No Records Found");
                        mdlpopupdoctorselection.Show();
                        updtpnldocterselection.Visible = true;
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringServiceType = null;
                stringOrderBy = null;
                objDataTable = null;
                stringexp012 = null;
                stringDepartmentOUDocterselection = null;
                stringbeid = null;
            }
        }

        //for popup linkbutton click in grid
        protected void lnkbtnpopupDOCID_Click(object sender, EventArgs e)
        {
            string stringdocttype = "";
            string stringMCRno = "";
            string stringCmdArgument = "";
            string stringEMPNo = "";
            string stringdocname = "";
            string[] stringValues = null;
            string stringDepname = "";
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringEMPNo = stringValues[0];
                            stringdocname = stringValues[1];
                            if (stringValues.Length >= 3)
                            {
                                stringMCRno = stringValues[2];
                            }
                            stringDepname = stringValues[3];
                             
                            if (ViewState["DocterSelectionPopup"] != null)
                            {
                                stringdocttype = ViewState["DocterSelectionPopup"].ToString();
                            }

                            if (stringdocttype == "DOCTOR")
                            {
                                AssignDoctertoGrid(stringdocttype, stringEMPNo, stringdocname, stringMCRno, stringDepname);
                            }
                            else if (stringdocttype == "VERIFIER")
                            {
                                AssignDoctertoGrid(stringdocttype, stringEMPNo, stringdocname, stringMCRno, stringDepname);
                            }

                            mdlpopupdoctorselection.Hide();
                            updtpnldocterselection.Visible = false;
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringdocttype = null;
                stringMCRno = null;
                stringCmdArgument = null;
                stringEMPNo = null;
                stringdocname = null;
                stringValues = null;
                stringDepname = null;
            }
        }
        public DataRow[] LoadReportType(string stringRPTTYP_ID)//mrpr
        {
            DataSet objDataSet = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0024R1V2";
            string stringOrderBy = "";
            string stringexp = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataTable objdatatableHOD = null; 
            string stringServiceType = "List1R1V1"; 
            string stringdate = "";
            DataRow[] objdatarow = null;
            try
            {
                stringexp = " AND mrpr.be_ID='" + CommonFunctions.GETBussinessEntity().ToString() + "' AND mrpr.RPTTYP_ID='" + stringRPTTYP_ID.ToString() + "'";
                objDataSet = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                { 
                    //2nd level 1st tab
                    if (objDataSet != null && objDataSet.Tables.Count > 0 && objDataSet.Tables["table1"] != null && objDataSet.Tables["table1"].Rows.Count > 0)
                    {
                        objdatatableHOD = objDataSet.Tables["table1"];
                        DateTime objDateTimeFrom = FindNearestDate(objdatatableHOD); 
                        stringdate = CommonFunctions.ConvertDateTimetoString(objDateTimeFrom); 
                    }  
                    //2nd level 22n tab
                    if (objDataSet != null && objDataSet.Tables.Count > 0 && objDataSet.Tables["table2"] != null && objDataSet.Tables["table2"].Rows.Count > 0)
                    {
                        objdatatableHOD = objDataSet.Tables["table2"]; 
                        if (objdatatableHOD != null && objdatatableHOD.Rows.Count > 0)
                        {
                            if (stringdate.Length > 0)
                            {
                                objdatarow = objdatatableHOD.Select("FEE_EFF_DATE = #" + stringdate + "#");
                                if (objdatarow.Length > 0)
                                {
                                    return objdatarow;
                                }
                            }
                        } 
                    }    
                }
                else
                {
                    Errorpopup(stringOutputResult);

                }
                return null;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
                return null;
            }
            finally
            {
                objDataSet = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringexp = null;
                intFromRecord = 0;
                intToRecord = 0;
                objdatatableHOD = null; 
                stringServiceType = null; 
            }

        }
        private DateTime FindNearestDate(DataTable dataTable)
        {
            DateTime objdatetimetoday = DateTime.Today;
            DateTime objdatetimenearestDate = DateTime.MaxValue;
            TimeSpan nearestDifference = TimeSpan.MaxValue;
            try
            { 
                foreach (DataRow row in dataTable.Rows)
                { 
                    DateTime objdatetimedate = Convert.ToDateTime(row["FEE_EFF_DATE"]);
                     
                    if (objdatetimedate <= objdatetimetoday)
                    {
                        TimeSpan difference = objdatetimetoday - objdatetimedate;

                        if (difference < nearestDifference)
                        {
                            nearestDifference = difference;
                            objdatetimenearestDate = objdatetimedate;
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message); 
            } 
            return objdatetimenearestDate;
        }
        protected void LkBtnDoc1_Click(object sender, EventArgs e)
        {
            bool boolvalidation = true;
            DataTable objDataTable = null; 
            DataRow[] objdatarowdoctorcount = null;
            DataRow[] objdatarow01 = null;
            string stringnoofdoctors = "";
            int intnoofdoctors =0;
            try
            {
                if (txtDepartmentOUID.Text.Trim().Length > 0)
                {
                    objdatarow01 = LoadReportType(txtRptTypeID.Text.ToString());
                    if (objdatarow01 != null && objdatarow01.Length > 0)
                    {
                        stringnoofdoctors = objdatarow01[0]["NO_DOCTORS"].ToString();
                        if (stringnoofdoctors.Length > 0)
                        {
                            intnoofdoctors = Convert.ToInt32(stringnoofdoctors.ToString());
                            if (intnoofdoctors == 0)
                            {
                                boolvalidation = false;
                            }
                        }
                        else
                        {
                            boolvalidation = false;
                        }
                    }
                    else
                    {
                        boolvalidation = false;
                    }
                    if (ViewState["DOCTERLISTFC0001"] != null)
                    {
                        objDataTable = (DataTable)ViewState["DOCTERLISTFC0001"];

                        if (objDataTable != null && objDataTable.Rows.Count > 0)
                        {
                            objdatarowdoctorcount = objDataTable.Select("VERIFY_REF = 'DOCTOR' and (status ='IN-PROGRESS' or status='PENDING')");
                            if ((intnoofdoctors == 0) || (objdatarowdoctorcount != null && objdatarowdoctorcount.Length >= intnoofdoctors))
                            {
                                boolvalidation = false;
                            }

                        }
                    }
                    if (boolvalidation)
                    {
                        ViewState["DocterSelectionPopup"] = "DOCTOR";
                        updtpnldocterselection.Visible = true;
                        LoadDepartmentOU();
                        Docterpopupclearvalues();
                        mdlpopupdoctorselection.Show();
                        lbldoctorselectionTilte.Text = "Search Doctor";

                        pnlverselection.Visible = false;
                        pnlDepartmentOU.Visible = true;
                        pnlMCRNumber.Visible = true;
                        pnlDocempno.Visible = true;
                        pnlDoctorname.Visible = true;
                        pnlSecretaryname.Visible = false;
                    }
                    else
                    {
                        CommonFunctions.ShowMessagebootwithsingquotes(this, "Doctor can't be assign . Please check the Report Type Configuration");
                    }
                }
                else
                {
                    CommonFunctions.ShowMessageboot(this, "Please Select Department OU");
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void LkBtnDoc2_Click(object sender, EventArgs e)
        {
            try
            {
                if (txtDepartmentOUID.Text.Trim().Length > 0)
                {
                    ViewState["DocterSelectionPopup"] = "VERIFIER";
                    updtpnldocterselection.Visible = true;
                    Docterpopupclearvalues();
                    LoadDepartmentOU();
                    mdlpopupdoctorselection.Show();
                    lbldoctorselectionTilte.Text = "Search Verifier";
                    if (rbtndoctor.Checked == true)
                    {
                        pnlverselection.Visible = true;
                        pnlDepartmentOU.Visible = true;
                        pnlMCRNumber.Visible = true;
                        pnlDocempno.Visible = true;
                        pnlDoctorname.Visible = true;
                        pnlSecretaryname.Visible = false;
                    }
                    else if (rbtndepsec.Checked == true)
                    {
                        pnlDepartmentOU.Visible = true;
                        pnlMCRNumber.Visible = false;
                        pnlDocempno.Visible = false;
                        pnlDoctorname.Visible = false;
                        pnlSecretaryname.Visible = true;
                    }
                    else if (rbtnhims.Checked == true)
                    {
                        pnlDepartmentOU.Visible = false;
                        pnlMCRNumber.Visible = false;
                        pnlDocempno.Visible = true;
                        pnlDoctorname.Visible = true;
                        pnlSecretaryname.Visible = false;
                    }
                }
                else
                {
                    CommonFunctions.ShowMessageboot(this, "Please Select Department OU");
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        private DataTable GetDocterList(string stringEXP, string stringtype)
        {
            DataSet objDataSet = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V3";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringServiceType = "";
            try
            {
                stringServiceType = "List2R1V1";
                objDataSet = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringEXP, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                if (interrorcount == 0)
                { 
                    if (objDataSet != null && objDataSet.Tables["t2"] != null)
                    {
                        return objDataSet.Tables["t2"];
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message); 
            }
            finally
            {
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                stringServiceType = null;
            } 
            return null;
        }
        private void AssignDoctertoGrid(string stringdocttype, string stringEMPNo, string stringdocname, string stringMCRno, string stringDepname)
        {
            DataRow objDataRow = null;
            DataTable objOrderTable = null; 
            DataTable objDataTableCopy = null;
            string stringTMSID = string.Empty;
            string stringTMSOID = string.Empty;
            bool boolrecordexist = false; string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                if (ViewState["DOCTERLISTFC0001"] == null)
                {
                    objOrderTable = GetDocterList("and mrasdoc.EMP_NO='DEFAULT'", "DEFAULT");
                    ViewState["DOCTERLISTFC0001"] = objOrderTable;
                }
                else if (ViewState["DOCTERLISTFC0001"] != null)
                {
                    objOrderTable = (DataTable)ViewState["DOCTERLISTFC0001"];
                }
                if (objOrderTable != null)
                {
                    //If Edit Button Clicked then update value 
                    if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                    {
                        if (CheckCongIDExistOrNot(stringdocttype, stringEMPNo.Trim().ToString()))
                        {
                            boolrecordexist = true;

                        }
                        else
                        {
                            CommonFunctions.ShowMessageboot(this, "ID Already Exist");
                        }
                    }
                    else
                    {
                        boolrecordexist = true;
                    } 
                    if (boolrecordexist)
                    {
                        objDataRow = objOrderTable.NewRow();
                        if (objDataRow != null)
                        {
                            objDataRow["BE_ID"] = CommonFunctions.GETBussinessEntity().ToString();
                            objDataRow["EMP_NO"] = stringEMPNo.ToString();
                            objDataRow["NAME"] = stringdocname.ToString();
                            objDataRow["MCR_NO"] = stringMCRno;
                            objDataRow["REJ_REASON"] = "-";
                            objDataRow["REJ_TIME_STAMP"] = "-";
                            objDataRow["REMARKS"] = "-";
                            objDataRow["DEPT_DESC"] = stringDepname;
                            objDataRow["VERIFY_REF"] = stringdocttype;
                            objDataRow["STATUS"] = "PENDING";
                            objDataRow["UNIQUE_ID"] = System.Guid.NewGuid().ToString();
                            objDataRow["DML_INDICATOR"] = "I";
                            objDataRow["reference_2"] = DateTime.Now.ToString();
                            CommonFunctions.AssignAuditLogDetails(ref objDataRow);
                            objOrderTable.Rows.Add(objDataRow);
                        }
                    }

                    ViewState["DOCTERLISTFC0001"] = objOrderTable;
                }
                if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                {
                    objDataTableCopy = objOrderTable.Select("DML_INDICATOR='I' or DML_INDICATOR='U'").CopyToDataTable<DataRow>();

                    BindOrderData(objDataTableCopy);
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objDataRow = null;
                objOrderTable = null;

                objDataTableCopy = null;
                stringTMSID = null;
                stringTMSOID = null;
            }
        }

        private static DataTable SetSequenceNUM(DataTable objOrderTable, string stringdocttype)
        {
            DataTable objOrderTablependingcomp = null;
            DataTable objOrderTablenew = null;
            DataRow[] objdatarow = null;
            try
            {
                if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                { 
                    objOrderTable.DefaultView.Sort = "reference_2 asc ";
                    objOrderTable = objOrderTable.DefaultView.ToTable();

                    objdatarow = objOrderTable.Select("VERIFY_REF = '" + stringdocttype + "' and ( status='COMPLETED'  or status='IN-PROGRESS' or status='PENDING')");
                    if (objdatarow != null && objdatarow.Length > 0)
                    {
                        objOrderTablependingcomp = objdatarow.CopyToDataTable();
                        if (objOrderTablependingcomp != null && objOrderTablependingcomp.Rows.Count > 0)
                        {
                            for (int intCount = 1; intCount < objOrderTablependingcomp.Rows.Count + 1; intCount++)
                            {
                                objOrderTablependingcomp.Rows[intCount - 1]["SEQ_NO"] = intCount;
                            }
                        }
                    }
                    objOrderTablenew = null;
                    if (objOrderTable.Select("VERIFY_REF = '" + stringdocttype + "' and status='REJECTED' ").Length > 0)
                    {
                        objOrderTablenew = objOrderTable.Select("VERIFY_REF = '" + stringdocttype + "' and  status='REJECTED'").CopyToDataTable();
                        if (objOrderTablenew != null && objOrderTablenew.Rows.Count > 0)
                        {
                            for (int intCount = 1; intCount < objOrderTablenew.Rows.Count + 1; intCount++)
                            {
                                objOrderTablenew.Rows[intCount - 1]["SEQ_NO"] = 0;
                            }
                        }
                    }
                    objOrderTable = MergeTables(objOrderTable, objOrderTablependingcomp, objOrderTablenew);  
                    objOrderTable.DefaultView.Sort = "reference_2 asc ";
                    objOrderTable = objOrderTable.DefaultView.ToTable();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objOrderTablependingcomp = null;
                objOrderTablenew = null;
            } 
            return objOrderTable;
        }
        private void BindOrderData(DataTable table)//fixed
        {
            DataView objDataView = null;
            DataTable objDataTableCloneshort = null;
            DataTable objDataTableDOCTOR = null;
            DataTable objDataTableVERIFIER = null;
            DataTable objOrderTable = null;
            try
            {
                if (table != null && table.Rows.Count > 0)
                {
                    objDataView = table.DefaultView;
                    objDataView.Sort = "reference_2 asc";
                    objDataTableCloneshort = objDataView.ToTable();

                    if (objDataTableCloneshort.Select("VERIFY_REF = 'DOCTOR'").Length > 0)
                    {
                        objDataTableDOCTOR = objDataTableCloneshort.Select("VERIFY_REF = 'DOCTOR'").CopyToDataTable();
                        if (objDataTableDOCTOR != null && objDataTableDOCTOR.Rows.Count > 0)
                        {
                            objDataTableDOCTOR = SetSequenceNUM(objDataTableDOCTOR, "DOCTOR");
                            objDataTableDOCTOR.AcceptChanges();
                            gvassigndoctor.DataSource = objDataTableDOCTOR;
                            gvassigndoctor.DataBind();
                        }
                        else
                        {
                            gvassigndoctor.DataSource = null;
                            gvassigndoctor.DataBind();
                        }
                    }

                    if (objDataTableCloneshort.Select("VERIFY_REF = 'VERIFIER'").Length > 0)
                    {
                        objDataTableVERIFIER = objDataTableCloneshort.Select("VERIFY_REF = 'VERIFIER'").CopyToDataTable();
                        if (objDataTableVERIFIER != null && objDataTableVERIFIER.Rows.Count > 0)
                        {
                            objDataTableVERIFIER = SetSequenceNUM(objDataTableVERIFIER, "VERIFIER");
                            gvassignverifier.DataSource = objDataTableVERIFIER;
                            gvassignverifier.DataBind();
                        }
                        else
                        {
                            gvassignverifier.DataSource = null;
                            gvassignverifier.DataBind();
                        }
                    }
                    else
                    {
                        gvassignverifier.DataSource = null;
                        gvassignverifier.DataBind();
                    }
                    objDataTableCloneshort.AcceptChanges();
                }
                else
                {
                    gvassigndoctor.DataSource = null;
                    gvassigndoctor.DataBind();

                    gvassignverifier.DataSource = null;
                    gvassignverifier.DataBind();
                }
                objOrderTable = null;
                objOrderTable = MergeTables(objDataTableDOCTOR, objDataTableDOCTOR, objDataTableVERIFIER);
                ViewState["DOCTERLISTFC0001"] = objOrderTable;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objDataView = null;
                objOrderTable = null;
                objDataTableCloneshort = null;
            }
        }
        public static DataTable MergeTables(DataTable objtable1, DataTable objtable2, DataTable objtable3)
        {
            // Clone the structure of table1
            DataTable objmergedTable = null;
            try
            {
                if (objtable1 != null)
                {
                    objmergedTable = objtable1.Clone();

                    if (objtable2 != null && objtable2.Rows.Count > 0)
                    {
                        // Merge the data from table2 into mergedTable
                        objmergedTable.Merge(objtable2);
                    }
                    if (objtable3 != null && objtable3.Rows.Count > 0)
                    {
                        // Merge the data from table3 into mergedTable
                        objmergedTable.Merge(objtable3);
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            return objmergedTable;
        }
        private bool CheckCongIDExistOrNot(string stringType, string stringValue)
        {
            DataTable objDataTable = new DataTable();
            try
            {
                if (stringValue.Length > 0)
                {
                    if (stringType == "DOCTOR")
                    {
                        if (ViewState["DOCTERLISTFC0001"] != null)
                        {
                            objDataTable = (DataTable)ViewState["DOCTERLISTFC0001"];

                            if (objDataTable != null && objDataTable.Rows.Count > 0)
                            {
                                if (objDataTable.Select("EMP_NO = '" + stringValue + "' and VERIFY_REF = 'DOCTOR' and (status ='IN-PROGRESS' or status='PENDING' or status='COMPLETED')").Length > 0)
                                    return false;
                                else
                                    return true;

                            }
                        }

                    }
                    else
                    {
                        if (ViewState["DOCTERLISTFC0001"] != null)
                        {
                            objDataTable = (DataTable)ViewState["DOCTERLISTFC0001"];

                            if (objDataTable != null && objDataTable.Rows.Count > 0)
                            {
                                if (objDataTable.Select("EMP_NO = '" + stringValue + "' and VERIFY_REF = 'VERIFIER' and (status ='IN-PROGRESS' or status='PENDING' or status='COMPLETED')").Length > 0)
                                    return false;
                                else
                                    return true;
                            }
                        }

                    }
                }
                else
                    return false;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objDataTable = null;
            }
            return false;
        }

        protected void btnDeletedocter_Click(object sender, EventArgs e)
        {
            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            DataTable objDataTableCopy = null;
            string stringCmdArgument = "";
            string stringuniqID = "";
            string stringdocttype = "";
            string[] stringValues = null;
            DataRow[] objDatarow = null;
            try
            {
                //link button id
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringuniqID = stringValues[0];
                            stringdocttype = stringValues[1];

                            if (ViewState["DOCTERLISTFC0001"] != null)
                            {
                                objOrderTable = (DataTable)ViewState["DOCTERLISTFC0001"];
                            }

                            if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                            {
                                objDataRow = objOrderTable.Select("UNIQUE_ID='" + stringuniqID + "' ");
                                if (objDataRow != null && objDataRow.Length > 0)
                                {
                                    if (objDataRow[0]["DML_INDICATOR"].ToString() == "I" || (objDataRow[0]["DML_INDICATOR"].ToString() == "U" && objDataRow[0]["rec_no"].ToString().Length == 0))
                                    {
                                        objDataRow[0].Delete();
                                    }
                                    else
                                    {
                                        objDataRow[0]["DML_INDICATOR"] = "D";
                                    }
                                }
                                ViewState["DOCTERLISTFC0001"] = objOrderTable;

                                objDatarow = objOrderTable.Select("DML_INDICATOR<>'D'");
                                if (objDatarow.Length > 0)
                                {
                                    objDataTableCopy = objOrderTable.Select("DML_INDICATOR<>'D'").CopyToDataTable<DataRow>();
                                }
                                else
                                {
                                    objDataTableCopy = null;
                                }
                                BindOrderData(objDataTableCopy);
                            }

                        }
                    }
                }


            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                objDataTableCopy = null;
                stringCmdArgument = null;
                stringuniqID = null;
                stringdocttype = null;
                stringValues = null;
                objDatarow = null;
            }
        }

        private void LoadDepartmentOU()//fixed
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0011R1V1";
            string stringOrderBy = "short_name asc";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            DataTable objdatatableLoadDepartmentOUDOC = null;

            string stringcondition = "";
            string stringServiceType = "";
            try
            {
                ddlDepartmentOUDoctersel.Items.Clear();
                stringcondition = "And mrd.delmark= 'N'";
                stringServiceType = "List1R1V1";
                if (Session["SSNLOADDEPARTMENTOUDOC"] != null)
                {
                    objdatatableLoadDepartmentOUDOC = (DataTable)Session["SSNLOADDEPARTMENTOUDOC"];
                }
                if ((objdatatableLoadDepartmentOUDOC == null) || (objdatatableLoadDepartmentOUDOC != null && objdatatableLoadDepartmentOUDOC.Rows.Count == 0))
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            if (objDatasetResult.Tables["t1"].Columns.Contains("DEPT_DESC") && objDatasetResult.Tables["t1"].Columns.Contains("DEPT_CODE"))
                            {
                                objdatatableLoadDepartmentOUDOC = GetDistinctRows(objDatasetResult.Tables["t1"], "DEPT_DESC");
                                Session["SSNLOADDEPARTMENTOUDOC"] = objdatatableLoadDepartmentOUDOC;
                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                if (objdatatableLoadDepartmentOUDOC != null && objdatatableLoadDepartmentOUDOC.Rows.Count > 0)
                {
                    ddlDepartmentOUDoctersel.DataTextField = "DEPT_DESC";
                    ddlDepartmentOUDoctersel.DataValueField = "DEPT_CODE";
                    ddlDepartmentOUDoctersel.DataSource = objdatatableLoadDepartmentOUDOC;
                    ddlDepartmentOUDoctersel.DataBind();
                    ddlDepartmentOUDoctersel.Items.Insert(0, new ListItem("", ""));
                }
                else
                {
                    ddlDepartmentOUDoctersel.DataSource = null;
                    ddlDepartmentOUDoctersel.DataBind();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                objdatatableLoadDepartmentOUDOC = null;
                stringcondition = null;
                stringServiceType = null;
            }
        } 
        static DataTable GetDistinctRows(DataTable objdataTable, string columnName)
        {
            try
            {
                var distinctRows = objdataTable.AsEnumerable()
                  .GroupBy(row => row.Field<string>(columnName))
                  .Select(group => group.First())
                  .CopyToDataTable();

                return distinctRows;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
                return null;
            }
           
        }
        private bool SaveAssignDocteorandVerifier(string stringNewReqID, string stringTYPE)//fix
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V3";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataTable objDOCTERLISTable = null;
            DataRow objDataRow = null;
            DataView objDataView = null;
            string stringServiceType1 = "";
            string stringexp = "";
            string stringtype = "";
            string stringDML_INDICATOR = "";
            string stringServiceType2 = "";
            string stringformid1 = "";
            try
            {
                if (ViewState["DOCTERLISTFC0001"] != null)
                {
                    stringServiceType1 = "DEFAULT";
                    stringexp = "";
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count == 0)
                        {
                            objDOCTERLISTable = (DataTable)ViewState["DOCTERLISTFC0001"];
                            objDataView = objDOCTERLISTable.DefaultView;
                            objDataView.Sort = "VERIFY_REF asc";
                            objDOCTERLISTable = objDataView.ToTable();

                            if (objDOCTERLISTable != null && objDOCTERLISTable.Rows.Count > 0)
                            {
                                for (int intIndex = 0; intIndex < objDOCTERLISTable.Rows.Count; intIndex++)
                                {
                                    objDataRow = objDatasetResult.Tables["t2"].NewRow();

                                    objDataRow["BE_ID"] = objDOCTERLISTable.Rows[intIndex]["BE_ID"].ToString();
                                    objDataRow["REQUEST_ID"] = stringNewReqID; 
                                    objDataRow["DEPT_ID"] = objDOCTERLISTable.Rows[intIndex]["DEPT_ID"].ToString();
                                    objDataRow["EMP_NO"] = objDOCTERLISTable.Rows[intIndex]["EMP_NO"].ToString();
                                    objDataRow["NAME"] = objDOCTERLISTable.Rows[intIndex]["NAME"].ToString();
                                    objDataRow["MCR_NO"] = objDOCTERLISTable.Rows[intIndex]["MCR_NO"].ToString();
                                    objDataRow["REJ_REASON"] = objDOCTERLISTable.Rows[intIndex]["REJ_REASON"].ToString();
                                    objDataRow["REJ_TIME_STAMP"] = objDOCTERLISTable.Rows[intIndex]["REJ_TIME_STAMP"].ToString();
                                    objDataRow["REMARKS"] = objDOCTERLISTable.Rows[intIndex]["REMARKS"].ToString();
                                    objDataRow["STATUS"] = objDOCTERLISTable.Rows[intIndex]["STATUS"].ToString();
                                    stringtype = objDOCTERLISTable.Rows[intIndex]["VERIFY_REF"].ToString();
                                    objDataRow["VERIFY_REF"] = stringtype;
                                    objDataRow["UNIQUE_ID"] = objDOCTERLISTable.Rows[intIndex]["UNIQUE_ID"].ToString();
                                    objDataRow["COMPLETED_DATE"] = DateTime.Now;
                                    objDataRow["DML_INDICATOR"] = objDOCTERLISTable.Rows[intIndex]["DML_INDICATOR"].ToString();
                                    objDataRow["reference_2"] = objDOCTERLISTable.Rows[intIndex]["reference_2"].ToString();

                                    objDataRow["CREATED_AT"] = objDOCTERLISTable.Rows[intIndex]["CREATED_AT"].ToString();
                                    objDataRow["CREATED_BY"] = objDOCTERLISTable.Rows[intIndex]["CREATED_BY"].ToString();
                                    objDataRow["CREATED_ON"] = objDOCTERLISTable.Rows[intIndex]["CREATED_ON"];
                                    objDataRow["MODIFIED_AT"] = objDOCTERLISTable.Rows[intIndex]["MODIFIED_AT"].ToString();
                                    objDataRow["MODIFIED_BY"] = objDOCTERLISTable.Rows[intIndex]["MODIFIED_BY"].ToString();
                                    objDataRow["MODIFIED_ON"] = objDOCTERLISTable.Rows[intIndex]["MODIFIED_ON"];
                                    objDataRow["SEQ_NO"] = objDOCTERLISTable.Rows[intIndex]["SEQ_NO"];
                                    string stringDMLIndicator = objDOCTERLISTable.Rows[intIndex]["DML_INDICATOR"].ToString();
                                    if (stringDMLIndicator.ToString() == "I")
                                    {
                                        objDataRow["DOC_SEQ_ID"] = System.Guid.NewGuid().ToString().ToUpper();
                                    }
                                    else if (stringDMLIndicator.ToString() == "U")
                                    {
                                        objDataRow["DOC_SEQ_ID"] = objDOCTERLISTable.Rows[intIndex]["DOC_SEQ_ID"].ToString();
                                    } 
                                    objDatasetResult.Tables["t2"].Rows.Add(objDataRow);
                                }
                            }

                            if (objDatasetResult != null && objDatasetResult.Tables["t2"].Rows.Count > 0)
                            {
                                objDatasetResult.Tables["t2"].AcceptChanges();
                                for (int intIndex = 0; intIndex < objDatasetResult.Tables["t2"].Rows.Count; intIndex++)
                                {
                                    stringDML_INDICATOR = objDatasetResult.Tables["t2"].Rows[intIndex]["DML_INDICATOR"].ToString();
                                    if (chkCOPYQUERY.Checked == false)
                                    {
                                        if (stringDML_INDICATOR == "D")
                                        {
                                            objDatasetResult.Tables["t2"].Rows[intIndex].Delete();
                                        }
                                        else if (stringDML_INDICATOR == "I")
                                        {
                                            objDatasetResult.Tables["t2"].Rows[intIndex].SetAdded();
                                        }
                                        else if (stringDML_INDICATOR == "U")
                                        {
                                            objDatasetResult.Tables["t2"].Rows[intIndex].SetModified();
                                        }
                                    }
                                    else
                                    {
                                        objDatasetResult.Tables["t2"].Rows[intIndex].SetAdded();
                                    }
                                }

                                objDatasetResult = objDatasetResult.GetChanges();
                                stringServiceType2 = "OperationServiceDML";
                                stringformid1 = "FC0001R1V3";
                                objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType2, objDatasetResult.GetChanges(), stringformid1, out int intErrorCount, out string[] stringOutputResult1);
                                if (intErrorCount == 0)
                                {
                                    return true;
                                }
                                else
                                {
                                    Errorpopup(stringOutputResult1);
                                    return false;

                                }
                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }

                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDOCTERLISTable = null;
                objDataRow = null;
                objDataView = null;
                stringServiceType1 = null;
                stringexp = null;
                stringtype = null;
                stringDML_INDICATOR = null;
                stringServiceType2 = null;
                stringformid1 = null;
            }
        }

        private void LoadDocterandVerifiers(string stringRequestID, string stringTYPE)//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V3";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataTable objDataTable = null;
            string stringBoID = "";
            string stringServiceType = "";
            string stringExpression = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (stringRequestID.Length > 0)
                {
                    if ((Session["LoadDocterandVerifiersFC0001"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                    {
                        stringServiceType = "List2R1V1";
                        stringExpression = " and mrasdoc.be_id='" + stringBoID + "' and mrasdoc.request_id='" + stringRequestID + "'";

                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count > 0)
                            {
                                objDataTable = objDatasetResult.Tables["t2"];

                                txtWritingandVerifyingStatus.Text = objDataTable.Rows[0]["VERIFY_STATUS"].ToString();
                            }
                            ViewState["DOCTERLISTFC0001"] = objDataTable;
                            Session["LoadDocterandVerifiersFC0001"] = objDataTable; 
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                            ViewState["DOCTERLISTFC0001"] = null;
                        }
                    }
                    else
                    {
                        if (HttpContext.Current.Session["LoadDocterandVerifiersFC0001"] != null)
                        {
                            objDataTable = (DataTable)HttpContext.Current.Session["LoadDocterandVerifiersFC0001"];
                        }
                    } 
                } 
                if (objDataTable != null && objDataTable.Rows.Count > 0)
                {

                    foreach (DataRow row in objDataTable.Rows)
                    {
                        if (row["DML_INDICATOR"].ToString() != "I")
                        {
                            row["DML_INDICATOR"] = "U";
                        }
                        else
                        {
                            row["DML_INDICATOR"] = "I";
                        }
                    }

                    ViewState["DOCTERLISTFC0001"] = objDataTable;
                    BindOrderData(objDataTable);
                }
                else
                {
                    ViewState["DOCTERLISTFC0001"] = null;
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDataTable = null;
                stringBoID = null;
                stringServiceType = null;
                stringExpression = null;
            }
        }

        #endregion
        #region Attachments

        protected void gvAttachments_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRowView objdatarowattachments = null;
            DataRow objDataRow = null;
            string stringReference1 = "";
            string stringreqID = "";
            try
            {
                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }

                objdatarowattachments = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objdatarowattachments.Row;
                if (objDataRow != null)
                {
                    Button objbtndelete = e.Row.FindControl("btnDeleteAddattachments") as Button;
                    if (objDataRow["CREATED_BY"].ToString() == Session["G11EOSUser_Name"].ToString())
                    {
                        objbtndelete.Enabled = true;
                    }
                    else
                    {
                        objbtndelete.Enabled = false;
                    }
                }

                if (objDataRow != null)
                {
                    stringReference1 = objDataRow["DOC_NAME"].ToString();
                    if (txtReqNo.Text.Trim().Length > 0)
                    {
                        stringreqID = txtReqNo.Text.Trim().ToString().Replace('/', '_');
                        if (stringreqID.Length > 0)
                        {
                            stringReference1 = stringreqID + "_" + stringReference1;
                        }
                    }
                    if (stringReference1 != null && stringReference1.Trim().Length > 0)
                    { ((LinkButton)e.Row.FindControl("lnkbtnattachmentid")).Text = stringReference1; }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objdatarowattachments = null;
                objDataRow = null;
                stringReference1 = null;
                stringreqID = null;
            }
        }
        protected void lnkbtnaddattachments_Click(object sender, EventArgs e)
        {
            DataTable objDataTableAddAttachments = new DataTable();
            string stringBoID = "";
            string stringCategory = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            bool boolAllowedExtention = false;
            bool boolCHECKRecordExist = true;
            string stringExtention = "";
            string stringFileName = "";
            string stringpasscode = "";
            string[] stringExtentionAllowed;
            byte[] objbyteArray = null;
            int intFileSize, intMaxFileSize;
            int intErrorCount = 0;
            DataRow[] objdatarow = null;
            string[] stringOutputResult = null;
            string stringLogFileDateFormat, stringuserID, stringATTACHID = "";

            string stringSMRId = "";
            DataRow[] objdatarowSMR = null;
            bool boolexist = true;
            DataRow objDataRow = null;
            string stringHRN = "";
            string stringPath = "";
            string stringFileNameID = "";
            try
            {
                if (txtHRN.Text.Trim().Length > 0 && txtName.Text.Trim().Length > 0)
                {
                    if (FileUpload1.PostedFile != null && FileUpload1.HasFile)
                    {
                        stringFileName = FileUpload1.FileName;
                        if (stringFileName.Contains("'"))
                        {
                            stringFileName = stringFileName.ToString().Replace("'", "");
                        } 
                        if (ddlCategory.SelectedItem != null && ddlCategory.SelectedValue.Length > 0)
                        {
                            if (ddlCategory.SelectedItem != null)
                            {
                                stringCategory = ddlCategory.SelectedItem.Value;
                            }

                            if (Session["ADD_ATTACHMENTS"] != null)
                            { objDataTableAddAttachments = (DataTable)Session["ADD_ATTACHMENTS"]; }
                            if (objDataTableAddAttachments != null && objDataTableAddAttachments.Rows.Count > 0)
                            {
                                if (stringCategory == "SUPPORTING DOCUMENT" || stringCategory == "COMPLETED MEDICAL REPORTS")
                                {
                                    objdatarowSMR = objDataTableAddAttachments.Select("SMR_ID <>'" + stringSMRId + "'");
                                    if (objdatarowSMR.Length > 0)
                                    {
                                        boolexist = false;
                                    }
                                }
                            }
                            if (boolexist)
                            {

                                double doubleSizeInMB = (double)FileUpload1.PostedFile.ContentLength / (1024.0 * 1024.0);
                                if (FileUpload1.PostedFile.FileName.Trim().Length > 0)
                                {
                                    if (Session["ADD_ATTACHMENTS"] != null)
                                    { objDataTableAddAttachments = (DataTable)Session["ADD_ATTACHMENTS"]; }
                                    else
                                    {
                                        Loadattachment("123", "UNLOAD");
                                        if (Session["ADD_ATTACHMENTS"] != null)
                                        { objDataTableAddAttachments = (DataTable)Session["ADD_ATTACHMENTS"]; }
                                    }

                                    if (objDataTableAddAttachments != null)
                                    {
                                        if (objDataTableAddAttachments != null && objDataTableAddAttachments.Rows.Count > 0)
                                        {
                                            objdatarow = objDataTableAddAttachments.Select("DOC_NAME = '" + stringFileName.ToString() + "'");
                                            if (objdatarow != null && objdatarow.Length > 0)
                                            {
                                                boolCHECKRecordExist = false;
                                            }
                                        }
                                        if (boolCHECKRecordExist)
                                        {
                                            stringExtention = Path.GetExtension(FileUpload1.PostedFile.FileName).ToLower();
                                            stringExtentionAllowed = ConfigurationManager.AppSettings["AttachmentsExtentionAllowed"].ToString().Split('|');
                                            foreach (string stringFilter in stringExtentionAllowed)
                                            {
                                                if (stringExtention == stringFilter)
                                                {
                                                    boolAllowedExtention = true;
                                                }
                                            }
                                            if (boolAllowedExtention)
                                            {
                                                intMaxFileSize = Convert.ToInt32(ConfigurationManager.AppSettings["AttachmentsImgSize"].ToString());
                                                intFileSize = FileUpload1.FileBytes.Length / (1024 * 1024);
                                                if (intFileSize < intMaxFileSize)
                                                {
                                                    stringATTACHID = DateTime.Now.ToString("HHmmssff").ToUpper();
                                                    stringuserID = HttpContext.Current.Session["G11EOSUser_Name"] != null ? HttpContext.Current.Session["G11EOSUser_Name"].ToString() : "GUEST";

                                                    stringLogFileDateFormat = ConfigurationManager.AppSettings["LogFileDateFormat"].ToString();

                                                    stringPath = ConfigurationManager.AppSettings["AttachmentPathUploadPath"].ToString() + @"\" + DateTime.Now.ToString(stringLogFileDateFormat) + @"\" + stringuserID + @"\";
                                                    if (!System.IO.Directory.Exists(stringPath))
                                                        System.IO.Directory.CreateDirectory(stringPath);
                                                    stringPath += stringFileName;
                                                    FileUpload1.PostedFile.SaveAs(stringPath);
                                                    objbyteArray = File.ReadAllBytes(stringPath);


                                                    if (objDataTableAddAttachments != null)
                                                    {
                                                        objDatasetAppsVariables = (DataSet)Session["objDatasetlocaldeclaration"];
                                                        objDatasetAppsVariables.Tables[0].Rows[0]["FORM_ID"] = "FC0001R1V1_COMPLETEREPORT";
                                                        stringFileNameID = stringFileName ;
                                                         
                                                        clsCertificateValidation.EnableTrustedHosts();
                                                        using (GSFileTransferService.FileTransferServiceClient objFileTransfer1 = new GSFileTransferService.FileTransferServiceClient())
                                                        {
                                                            objFileTransfer1.UploadFileR1V2(objbyteArray, stringFileNameID, stringATTACHID, objDatasetAppsVariables, out intErrorCount, out stringOutputResult);
                                                            if (objFileTransfer1 != null)
                                                                objFileTransfer1.Close();
                                                        }
                                                        if (intErrorCount != 0)
                                                        {
                                                            Errorpopup(stringOutputResult);
                                                        }
                                                        else
                                                        {
                                                            objDataRow = objDataTableAddAttachments.NewRow();

                                                            stringHRN = txtHRN.Text.Trim();
                                                            stringpasscode = stringHRN.Substring(stringHRN.Length - 4);

                                                            objDataRow["BE_ID"] = stringBoID;
                                                            objDataRow["ATTACH_ID"] = stringATTACHID.ToString().ToUpper();
                                                            objDataRow["DOC_NAME"] = stringFileNameID;
                                                            objDataRow["DOC_SIZE"] = intFileSize;
                                                            objDataRow["DOC_TYPE"] = stringExtention;
                                                            if (ddlCategory.SelectedItem != null)
                                                            {
                                                                objDataRow["CATEGORY"] = ddlCategory.SelectedItem.Value.ToString();
                                                            }
                                                            objDataRow["FORM_ID"] = "FC0001R1V1_COMPLETEREPORT";
                                                            objDataRow["TRANS_ID"] = txtReqNo.Text.Trim().ToString();
                                                            objDataRow["DELMARK"] = "N";
                                                            objDataRow["REMARKS"] = txtRemark.Text.Trim();

                                                            if (ddlCategory.SelectedItem != null && ddlCategory.SelectedItem.Value == "COMPLETED MEDICAL REPORTS")
                                                            {
                                                                objDataRow["REPORT_NAME"] = "MRTS – Medical Report";
                                                            }
                                                            else if (ddlCategory.SelectedItem != null && ddlCategory.SelectedItem.Value == "SUPPORTING DOCUMENT")
                                                            {
                                                                objDataRow["REPORT_NAME"] = "MRTS – MR Request";
                                                                objDataRow["INCLUDED_IN_REPORT"] = "Y";
                                                            }
                                                            else
                                                            {
                                                                objDataRow["INCLUDED_IN_REPORT"] = "N";
                                                            }
                                                            objDataRow["DML_INDICATOR"] = "I";
                                                            CommonFunctions.AssignAuditLogDetails(ref objDataRow);

                                                            objDataTableAddAttachments.Rows.Add(objDataRow);
                                                            Session["ADD_ATTACHMENTS"] = objDataTableAddAttachments;
                                                        }
                                                    }
                                                    TABActive(4);
                                                    BindAttachments(objDataTableAddAttachments);

                                                }
                                                else
                                                {
                                                    CommonFunctions.ShowMessageboot(this, "File Size is too large"); 
                                                }
                                            }
                                            else
                                            {
                                                CommonFunctions.ShowMessageboot(this, "File Extention is not valid"); 
                                            }
                                        }
                                        else
                                        {
                                            CommonFunctions.ShowMessageboot(this, "File already exist"); 
                                        }

                                    }
                                    else
                                    {
                                        lbltotalrecAttachments.InnerText = "0";
                                        gvAttachments.DataSource = null;
                                        gvAttachments.DataBind();
                                    }

                                    ddlCategory.SelectedIndex = 0;
                                    txtRemark.Text = "";
                                    ddlCategory.Focus();

                                    TABActive(4);
                                }
                            }
                            else
                            {
                                TABActive(4);
                                CommonFunctions.ShowMessageboot(this, "Complete Medical Report ,Already Forward to SMR");
                            }
                        }
                        else
                        {
                            TABActive(4);
                            CommonFunctions.ShowMessageboot(this, "Please Choose a Category");
                        }
                    }
                    else
                    {
                        TABActive(4);
                        CommonFunctions.ShowMessageboot(this, "Please select a File for Attachment");
                    }
                }
                else
                {
                    TABActive(1);
                    CommonFunctions.ShowMessageboot(this, "Please fill patient details");
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringExtention = null;
                stringFileName = null;
                stringpasscode = null;
                intErrorCount = 0;
                objdatarow = null;
                stringOutputResult = null;
                stringSMRId = null;
                objdatarowSMR = null;
                objDataRow = null;
                stringHRN = null;
                stringPath = null;
                stringFileNameID = null;
            }
        }
        protected void lnkbtnattachmentid_Click(object sender, EventArgs e)
        {
            string[] stringOutputResult = null;
            DataSet objDatasetAppsVariables = (DataSet)HttpContext.Current.Session["objDatasetlocaldeclaration"];
            objDatasetAppsVariables.Tables[0].Rows[0]["FORM_ID"] = "FINT0003R1V1";
            string stringCmdArgument = "";
            long longlength;
            string stringFilepath = "";
            byte[] objbyteArray = null;
            string stringreqID = "";
            string stringBE_ID, stringFORM_ID, stringTRANS_ID, stringDOC_NAME, stringDOC_TYPE, stringATTACH_ID, StringFileName = string.Empty;
            string[] stringValues = null;
            try
            {
                if (sender != null)
                { 
                    LinkButton objLinkButton = (LinkButton)sender;

                    if (objLinkButton != null)
                    {
                        StringFileName = objLinkButton.Text;
                        stringCmdArgument = ((LinkButton)sender).CommandArgument;
                        if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                        {
                            stringValues = stringCmdArgument.Split(',');
                            if (stringValues != null && stringValues.Length >= 6)
                            {
                                stringBE_ID = stringValues[0];
                                stringFORM_ID = stringValues[1];
                                stringTRANS_ID = stringValues[2];
                                stringDOC_NAME = stringValues[3];
                                stringDOC_TYPE = stringValues[4];
                                stringATTACH_ID = stringValues[5];
                                StringFileName = stringBE_ID + @"\" + stringFORM_ID + @"\" + stringATTACH_ID + @"\" + stringDOC_NAME;
                            }

                        }

                        clsCertificateValidation.EnableTrustedHosts();
                        using (GSFileTransferService.FileTransferServiceClient objFileTransfer1 = new GSFileTransferService.FileTransferServiceClient())
                        {
                            objFileTransfer1.DownloadFileFromServer(ref objDatasetAppsVariables, ref StringFileName, out longlength, out stringFilepath, out stringOutputResult, out objbyteArray);
                            if (objFileTransfer1 != null)
                                objFileTransfer1.Close();
                        }

                        if (stringFilepath != null && stringFilepath.Length > 0)
                        {
                            if (txtReqNo.Text.Trim().Length > 0)
                            {
                                stringreqID = txtReqNo.Text.Trim().ToString().Replace('/', '_');
                                StringFileName = stringreqID + "_" + StringFileName;
                            }
                            CommonFunctions.OpenExportedFileR1V1(this, objbyteArray, StringFileName.ToString(), "ATTACHMENTS");

                            TABActive(4);
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                        }
                    }

                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringOutputResult = null;
                stringCmdArgument = null;
                stringFilepath = null;
                stringreqID = null;
                stringBE_ID = null;
                stringFORM_ID = null;
                stringTRANS_ID = null;
                stringDOC_NAME = null;
                stringDOC_TYPE = null;
                stringATTACH_ID = null;
                StringFileName = null;
                stringValues = null;
            }

        }
        protected void btnDeleteAddattachments_Click(object sender, EventArgs e)
        {
            DataTable objDataTableCopy = null;
            string[] stringValues = null;
            DataTable objDataTableATTACHMENTs = null;
            string stringCmdArgument = "";
            string stringCondition = "";
            DataRow[] objDataRow = null;
            DataRow[] objDatarow = null;
            DataRow[] objDatarowdel = null;
            string stringBE_ID, stringFORM_ID, stringTRANS_ID, stringDOC_NAME, stringDOC_TYPE, stringATTACH_ID, StringFileName = string.Empty;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length >= 6)
                        {
                            stringBE_ID = stringValues[0];
                            stringFORM_ID = stringValues[1];
                            stringTRANS_ID = stringValues[2];
                            stringDOC_NAME = stringValues[3];
                            stringDOC_TYPE = stringValues[4];
                            stringATTACH_ID = stringValues[5];

                            if (stringATTACH_ID != null && stringDOC_NAME.Trim().Length > 0)
                            {
                                if (Session["ADD_ATTACHMENTS"] != null)
                                {
                                    objDataTableATTACHMENTs = (DataTable)Session["ADD_ATTACHMENTS"];
                                    if (objDataTableATTACHMENTs != null && objDataTableATTACHMENTs.Rows.Count > 0)
                                    {//new
                                        stringCondition = "ATTACH_ID='" + stringATTACH_ID + "'and TRANS_ID='" + stringTRANS_ID + "'";
                                        objDataRow = objDataTableATTACHMENTs.Select(stringCondition);
                                        if (objDataRow != null && objDataRow.Length > 0)
                                        {
                                            if (objDataRow[0]["DML_INDICATOR"].ToString() == "I" || (objDataRow[0]["DML_INDICATOR"].ToString() == "U" && objDataRow[0]["rec_no"].ToString().Length == 0))
                                            {
                                                objDataRow[0].Delete();
                                            }
                                            else
                                            {
                                                objDataRow[0]["DML_INDICATOR"] = "D";
                                            }
                                        }

                                        Session["ADD_ATTACHMENTS"] = objDataTableATTACHMENTs;
                                        objDatarow = objDataTableATTACHMENTs.Select("DML_INDICATOR<>'D'");
                                        if (objDatarow.Length > 0)
                                        {
                                            objDataTableCopy = objDataTableATTACHMENTs.Select("DML_INDICATOR<>'D'").CopyToDataTable<DataRow>();
                                        }
                                        else
                                        {
                                            objDataTableCopy = null;
                                        }

                                        BindAttachments(objDataTableCopy);

                                        objDatarowdel = objDataTableATTACHMENTs.Select("DML_INDICATOR='D'");
                                        if (objDatarowdel.Length > 0)
                                        {
                                            SaveAttachments(txtReqNo.Text.Trim(), "");
                                            Loadattachment(txtReqNo.Text.Trim(), "NONLOAD");
                                        }
                                    }
                                }
                            }

                        }
                    }
                }


            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDataTableCopy = null;
                stringValues = null;
                objDataTableATTACHMENTs = null;
                stringCmdArgument = null;
                stringCondition = null;
                objDataRow = null;
                objDatarow = null;
                objDatarowdel = null;
                stringBE_ID = null;
                stringFORM_ID = null;
                stringTRANS_ID = null;
                stringDOC_NAME = null;
                stringDOC_TYPE = null;
                stringATTACH_ID = null;
                StringFileName = null;
            }
        }
        protected void lnkbtnaddattachmentsclear_Click(object sender, EventArgs e)
        {
            try
            {
                lbltotalrecAttachments.InnerText = "0";
                Session["ADD_ATTACHMENTS"] = null;
                gvAttachments.DataSource = null;
                gvAttachments.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        private void Loadattachment(string stringRequestID, string stringTYPE)//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataTable objDataTable = null;
            string stringBoID = "";
            string stringServiceType = "";
            string stringExpression = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if ((Session["LoadattachmentFC0001"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                {

                    stringServiceType = "List18R1V1";
                    stringExpression = " and dach.be_id='" + stringBoID + "' and dach.trans_id='" + stringRequestID + "' And dach.delmark= 'N'";

                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t18"] != null && objDatasetResult.Tables["t18"].Rows.Count > 0)
                        {
                            objDataTable = objDatasetResult.Tables["t18"];

                            foreach (DataRow row in objDataTable.Rows)
                            {
                                if (row["DML_INDICATOR"].ToString() != "I")
                                {
                                    row["DML_INDICATOR"] = "U";
                                }
                                else
                                {
                                    row["DML_INDICATOR"] = "I";
                                }
                            }

                        }
                        Session["ADD_ATTACHMENTS"] = objDatasetResult.Tables["t18"];

                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        Session["ADD_ATTACHMENTS"] = null;
                    }
                }
                else
                {
                    if (HttpContext.Current.Session["LoadattachmentFC0001"] != null)
                    {
                        objDataTable = (DataTable)HttpContext.Current.Session["LoadattachmentFC0001"];
                    }
                }

                if (objDataTable != null && objDataTable.Rows.Count > 0)
                {
                    Session["ADD_ATTACHMENTS"] = objDataTable;
                    BindAttachments(objDataTable);
                }
                else
                {
                    lbltotalrecAttachments.InnerText = "0";
                    //Session["ADD_ATTACHMENTS"] = null;
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDataTable = null;
                stringBoID = null;
                stringServiceType = null;
                stringExpression = null;
            }
        }

        private void BindAttachments(DataTable objDataTable)
        {
            DataTable objdatatableatt = null;
            DataRow[] objDatarowdel = null;
            try
            {
                if (objDataTable != null && objDataTable.Rows.Count > 0)
                {
                    objDatarowdel = objDataTable.Select("CATEGORY <> 'COMPLETED MEDICAL REPORTS'");
                    if (objDatarowdel.Length > 0)
                    {
                        objdatatableatt = objDataTable.Select("CATEGORY <> 'COMPLETED MEDICAL REPORTS'").CopyToDataTable();
                    }
                    if (objdatatableatt != null && objdatatableatt.Rows.Count > 0)
                    {
                        lbltotalrecAttachments.InnerText = objdatatableatt.Rows.Count.ToString();
                    }
                    else
                    {
                        lbltotalrecAttachments.InnerText = "0";
                    }
                }
                gvAttachments.DataSource = objdatatableatt;
                gvAttachments.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objdatatableatt = null;
                objDatarowdel = null;
            }
        }

        private bool SaveAttachments(string stringRequestID, string stringTYPE)
        {
            DataTable objDataTableAddReports = null;
            bool boolStatus = true;
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataSet objDatasetResult1 = null;
            string stringformid = "FC0001R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            string stringBoID = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            DataRow objDataRow = null;
            bool boolContinue = true;
            int intErrorCount = 0;
            string stringDMLIndicator = "";
            string stringbeid = "";
            DataSet objDatasetResult2 = null;
            DataTable dtCopy = null;
            DataTable objdatatable = null;
            string stringcustemerid3 = "";
            string stringServiceType1 = "";
            string stringformid1 = "";
            try
            {
                if (Session["ADD_ATTACHMENTS"] != null)
                { objDataTableAddReports = (DataTable)Session["ADD_ATTACHMENTS"]; }


                if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t18"].Rows.Count == 0)
                        {
                            for (int intIndex = 0; intIndex < objDataTableAddReports.Rows.Count; intIndex++)
                            {
                                objDataRow = objDatasetResult.Tables["t18"].NewRow();

                                stringDMLIndicator = objDataTableAddReports.Rows[intIndex]["DML_INDICATOR"].ToString();

                                if (stringDMLIndicator != null && stringDMLIndicator.Trim().Length > 0)
                                {
                                    if (boolContinue)
                                    {
                                        stringbeid = CommonFunctions.GETBussinessEntity();
                                        objDataRow["BE_ID"] = stringbeid;
                                        objDataRow["ATTACH_ID"] = objDataTableAddReports.Rows[intIndex]["ATTACH_ID"].ToString();
                                        objDataRow["DOC_NAME"] = objDataTableAddReports.Rows[intIndex]["DOC_NAME"].ToString();
                                        objDataRow["DOC_SIZE"] = objDataTableAddReports.Rows[intIndex]["DOC_SIZE"].ToString();
                                        objDataRow["DOC_TYPE"] = objDataTableAddReports.Rows[intIndex]["DOC_TYPE"].ToString();
                                        objDataRow["CATEGORY"] = objDataTableAddReports.Rows[intIndex]["CATEGORY"].ToString();
                                        objDataRow["FORM_ID"] = objDataTableAddReports.Rows[intIndex]["FORM_ID"].ToString();
                                        if (stringRequestID != null && stringRequestID.Trim().Length > 0 && stringRequestID.Trim().ToUpper() != "NULL") { objDataRow["TRANS_ID"] = stringRequestID.Trim().ToUpper(); }
                                        else { objDataRow["TRANS_ID"] = txtReqNo.Text.Trim().ToUpper(); }
                                        objDataRow["DELMARK"] = objDataTableAddReports.Rows[intIndex]["DELMARK"].ToString();
                                        objDataRow["REMARKS"] = objDataTableAddReports.Rows[intIndex]["REMARKS"].ToString();

                                        objDataRow["REPORT_NAME"] = objDataTableAddReports.Rows[intIndex]["REPORT_NAME"].ToString();
                                        objDataRow["INCLUDED_IN_REPORT"] = objDataTableAddReports.Rows[intIndex]["INCLUDED_IN_REPORT"].ToString();

                                        objDataRow["REFERENCE_5"] = stringDMLIndicator;
                                         
                                        CommonFunctions.AssignAuditLogDetails(ref objDataRow);

                                        objDatasetResult.Tables["t18"].Rows.Add(objDataRow);

                                        objDatasetResult.Tables["t18"].Rows[0].RowState.ToString();
                                    }
                                }


                            }
                            if (objDatasetResult != null && objDatasetResult.Tables["t18"] != null && objDatasetResult.Tables["t18"].Rows.Count > 0)
                            {
                                objdatatable = objDatasetResult.Tables["t18"];
                                if (objDatasetResult.Tables["t18"].Select("REFERENCE_5 <> 'U'").Length > 0)
                                {
                                    objdatatable = objDatasetResult.Tables["t18"].Select("REFERENCE_5 <> 'U'").CopyToDataTable();
                                    dtCopy = objdatatable.Copy();
                                    objDatasetResult2 = new DataSet();
                                    objDatasetResult2.Tables.Add(dtCopy);
                                    objDatasetResult2.Tables[0].TableName = "t18";
                                    objDatasetResult2.AcceptChanges();

                                    for (int intIndex = 0; intIndex < objDatasetResult2.Tables["t18"].Rows.Count; intIndex++)
                                    {
                                        stringcustemerid3 = objDatasetResult2.Tables["t18"].Rows[intIndex]["REFERENCE_5"].ToString();
                                        if (chkCOPYQUERY.Checked == false)
                                        {
                                            if (stringcustemerid3 == "D")
                                            {
                                                objDatasetResult2.Tables["t18"].Rows[intIndex].Delete();
                                            }
                                            else if (stringcustemerid3 == "I")
                                            {
                                                objDatasetResult2.Tables["t18"].Rows[intIndex].SetAdded();
                                            }
                                            else if (stringcustemerid3 == "U")
                                            {
                                                objDatasetResult2.Tables["t18"].Rows[intIndex].SetModified();
                                            }
                                        }
                                        else
                                        {
                                            objDatasetResult2.Tables["t18"].Rows[intIndex].SetAdded();
                                        }
                                    }

                                    objDatasetResult = objDatasetResult2.GetChanges();
                                    stringServiceType1 = "OperationServiceDML";
                                    stringformid1 = "FC0001R1V1";
                                    objDatasetResult1 = CommonFunctions.DataManipulationR1V1(stringServiceType1, objDatasetResult2.GetChanges(), stringformid1, out intErrorCount, out string[] stringOutputResult1);
                                    if (intErrorCount == 0)
                                    {
                                        objDatasetResult2 = null;
                                        boolStatus = true;
                                    }
                                    else
                                    {
                                        Errorpopup(stringOutputResult1);
                                        boolStatus = false;

                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        return false;
                    }
                }

                return boolStatus;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDataTableAddReports = null;
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                objDatasetResult1 = null;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
                stringBoID = null;
                objDataRow = null;
                stringDMLIndicator = null;
                stringbeid = null;
                objDatasetResult2 = null;
                dtCopy = null;
                objdatatable = null;
                stringcustemerid3 = null;
                stringServiceType1 = null;
                stringformid1 = null;
            }
            return false;
        }
        #endregion
        #region WaiverInformations
        private void LoadWaiverInformations(DataRow objDataRow)
        {
            string stringddlWApp = "";
            string stringddlFinancialdte = "";
            string stringddldoctorwaiver = "";
            string stringddlhospitalrwaiver = "";
            string stringddlDoctorDeclineReason = "";
            string stringddlHospitalDeclineReason = "";
            string stringddlWApproved = "";
            try
            {
                //waiver informations LOAD-------------------------------

                stringddldoctorwaiver = objDataRow["DOCTOR_WAIVER"].ToString();
                if (ddldoctorwaiver.Items.FindByValue(stringddldoctorwaiver) != null)
                {
                    ddldoctorwaiver.ClearSelection();
                    ddldoctorwaiver.Items.FindByValue(stringddldoctorwaiver).Selected = true;
                }
                if (stringddldoctorwaiver == "APPROVED" || stringddldoctorwaiver == "Declined")
                {
                    ddldoctorwaiver.Enabled = false;
                    ddldoctorwaiver.CssClass = "form-control ReadOnly";
                }
                else
                {
                    ddldoctorwaiver.Enabled = true;
                    ddldoctorwaiver.CssClass = "form-control ReadOnly";
                }

                stringddlhospitalrwaiver = objDataRow["HOSPITAL_WAIVER"].ToString();
                if (ddlhospitalrwaiver.Items.FindByValue(stringddlhospitalrwaiver) != null)
                {
                    ddlhospitalrwaiver.ClearSelection();
                    ddlhospitalrwaiver.Items.FindByValue(stringddlhospitalrwaiver).Selected = true;
                }
                if (stringddlhospitalrwaiver == "APPROVED" || stringddlhospitalrwaiver == "Declined")
                {
                    ddlhospitalrwaiver.Enabled = false;
                    ddlhospitalrwaiver.CssClass = "form-control ReadOnly";
                }
                else
                {
                    ddlhospitalrwaiver.Enabled = true;
                    ddlhospitalrwaiver.CssClass = "form-control ReadOnly";
                }

                stringddlWApp = objDataRow["WAIVER_STATUS_1"].ToString();
                if (ddlWApp.Items.FindByValue(stringddlWApp) != null)
                {
                    ddlWApp.ClearSelection();
                    ddlWApp.Items.FindByValue(stringddlWApp).Selected = true;
                    ddlWApp_SelectedIndexChanged(ddlWApp, null);
                }
                if (stringddlWApp == "YES")
                {
                    ddlWApp.Enabled = false;
                    ddlWApp.CssClass = "form-control ReadOnly";
                }

                txtWaiverrmk.Text = objDataRow["REMARKS"].ToString();

                stringddlFinancialdte = objDataRow["FINANCE_STATUS"].ToString();
                if (ddlFinancialdte.Items.FindByValue(stringddlFinancialdte) != null)
                {
                    ddlFinancialdte.ClearSelection();
                    ddlFinancialdte.Items.FindByValue(stringddlFinancialdte).Selected = true;
                }
                if (objDataRow["WAIVER_START_DATE"] != null && objDataRow["WAIVER_START_DATE"].ToString().Trim().Length > 0)
                { txtFinAssformdte.Text = Convert.ToDateTime(objDataRow["WAIVER_START_DATE"]).ToString("dd-MM-yyyy"); }

                if (objDataRow["WAIVER_END_DATE"] != null && objDataRow["WAIVER_END_DATE"].ToString().Trim().Length > 0)
                { txtFinAsstodte.Text = Convert.ToDateTime(objDataRow["WAIVER_END_DATE"]).ToString("dd-MM-yyyy"); }

                

                if (objDataRow["DO_ACTION_DATE"] != null && objDataRow["DO_ACTION_DATE"].ToString().Trim().Length > 0)
                { txtDoctorActionDate.Text = Convert.ToDateTime(objDataRow["DO_ACTION_DATE"]).ToString("dd-MM-yyyy"); }

                if (objDataRow["HOS_ACTION_DATE"] != null && objDataRow["HOS_ACTION_DATE"].ToString().Trim().Length > 0)
                { txtHospitalActionDate.Text = Convert.ToDateTime(objDataRow["HOS_ACTION_DATE"]).ToString("dd-MM-yyyy"); }

                stringddlDoctorDeclineReason = objDataRow["DO_DECLINE_REASON"].ToString();
                if (ddlDoctorDeclineReason.Items.FindByValue(stringddlDoctorDeclineReason) != null)
                {
                    ddlDoctorDeclineReason.ClearSelection();
                    ddlDoctorDeclineReason.Items.FindByValue(stringddlDoctorDeclineReason).Selected = true;
                }
                stringddlHospitalDeclineReason = objDataRow["HOS_DECLINE_REASON"].ToString();
                if (ddlHospitalDeclineReason.Items.FindByValue(stringddlHospitalDeclineReason) != null)
                {
                    ddlHospitalDeclineReason.ClearSelection();
                    ddlHospitalDeclineReason.Items.FindByValue(stringddlHospitalDeclineReason).Selected = true;
                }

                stringddldoctorwaiver = objDataRow["DOCTOR_WAIVER"].ToString();
                if (ddldoctorwaiver.Items.FindByValue(stringddldoctorwaiver) != null)
                {
                    ddldoctorwaiver.ClearSelection();
                    ddldoctorwaiver.Items.FindByValue(stringddldoctorwaiver).Selected = true;
                }
                if (stringddldoctorwaiver.ToUpper() == "APPROVED" || stringddldoctorwaiver.ToUpper() == "DECLINED")
                {
                    ddldoctorwaiver.Enabled = false;
                    ddldoctorwaiver.CssClass = "form-control ReadOnly";
                }

                stringddlhospitalrwaiver = objDataRow["HOSPITAL_WAIVER"].ToString();
                if (ddlhospitalrwaiver.Items.FindByValue(stringddlhospitalrwaiver) != null)
                {
                    ddlhospitalrwaiver.ClearSelection();
                    ddlhospitalrwaiver.Items.FindByValue(stringddlhospitalrwaiver).Selected = true;
                }
                if (stringddlhospitalrwaiver.ToUpper() == "APPROVED" || stringddlhospitalrwaiver.ToUpper() == "DECLINED")
                {
                    ddlhospitalrwaiver.Enabled = false;
                    ddlhospitalrwaiver.CssClass = "form-control ReadOnly";
                }

                stringddlWApproved = objDataRow["WAIVER_APPROVED"].ToString();
                if (ddlWApproved.Items.FindByValue(stringddlWApproved) != null)
                {
                    ddlWApproved.ClearSelection();
                    ddlWApproved.Items.FindByValue(stringddlWApproved).Selected = true;
                }
                if (stringddlWApproved == "FULLWAIVER")
                {
                    ddlhospitalrwaiver.Enabled = false;
                    ddlhospitalrwaiver.CssClass = "form-control ReadOnly";
                    ddldoctorwaiver.Enabled = false;
                    ddldoctorwaiver.CssClass = "form-control ReadOnly";
                    LoadPaymentReceiptsGrid(txtReqID.Text.Trim(), 0, "LOAD", "WAIVER");
                }
                if (stringddlWApp == "YES" && stringddlWApproved == "PENDING")
                {
                    LoadPaymentReceiptsGrid(txtReqID.Text.Trim(), 0, "LOAD", "HALFWAIVER");
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringddlWApp = null;
                stringddlFinancialdte = null;
                stringddldoctorwaiver = null;
                stringddlhospitalrwaiver = null;
                stringddlDoctorDeclineReason = null;
                stringddlHospitalDeclineReason = null;
                stringddlWApproved = null;
            }
        }
        private bool SavewaiverDetails(string stringDMLIND, string stringNewReqID, string stringTYPE)//fix
        {
            int interrorcount = 0;
            int intTotalRecord = 0;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V3";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringServiceType = "";
            DataRow objdatarow = null;
            string stringServiceType1 = "";
            string stringexp = "";
            try
            {
                if (stringNewReqID.Length > 0)
                {
                    stringServiceType1 = "DEFAULT";
                    stringexp = "";
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                    if (objDatasetResult != null && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count == 0)
                    {
                        objdatarow = objDatasetResult.Tables["t1"].NewRow();
                        objdatarow["BE_ID"] = CommonFunctions.GETBussinessEntity().ToString();
                        objdatarow["Request_ID"] = stringNewReqID;
                        if (ddlWApp.SelectedItem != null)
                        {
                            objdatarow["WAIVER_STATUS"] = ddlWApp.SelectedItem.Value.ToUpper();
                        }
                        if (ddlFinancialdte.SelectedItem != null)
                        { objdatarow["FINANCE_STATUS"] = ddlFinancialdte.SelectedItem.Value.ToUpper(); }

                        int year = DateTime.Now.Year;
                        if (txtFinAssformdte.Text.Length > 0)
                        {
                            objdatarow["START_DATE"] = CommonFunctions.ConvertToDateTime(txtFinAssformdte.Text, "dd-MM-yyyy");
                        }
                        else
                        {
                            DateTime startingDateOfYear = new DateTime(year, 1, 1);
                            string stringstartingDateOfYear = startingDateOfYear.ToString("dd-MM-yyyy");
                            objdatarow["START_DATE"] = CommonFunctions.ConvertToDateTime(stringstartingDateOfYear, "dd-MM-yyyy");
                        }
                        if (txtFinAsstodte.Text.Length > 0)
                        {
                            objdatarow["END_DATE"] = CommonFunctions.ConvertToDateTime(txtFinAsstodte.Text, "dd-MM-yyyy");
                        }
                        else
                        {
                            DateTime EndingDateOfYear = new DateTime(year, 12, 31);
                            string stringEndingDateOfYear = EndingDateOfYear.ToString("dd-MM-yyyy");
                            objdatarow["END_DATE"] = CommonFunctions.ConvertToDateTime(stringEndingDateOfYear, "dd-MM-yyyy");
                        }
                        if (ddldoctorwaiver.SelectedItem != null)
                        { objdatarow["DOCTOR_WAIVER"] = ddldoctorwaiver.SelectedItem.Value; }

                        if (ddlhospitalrwaiver.SelectedItem != null)
                        { objdatarow["HOSPITAL_WAIVER"] = ddlhospitalrwaiver.SelectedItem.Value; }

                        if (txtDoctorActionDate.Text.Length > 0)
                        {
                            objdatarow["DO_ACTION_DATE"] = CommonFunctions.ConvertToDateTime(txtDoctorActionDate.Text, "dd-MM-yyyy");

                        }
                        if (txtHospitalActionDate.Text.Length > 0)
                        {
                            objdatarow["HOS_ACTION_DATE"] = CommonFunctions.ConvertToDateTime(txtHospitalActionDate.Text, "dd-MM-yyyy");
                        }
                        if (ddlDoctorDeclineReason.SelectedItem != null)
                        { objdatarow["DO_DECLINE_REASON"] = ddlDoctorDeclineReason.SelectedItem.Value; }

                        if (ddlHospitalDeclineReason.SelectedItem != null)
                        { objdatarow["HOS_DECLINE_REASON"] = ddlHospitalDeclineReason.SelectedItem.Value; }
                        if (ddlWApproved.SelectedItem != null)
                        { objdatarow["WAIVER_APPROVED"] = ddlWApproved.SelectedItem.Value; }

                        objdatarow["REMARKS"] = txtWaiverrmk.Text.ToUpper(); 
                        CommonFunctions.AssignAuditLogDetails(ref objdatarow);

                        objDatasetResult.Tables["t1"].Rows.Add(objdatarow);

                        if (stringDMLIND == "U" && chkCOPYQUERY.Checked == false)
                        {
                            objDatasetResult.Tables["t1"].AcceptChanges();
                            objDatasetResult.Tables["t1"].Rows[0]["delmark"] = "N";
                        }

                        objDatasetResult.Tables["t1"].Rows[0].RowState.ToString();


                        objDatasetResult = objDatasetResult.GetChanges();
                        stringServiceType = "OperationServiceDML";
                        objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);

                        if (intErrorCount == 0)
                        {
                            return true;
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                            return false;
                        }
                    }
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);

                return false;
            }
            finally
            {
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null;
                objdatarow = null;
                stringServiceType1 = null;
                stringexp = null;
            }
        } 
        protected void ddlhospitalrwaiver_SelectedIndexChanged(object sender, EventArgs e)
        {
            string stringhospitalrwaiver = "";
            try
            {
                if (ddlhospitalrwaiver.SelectedItem != null && ddlhospitalrwaiver.SelectedValue.Length > 0)
                {
                    stringhospitalrwaiver = ddlhospitalrwaiver.SelectedItem.Value;

                    if (stringhospitalrwaiver == "DECLINED")
                    {
                        ddlHospitalDeclineReason.Enabled = true;
                        ddlHospitalDeclineReason.CssClass = "form-control optional";
                    }
                    else
                    {
                        ddlHospitalDeclineReason.Enabled = false;
                        ddlHospitalDeclineReason.CssClass = "form-control ReadOnly";
                    }
                    WaverSelection();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringhospitalrwaiver = null;
            }
        }

        protected void ddldoctorwaiver_SelectedIndexChanged(object sender, EventArgs e)
        {
            string stringdoctorwaiver = "";
            try
            {
                if (ddldoctorwaiver.SelectedItem != null && ddldoctorwaiver.SelectedValue.Length > 0)
                {
                    stringdoctorwaiver = ddldoctorwaiver.SelectedItem.Value;

                    if (stringdoctorwaiver == "DECLINED")
                    {
                        ddlDoctorDeclineReason.Enabled = true;
                        ddlDoctorDeclineReason.CssClass = "form-control optional";
                    }
                    else
                    {
                        ddlDoctorDeclineReason.Enabled = false;
                        ddlDoctorDeclineReason.CssClass = "form-control ReadOnly";
                    }

                }

                WaverSelection();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringdoctorwaiver = null;
            }
        }

        private void WaverSelection()
        {
            string stringddlWApproved = "";
            string stringddldoctorwaiver = "";
            string stringddlhospitalrwaiver = "";
            try
            {
                if (ddldoctorwaiver.SelectedItem != null && ddldoctorwaiver.SelectedValue.Length > 0)
                {
                    stringddldoctorwaiver = ddldoctorwaiver.SelectedItem.Value;
                }
                if (ddlhospitalrwaiver.SelectedItem != null && ddlhospitalrwaiver.SelectedValue.Length > 0)
                {
                    stringddlhospitalrwaiver = ddlhospitalrwaiver.SelectedItem.Value;
                }

                if (stringddldoctorwaiver == "APPROVED" && stringddlhospitalrwaiver == "APPROVED")
                {
                    stringddlWApproved = "FULLWAIVER";
                }
                else if ((stringddldoctorwaiver == "APPROVED" && stringddlhospitalrwaiver == "PENDING")
                       || (stringddldoctorwaiver == "PENDING" && stringddlhospitalrwaiver == "APPROVED"))
                {
                    stringddlWApproved = "PENDING";
                }
                else if ((stringddldoctorwaiver == "DECLINED" && stringddlhospitalrwaiver == "PENDING")
                      || (stringddldoctorwaiver == "PENDING" && stringddlhospitalrwaiver == "DECLINED"))
                {
                    stringddlWApproved = "PENDING";
                }
                else if (stringddldoctorwaiver == "PENDING" && stringddlhospitalrwaiver == "PENDING")
                {
                    stringddlWApproved = "PENDING";
                }
                else if (stringddldoctorwaiver == "DECLINED" && stringddlhospitalrwaiver == "DECLINED")
                {
                    stringddlWApproved = "REJECTED";
                }
                else if ((stringddldoctorwaiver == "APPROVED" && stringddlhospitalrwaiver == "DECLINED")
                      || (stringddldoctorwaiver == "DECLINED" && stringddlhospitalrwaiver == "APPROVED"))
                {
                    stringddlWApproved = "HALFWAIVER";
                }


                if (ddlWApproved.Items.FindByValue(stringddlWApproved) != null)
                {
                    ddlWApproved.ClearSelection();
                    ddlWApproved.Items.FindByValue(stringddlWApproved).Selected = true;
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringddlWApproved = null;
                stringddldoctorwaiver = null;
                stringddlhospitalrwaiver = null;
            }

        }

        private void WaiverInformationsFieldenabledisable(bool boolENABLE, bool boolReadonly)
        {
            try
            {
                ddlWApp.Enabled = boolENABLE;
                ddlWApproved.Enabled = boolENABLE;
                ControlsDropdownValues("ADDREPORTTYPE", boolENABLE);
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }

        private void AttachgmentsFieldenabledisable(bool boolENABLE, bool boolReadonly)
        {
            try
            {

                FileUpload1.Enabled = boolENABLE;
                ddlCategory.Enabled = boolENABLE;
                lnkbtnaddattachments.Enabled = boolENABLE;
                txtRemark.ReadOnly = boolReadonly;
                ControlsDropdownValues("ADDREPORTTYPE", boolENABLE);
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }

        private void AssignationFieldenabledisable(bool boolENABLE, bool boolReadonly)
        {
            try
            {

                LkBtnBios.Enabled = boolENABLE;
                LinkButton1.Enabled = boolENABLE;
                ControlsDropdownValues("DEPARTMENTOU", boolENABLE);

                gvassigndoctor.Columns[gvassigndoctor.Columns.Count - 1].Visible = false;
                gvassigndoctor.Columns[gvassigndoctor.Columns.Count - 2].Visible = false;
                gvassigndoctor.Columns[gvassigndoctor.Columns.Count - 3].Visible = false;

                gvassignverifier.Columns[gvassignverifier.Columns.Count - 1].Visible = false;
                gvassignverifier.Columns[gvassignverifier.Columns.Count - 2].Visible = false;
                gvassignverifier.Columns[gvassignverifier.Columns.Count - 3].Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }

        private void RemarksFieldenabledisable(bool boolENABLE, bool boolReadonly)
        {
            try
            { 
                //ddlRemarks.Enabled = boolENABLE;
                //ddlTarget.Enabled = boolENABLE;
                //lnkbtnaddremarks.Enabled = boolENABLE;
                //lnkbtnremarksclear.Enabled = boolENABLE;
                //CalendarExtender1.Enabled = boolENABLE;
                //txtDesc.ReadOnly = boolReadonly;
                //txtRemarkdte.ReadOnly = boolReadonly;
                //gvList.Columns[gvList.Columns.Count - 1].Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }

        private void EnquiryFieldenabledisable(bool boolENABLE, bool boolReadonly)
        {
            try
            {
                //ddlEnqStatus.Enabled = boolENABLE;
                //ddlRemarks.Enabled = boolENABLE;
                //lnkbtnenquiryadd.Enabled = boolENABLE;
                //lnkbtnenquiryclear.Enabled = boolENABLE;
                //txtCEnq.ReadOnly = boolReadonly; 
                //txtCName.ReadOnly = boolReadonly;
                //txtSName.ReadOnly = boolReadonly;
                //txtSRes.ReadOnly = boolReadonly;
                //txtRemarks.ReadOnly = boolReadonly;
                //gvListEnquiry.Columns[gvListEnquiry.Columns.Count - 1].Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }
        private void PendingItemsFieldenabledisable(bool boolENABLE, bool boolReadonly)
        {
            try
            {
                ddlPenItems.Enabled = boolENABLE;
                ddlStatus.Enabled = boolENABLE;
                txtStartDate_CalendarExtender.Enabled = boolENABLE;
                txtCloseDate_CalendarExtender.Enabled = boolENABLE;
                txtDueDays.ReadOnly = boolReadonly;
                txtStartDate.ReadOnly = boolReadonly;
                txtCloseDate.ReadOnly = boolReadonly;
                gvListEnquiry.Columns[gvListEnquiry.Columns.Count - 1].Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }

        #endregion
        #region  Load datas        
        private void LoadEnquiry(string stringRequestID, string stringTYPE, bool boolpanelenable, bool boolpagingenable)//fix
        {
            DataSet objDatasetResultEnq = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0003R1V1";
            string stringOrderBy = "mreh.modified_on desc"; 
            int intFromRecord = intrecFromEnquiry;
            int intToRecord = intrecToEnquiry;
            string stringServiceType = "";
            DataTable objDataTableENQ = null;
            string stringExpression = "";
            string stringBoID = ""; 
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (!boolpagingenable)
                {
                    intFromRecord = 0;
                    intToRecord = int.MaxValue;
                }
                if (stringRequestID.Trim().Length > 0)
                {
                    if ((Session["LoadEnquiryFC0001"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                    {
                        stringServiceType = "List1R1V1";
                        stringExpression = "And mreh.be_id= '" + stringBoID + "' And mreh.request_id= '" + stringRequestID + "' ";

                        objDatasetResultEnq = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResultEnq != null && objDatasetResultEnq.Tables.Count > 0 && objDatasetResultEnq.Tables["t1"] != null && objDatasetResultEnq.Tables["t1"].Rows.Count > 0)
                            {
                                objDataTableENQ = objDatasetResultEnq.Tables["t1"];
                                Session["LoadEnquiryFC0001"] = objDataTableENQ;


                            }
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                            pnlEnqresultgrid.Visible = false;
                        }
                    }
                    else
                    {
                        if (HttpContext.Current.Session["LoadEnquiryFC0001"] != null)
                        {
                            objDataTableENQ = (DataTable)HttpContext.Current.Session["LoadEnquiryFC0001"];
                            intTotalRecord = objDataTableENQ.Rows.Count;
                            objDataTableENQ = objDataTableENQ.AsEnumerable().Take(intrecToEnquiry).CopyToDataTable();
                        }
                    }

                    if (objDataTableENQ != null && objDataTableENQ.Rows.Count > 0)
                    {
                        
                        foreach (DataRow row in objDataTableENQ.Rows)
                        {
                            row["DML_INDICATOR"] = "U";
                        }
                        if (!boolpagingenable)
                        {
                            objDataTableENQ = objDataTableENQ.AsEnumerable().Take(intrecToEnquiry).CopyToDataTable();
                        } 
                        gvListEnquiry.DataSource = objDataTableENQ;
                        gvListEnquiry.DataBind();
                        pnlEnqresultgrid.Visible = true;
                        lblpnlEnquiryRecord.InnerText =intTotalRecord.ToString();
                    }
                    else
                    {
                        lblpnlEnquiryRecord.InnerText = "0";
                        gvListEnquiry.DataSource = null;
                        gvListEnquiry.DataBind();
                        pnlEnqresultgrid.Visible = false;
                        intTotalRecord = 0;
                    }
                    PopulateEnquiry(intTotalRecord, intpageIndexEnquiry);

                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResultEnq = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null;
                objDataTableENQ = null;
                stringExpression = null;
                stringBoID = null;
            }
        }

        private void LoadRemarks(string stringRequestID, string stringTYPE, bool boolpanelenable, bool boolVAlidation,bool boolpagingenable)
        {
            DataSet objDatasetResultREm = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformidREm = "FC0001R1V1";
            string stringOrderByREm = "mrregrmk.CREATED_ON desc"; 
            int intFromRecord = intrecFromRemarks;
            int intToRecord = intrecToRemarks;
            DataTable objDataTableREm = null;
            string stringBoID = "";
            string stringServiceTypeREm = "";
            string stringExpressionREm = "";
            string stringroleid = "";
            string stringExp = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (!boolpagingenable)
                {
                    intFromRecord = 0;
                    intToRecord = int.MaxValue;
                }
                if ((Session["ADD_REMARKS"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                {
                    stringServiceTypeREm = "List9R1V1";
                    stringExpressionREm = "And mrregrmk.be_id= '" + stringBoID + "' And mrregrmk.Request_ID= '" + stringRequestID + "' ";

                    objDatasetResultREm = CommonFunctions.SelectionServiceClient(stringServiceTypeREm, stringformidREm, stringExpressionREm, stringOrderByREm, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResultREm != null && objDatasetResultREm.Tables.Count > 0 && objDatasetResultREm.Tables["t9"] != null && objDatasetResultREm.Tables["t9"].Rows.Count > 0)
                        {
                            objDataTableREm = objDatasetResultREm.Tables["t9"];
                            Session["ADD_REMARKS"] = objDataTableREm;
                        }

                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        pnlRemarksresultgrid.Visible = false;
                    }
                }
                else
                {
                    if (HttpContext.Current.Session["ADD_REMARKS"] != null)
                    {
                        objDataTableREm = (DataTable)HttpContext.Current.Session["ADD_REMARKS"];
                        intTotalRecord = objDataTableREm.Rows.Count;
                        objDataTableREm = objDataTableREm.AsEnumerable().Take(intrecToRemarks).CopyToDataTable();
                    }
                }
                if (boolVAlidation)
                {
                    stringroleid = "";
                    stringExp = "";
                    if (objDataTableREm != null && objDataTableREm.Rows.Count > 0)
                    {

                        if (Session["UserRole_ForRemarks"] != null)
                        {
                            stringroleid = Session["UserRole_ForRemarks"].ToString();
                        }
                        if (stringroleid.Length > 0 && (stringroleid.Contains("DEPARTMENT SECRETARY") ))
                        { 
                            stringExp = "(TARG_AUD= 'ALL') OR (TARG_AUD= 'DEPARTMENT SECRETARY')   OR (TARG_AUD= 'HOD') OR (TARG_AUD= 'HIMS SUPERVISOR') OR (TARG_AUD= 'HIMS USERS')  "; 
                        }
                        else if (stringroleid.Length > 0 && (stringroleid.Contains("DOCTORS") ))
                        {
                            stringExp = "(TARG_AUD= 'ALL') OR (TARG_AUD= 'DOCTORS') OR (TARG_AUD= 'HIMS SUPERVISOR') OR (TARG_AUD= 'HIMS USERS') OR (TARG_AUD= 'HOD')  ";
                        }
                        if (stringExp.Length > 0)
                        {
                            if (objDataTableREm.Select(stringExp).Length > 0)
                            {
                                objDataTableREm = objDataTableREm.Select(stringExp).CopyToDataTable(); 
                            }
                            else
                            {
                                objDataTableREm = null;
                            }
                        }
                    }
                }

                if (objDataTableREm != null && objDataTableREm.Rows.Count > 0)
                {
                    foreach (DataRow row in objDataTableREm.Rows)
                    {
                        row["DML_INDICATOR"] = "U";
                    }
                    if (!boolpagingenable)
                    {
                        objDataTableREm = objDataTableREm.AsEnumerable().Take(intrecToRemarks).CopyToDataTable();
                    }
                    objDataTableREm.DefaultView.Sort = "REMARKS_DATE desc";
                    objDataTableREm = objDataTableREm.DefaultView.ToTable();

                    gvList.DataSource = objDataTableREm;
                    gvList.DataBind();
                    pnlRemarksresultgrid.Visible = true;
                    lblpnlremRecord.InnerText = intTotalRecord.ToString();  
                    PopulateRemarks(intTotalRecord, intpageIndexRemarks);
                }
                else
                {
                    PopulateRemarks(0, intpageIndexRemarks);
                    Session["ADD_REMARKS"] = null;
                    gvList.DataSource = null;
                    gvList.DataBind();
                    pnlRemarksresultgrid.Visible = false;
                    lblpnlremRecord.InnerText = "0";
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResultREm = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformidREm = null;
                stringOrderByREm = null;
                objDataTableREm = null;
                stringBoID = null;
                stringServiceTypeREm = null;
                stringExpressionREm = null;
                stringroleid = null;
                stringExp = null;
            }
        }

        private void LoadPendingItems(string stringRequestID, string stringTYPE, bool boolpanelenable)//fix
        {

            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "mrpend.modified_on desc";


            int intFromRecord = intrecFromPendingItems;
            int intToRecord = intrecToPendingItems;
            string stringServiceType = "";
            DataTable objDataTable = null;
            string stringExpression = "";
            string stringBoID = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (stringRequestID.Trim().Length > 0)
                {
                    if ((Session["LoadPendingItemsFC0001"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                    {
                        stringServiceType = "List12R1V1";
                        stringExpression = "and mrpend.be_id='" + stringBoID + "' and mrpend.request_id='" + stringRequestID + "' ";

                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t12"] != null && objDatasetResult.Tables["t12"].Rows.Count > 0)
                            {
                                objDataTable = objDatasetResult.Tables["t12"];
                                Session["LoadPendingItemsFC0001"] = objDataTable;
                            }
                            else
                            {
                                Session["LoadPendingItemsFC0001"] = null;
                            }
                        }
                        else
                        {
                            Session["PendingItemsList"] = null;
                            Session["LoadPendingItemsFC0001"] = null;
                            Errorpopup(stringOutputResult);
                            lblpnlPendingItemsRercord.InnerText = "0";
                            pnlPendingItems.Visible = false;
                        }

                    }
                    else
                    {
                        if (HttpContext.Current.Session["LoadPendingItemsFC0001"] != null)
                        {
                            objDataTable = (DataTable)HttpContext.Current.Session["LoadPendingItemsFC0001"];
                        }
                    }



                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        foreach (DataRow row in objDataTable.Rows)
                        {
                            row["DML_INDICATOR"] = "N";
                        }
                        Session["LoadPendingItemsFC0001"] = objDataTable;
                        gvListPendingItems.DataSource = objDataTable;
                        gvListPendingItems.DataBind();
                        pnlPendingItems.Visible = false;
                        btnpendingitems.Visible = true;
                        lblpnlPendingItemsRercord.InnerText = objDataTable.Rows.Count.ToString();
                        Session["PendingItemsList"] = objDataTable;
                    }
                    else
                    {
                        Session["LoadPendingItemsFC0001"] = null;
                        pnlPendingItems.Visible = false;
                        btnpendingitems.Visible = true;
                        btnpendingitems.ToolTip = "Don't have any Pending Items";
                        lblpnlPendingItemsRercord.InnerText = "0";
                        Session["PendingItemsList"] = null;
                    }
                    PopulatePagerpendingitems(intTotalRecord, intpageIndexPendingItems);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null;
                objDataTable = null;
                stringExpression = null;
                stringBoID = null;
            }
        }
        private void LoadProcessHistory(string stringRequestID, string stringTYPE, bool boolpanelenable)
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0002R1V1";
            string stringOrderBy = "";
            int intFromRecord = intrecFromProcessHistory;
            int intToRecord = intrecToProcessHistory;
            string stringServiceType = "";
            DataTable objDataTable = null;
            string stringExpression = "";
            string stringBoID = "";
            string stringDueduedays = "";
            string stringMRSTSTUS = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (stringRequestID.Trim().Length > 0)
                { 
                    if ((Session["LoadProcessHistoryFC0001"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                    {
                        stringServiceType = "List2R1V1";
                        stringExpression = "And mrpdt.be_id= '" + stringBoID + "' And mrpdt.request_id= '" + stringRequestID + "' ";

                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                        if (interrorcount == 0)
                        {
                            if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count > 0)
                            {
                                objDataTable = objDatasetResult.Tables["t2"];
                                Session["LoadProcessHistoryFC0001"] = objDataTable;
                            }

                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                            pnlProcessHistory.Visible = false;
                        }
                    }
                    else
                    {
                        if (HttpContext.Current.Session["LoadProcessHistoryFC0001"] != null)
                        {
                            objDataTable = (DataTable)HttpContext.Current.Session["LoadProcessHistoryFC0001"];
                            intTotalRecord = objDataTable.Rows.Count;
                            objDataTable = objDataTable.AsEnumerable().Take(intrecToProcessHistory).CopyToDataTable();
                        }
                    }


                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    { 
                        gvprocesshistorygrid.DataSource = objDataTable;
                        gvprocesshistorygrid.DataBind();
                        pnlProcessHistory.Visible = boolpanelenable;
                        btnProcessHistory.Visible = true;
                        lblpnlprocesshistory.InnerText = intTotalRecord.ToString();

                        foreach (DataRow objDataRow in objDataTable.Rows)
                        {
                            stringDueduedays = objDataRow["reference_3"].ToString();
                            stringMRSTSTUS = objDataRow["REFERENCE_2"].ToString();
                            ProcessControlOverDueIndicator(stringMRSTSTUS, stringDueduedays);
                        }
                    }
                    else
                    {
                        Session["LoadProcessHistoryFC0001"] = null;
                        gvprocesshistorygrid.DataSource = null;
                        gvprocesshistorygrid.DataBind();
                        pnlProcessHistory.Visible = boolpanelenable;
                        btnProcessHistory.Visible = false;
                        btnProcessHistory.ToolTip = "Don't have any Process History";
                        lblpnlprocesshistory.InnerText = "0";
                    }
                    PopulateProcessHistory(intTotalRecord, intpageIndexProcessHistory);

                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                stringServiceType = null;
                objDataTable = null;
                stringExpression = null;
                stringBoID = null;
                stringDueduedays = null;
                stringMRSTSTUS = null;
            }
        }

        protected void gvprocesshistorygrid_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRowView objDRV = null;
            DataRow objDataRow = null;
            string stringReference1 = "";
            try
            {
                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }

                objDRV = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objDRV.Row;
                if (objDataRow != null)
                {
                    if (objDataRow["Trans_Status"].ToString() == "PENDING")
                    { e.Row.FindControl("lblCOMPLETED_DATE").Visible = false; }

                    stringReference1 = objDataRow["reference_1"].ToString();
                    if (stringReference1 != null && stringReference1.Trim().Length > 0)
                    { ((Label)e.Row.FindControl("lblTRANS_STATUS")).Text = stringReference1; }


                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objDRV = null;
                objDataRow = null;
                stringReference1 = null;
            }
        }
        private void LoadPaymentReceiptsGrid(string stringRequestID, decimal decimalMRamt, string stringTYPE, string stringWAIVER)//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC3008R1V1";
            string stringOrderBy = "mrpr.modified_on desc";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataTable objDataTable = null;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringServiceType = "";
            string stringexp012 = "";
            DataTable objDataTable01 = null;
            DataRow objDataRowNew = null;
            try
            {
                if ((Session["LoadPaymentReceiptsGridFC0001"] == null) || (stringTYPE.Length > 0 && stringTYPE != "LOAD"))
                {
                    stringServiceType = "List2R1V1";
                    stringexp012 = "And reg.be_id= '" + stringbeid + "' And reg.request_id= '" + stringRequestID + "' ";

                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count > 0)
                        {
                            objDataTable = objDatasetResult.Tables["t2"];
                            Session["LoadPaymentReceiptsGridFC0001"] = objDataTable;
                        }

                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                else
                {
                    if (HttpContext.Current.Session["LoadPaymentReceiptsGridFC0001"] != null)
                    {
                        objDataTable = (DataTable)HttpContext.Current.Session["LoadPaymentReceiptsGridFC0001"];
                    }
                }


                if (objDataTable != null && objDataTable.Rows.Count > 0)
                {
                    ddlWApp.Enabled = false;
                    ddlWApp_SelectedIndexChanged(ddlWApp, null);
                    gvReceipt.DataSource = objDataTable;
                    gvReceipt.DataBind(); 
                }
                else
                {
                    objDataTable01 = new DataTable();
                    DataColumn objDataColumn = new DataColumn("SNo", typeof(long));
                    objDataColumn.AutoIncrement = true;
                    objDataColumn.AutoIncrementSeed = 1;
                    objDataColumn.AutoIncrementStep = 1;
                    objDataTable01.Columns.Add(objDataColumn);

                    objDataTable01.Columns.Add("RECEIPT_ID");
                    objDataTable01.Columns.Add("PAYMENT_STATUS");
                    objDataTable01.Columns.Add("Rcvd_Date");

                    objDataRowNew = objDataTable01.NewRow();
                    objDataRowNew["RECEIPT_ID"] = "-";
                    if (stringWAIVER == "WAIVER")
                    {
                        objDataRowNew["PAYMENT_STATUS"] = "Waived";
                    }
                    else if (stringWAIVER == "HALFWAIVER")
                    {
                        objDataRowNew["PAYMENT_STATUS"] = "Pending Waiver";
                    }
                    else if (decimalMRamt == 0)
                    {
                        objDataRowNew["PAYMENT_STATUS"] = "-";
                    }
                    else
                    {
                        objDataRowNew["PAYMENT_STATUS"] = "Pending";
                    }
                    objDataRowNew["Rcvd_Date"] = "-";
                    objDataTable01.Rows.Add(objDataRowNew);

                    gvReceipt.DataSource = objDataTable01;
                    gvReceipt.DataBind();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDataTable = null;
                stringbeid = null;
                stringServiceType = null;
                stringexp012 = null;
                objDataTable01 = null;
                objDataRowNew = null;
            }
        }
        #endregion       
        #region paging
        //for paging copy request
        private void PopulatePagerCopyreq(int recordCount, int currentPage)
        {
            try
            {
                List<ListItem> pages = new List<ListItem>();
                int startIndex, endIndex;
                int pagerSpan = 5;
                int intpaging = CommonFunctions.GridViewPagesize(stringformIdPagingcopyreq);
                double dblPageCount = (double)((decimal)recordCount / Convert.ToDecimal(intpaging));
                int pageCount = (int)Math.Ceiling(dblPageCount);
                var ssn = dblPageCount.ToString(CultureInfo.InvariantCulture).Split('.');
                if (ssn[0] == "0")
                {
                    pageCount = (int)Math.Round(dblPageCount);
                }
                if (currentPage == 0)
                {
                    currentPage = 1;
                    startIndex = 1;
                }
                else
                {
                    startIndex = currentPage > 1 && currentPage + pagerSpan - 1 < pagerSpan ? currentPage : 1;
                }

                endIndex = pageCount > pagerSpan ? pagerSpan : pageCount;
                if (currentPage > pagerSpan % 2)
                {
                    if (currentPage == 2)
                    {
                        endIndex = 5;
                    }
                    else
                    {
                        endIndex = currentPage + 2;
                    }
                }
                else
                {
                    endIndex = (pagerSpan - currentPage) + 1;
                }
                if (currentPage != 0)
                {
                    if (endIndex - (pagerSpan - 1) > startIndex)
                    {
                        startIndex = endIndex - (pagerSpan - 1);
                    }
                }
                if (endIndex > pageCount)
                {
                    endIndex = pageCount;
                    startIndex = ((endIndex - pagerSpan) + 1) > 0 ? (endIndex - pagerSpan) + 1 : 1;
                }
                //Add the First Page Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("First", "1"));
                }
                //Add the Previous Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("<", (currentPage - 1).ToString()));
                }
                for (int i = startIndex; i <= endIndex; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
                }
                //Add the Next Button.
                if (currentPage < pageCount)
                {
                    pages.Add(new ListItem(">", (currentPage + 1).ToString()));
                }
                //Add the Last Button.
                if (currentPage != pageCount)
                {
                    pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                if (pageCount == 1 || pageCount == 0)
                {
                    ViewState["lastpagepagig"] = false;
                    pages.Clear();
                    //pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                Repeatercopyreq.DataSource = pages;
                Repeatercopyreq.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void lnkPagecopyreq_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["PageIndex1"] != null)
                {
                    intpageIndexcopyreq = Convert.ToInt32(Session["PageIndex1"].ToString());
                    Session["PageIndex"] = intpageIndexcopyreq;
                }
                else
                {
                    intpageIndexcopyreq = int.Parse((sender as LinkButton).CommandArgument);
                    if (intpageIndexcopyreq != 0)
                    {
                        Session["PageIndex"] = intpageIndexcopyreq;
                    }
                }

                if (intpageIndexcopyreq == 1)
                {
                    intrecFromcopyreq = 0;
                    intrecTocopyreq = CommonFunctions.GridViewPagesize(stringformIdPagingcopyreq);
                }
                else
                {
                    int recFrom1 = (intpageIndexcopyreq * intrecTocopyreq) - intrecTocopyreq;
                    intrecFromcopyreq = recFrom1 + 1;
                    intrecTocopyreq = recFrom1 + CommonFunctions.GridViewPagesize(stringformIdPagingcopyreq);
                }

                btnbiodatapopupsearchcopyrequets_Click(null, null);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        //for paging for bio data
        private void PopulatePager(int recordCount, int currentPage)
        {
            try
            {
                List<ListItem> pages = new List<ListItem>();
                int startIndex, endIndex;
                int pagerSpan = 5;
                int intpaging = CommonFunctions.GridViewPagesize(stringformIdPaging);
                double dblPageCount = (double)((decimal)recordCount / Convert.ToDecimal(intpaging));
                int pageCount = (int)Math.Ceiling(dblPageCount);
                var ssn = dblPageCount.ToString(CultureInfo.InvariantCulture).Split('.');
                if (ssn[0] == "0")
                {
                    pageCount = (int)Math.Round(dblPageCount);
                }
                if (currentPage == 0)
                {
                    currentPage = 1;
                    startIndex = 1;
                }
                else
                {
                    startIndex = currentPage > 1 && currentPage + pagerSpan - 1 < pagerSpan ? currentPage : 1;
                }

                endIndex = pageCount > pagerSpan ? pagerSpan : pageCount;
                if (currentPage > pagerSpan % 2)
                {
                    if (currentPage == 2)
                    {
                        endIndex = 5;
                    }
                    else
                    {
                        endIndex = currentPage + 2;
                    }
                }
                else
                {
                    endIndex = (pagerSpan - currentPage) + 1;
                }
                if (currentPage != 0)
                {
                    if (endIndex - (pagerSpan - 1) > startIndex)
                    {
                        startIndex = endIndex - (pagerSpan - 1);
                    }
                }
                if (endIndex > pageCount)
                {
                    endIndex = pageCount;
                    startIndex = ((endIndex - pagerSpan) + 1) > 0 ? (endIndex - pagerSpan) + 1 : 1;
                }
                //Add the First Page Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("First", "1"));
                }
                //Add the Previous Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("<", (currentPage - 1).ToString()));
                }
                for (int i = startIndex; i <= endIndex; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
                }
                //Add the Next Button.
                if (currentPage < pageCount)
                {
                    pages.Add(new ListItem(">", (currentPage + 1).ToString()));
                }
                //Add the Last Button.
                if (currentPage != pageCount)
                {
                    pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                if (pageCount == 1 || pageCount == 0)
                {
                    ViewState["lastpagepagig"] = false;
                    pages.Clear();
                    //pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                Repeater2.DataSource = pages;
                Repeater2.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        protected void lnkPage_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["PageIndex1"] != null)
                {
                    intpageIndex = Convert.ToInt32(Session["PageIndex1"].ToString());
                    Session["PageIndex"] = intpageIndex;
                }
                else
                {
                    intpageIndex = int.Parse((sender as LinkButton).CommandArgument);
                    if (intpageIndex != 0)
                    {
                        Session["PageIndex"] = intpageIndex;
                    }
                }

                if (intpageIndex == 1)
                {
                    intrecFrom = 0;
                    intrecTo = CommonFunctions.GridViewPagesize(stringformIdPaging);
                }
                else
                {
                    int recFrom1 = (intpageIndex * intrecTo) - intrecTo;
                    intrecFrom = recFrom1 + 1;
                    intrecTo = recFrom1 + CommonFunctions.GridViewPagesize(stringformIdPaging);
                }

                btnbiodatapopupsearch_Click(null, null);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        //for pending items

        private void PopulatePagerpendingitems(int recordCount, int currentPage)
        {
            try
            {
                List<ListItem> pages = new List<ListItem>();
                int startIndex, endIndex;
                int pagerSpan = 5;
                int intpaging = CommonFunctions.GridViewPagesize(stringformIdPagingPendingItems);
                double dblPageCount = (double)((decimal)recordCount / Convert.ToDecimal(intpaging));
                int pageCount = (int)Math.Ceiling(dblPageCount);
                var ssn = dblPageCount.ToString(CultureInfo.InvariantCulture).Split('.');
                if (ssn[0] == "0")
                {
                    pageCount = (int)Math.Round(dblPageCount);
                }
                if (currentPage == 0)
                {
                    currentPage = 1;
                    startIndex = 1;
                }
                else
                {
                    startIndex = currentPage > 1 && currentPage + pagerSpan - 1 < pagerSpan ? currentPage : 1;
                }

                endIndex = pageCount > pagerSpan ? pagerSpan : pageCount;
                if (currentPage > pagerSpan % 2)
                {
                    if (currentPage == 2)
                    {
                        endIndex = 5;
                    }
                    else
                    {
                        endIndex = currentPage + 2;
                    }
                }
                else
                {
                    endIndex = (pagerSpan - currentPage) + 1;
                }
                if (currentPage != 0)
                {
                    if (endIndex - (pagerSpan - 1) > startIndex)
                    {
                        startIndex = endIndex - (pagerSpan - 1);
                    }
                }
                if (endIndex > pageCount)
                {
                    endIndex = pageCount;
                    startIndex = ((endIndex - pagerSpan) + 1) > 0 ? (endIndex - pagerSpan) + 1 : 1;
                }
                //Add the First Page Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("First", "1"));
                }
                //Add the Previous Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("<", (currentPage - 1).ToString()));
                }
                for (int i = startIndex; i <= endIndex; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
                }
                //Add the Next Button.
                if (currentPage < pageCount)
                {
                    pages.Add(new ListItem(">", (currentPage + 1).ToString()));
                }
                //Add the Last Button.
                if (currentPage != pageCount)
                {
                    pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                if (pageCount == 1 || pageCount == 0)
                {
                    ViewState["lastpagepagig"] = false;
                    pages.Clear();
                    //pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                rptPagerPendingItems.DataSource = pages;
                rptPagerPendingItems.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        protected void lnkPagePendingItems_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["PageIndex1"] != null)
                {
                    intpageIndexPendingItems = Convert.ToInt32(Session["PageIndex1"].ToString());
                    Session["PageIndex"] = intpageIndexPendingItems;
                }
                else
                {
                    intpageIndexPendingItems = int.Parse((sender as LinkButton).CommandArgument);
                    if (intpageIndexPendingItems != 0)
                    {
                        Session["PageIndex"] = intpageIndexPendingItems;
                    }
                }

                if (intpageIndexPendingItems == 1)
                {
                    intrecFromPendingItems = 0;
                    intrecToPendingItems = CommonFunctions.GridViewPagesize(stringformIdPagingPendingItems);
                }
                else
                {
                    int intrecFromPendingItems1 = (intpageIndexPendingItems * intrecToPendingItems) - intrecToPendingItems;
                    intrecFromPendingItems = intrecFromPendingItems1 + 1;
                    intrecToPendingItems = intrecFromPendingItems1 + CommonFunctions.GridViewPagesize(stringformIdPagingPendingItems);
                }
                if (Session["REQUEST_FromSummary"] != null && Session["REQUEST_FromSummary"].ToString().Trim().Length > 0)
                {
                    string stringRequestID = Session["REQUEST_FromSummary"].ToString();
                    LoadPendingItems(stringRequestID, "NONLOAD", true);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        //for pending items
        protected void lnkPageProcessHistory_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["PageIndex1"] != null)
                {
                    intpageIndexProcessHistory = Convert.ToInt32(Session["PageIndex1"].ToString());
                    Session["PageIndex"] = intpageIndexProcessHistory;
                }
                else
                {
                    intpageIndexProcessHistory = int.Parse((sender as LinkButton).CommandArgument);
                    if (intpageIndexProcessHistory != 0)
                    {
                        Session["PageIndex"] = intpageIndexProcessHistory;
                    }
                }

                if (intpageIndexProcessHistory == 1)
                {
                    intrecFromProcessHistory = 0;
                    intrecToProcessHistory = CommonFunctions.GridViewPagesize(stringformIdProcessHistory);
                }
                else
                {
                    int intrecFromProcessHistory1 = (intpageIndexProcessHistory * intrecToProcessHistory) - intrecToProcessHistory;
                    intrecFromProcessHistory = intrecFromProcessHistory1 + 1;
                    intrecToProcessHistory = intrecFromProcessHistory1 + CommonFunctions.GridViewPagesize(stringformIdProcessHistory);
                }
                if (Session["REQUEST_FromSummary"] != null && Session["REQUEST_FromSummary"].ToString().Trim().Length > 0)
                {
                    string stringRequestID = Session["REQUEST_FromSummary"].ToString();
                    LoadProcessHistory(stringRequestID, "NONLOAD", true);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        private void PopulateProcessHistory(int recordCount, int currentPage)
        {
            try
            {
                List<ListItem> pages = new List<ListItem>();
                int startIndex, endIndex;
                int pagerSpan = 5;
                int intpaging = CommonFunctions.GridViewPagesize(stringformIdProcessHistory);
                double dblPageCount = (double)((decimal)recordCount / Convert.ToDecimal(intpaging));
                int pageCount = (int)Math.Ceiling(dblPageCount);
                var ssn = dblPageCount.ToString(CultureInfo.InvariantCulture).Split('.');
                if (ssn[0] == "0")
                {
                    pageCount = (int)Math.Round(dblPageCount);
                }
                if (currentPage == 0)
                {
                    currentPage = 1;
                    startIndex = 1;
                }
                else
                {
                    startIndex = currentPage > 1 && currentPage + pagerSpan - 1 < pagerSpan ? currentPage : 1;
                }

                endIndex = pageCount > pagerSpan ? pagerSpan : pageCount;
                if (currentPage > pagerSpan % 2)
                {
                    if (currentPage == 2)
                    {
                        endIndex = 5;
                    }
                    else
                    {
                        endIndex = currentPage + 2;
                    }
                }
                else
                {
                    endIndex = (pagerSpan - currentPage) + 1;
                }
                if (currentPage != 0)
                {
                    if (endIndex - (pagerSpan - 1) > startIndex)
                    {
                        startIndex = endIndex - (pagerSpan - 1);
                    }
                }
                if (endIndex > pageCount)
                {
                    endIndex = pageCount;
                    startIndex = ((endIndex - pagerSpan) + 1) > 0 ? (endIndex - pagerSpan) + 1 : 1;
                }
                //Add the First Page Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("First", "1"));
                }
                //Add the Previous Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("<", (currentPage - 1).ToString()));
                }
                for (int i = startIndex; i <= endIndex; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
                }
                //Add the Next Button.
                if (currentPage < pageCount)
                {
                    pages.Add(new ListItem(">", (currentPage + 1).ToString()));
                }
                //Add the Last Button.
                if (currentPage != pageCount)
                {
                    pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                if (pageCount == 1 || pageCount == 0)
                {
                    ViewState["lastpagepagig"] = false;
                    pages.Clear();
                    //pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                rptPagerProcessHistory.DataSource = pages;
                rptPagerProcessHistory.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        //for Enquiry

        private void PopulateEnquiry(int recordCount, int currentPage)
        {
            ViewState["lastpagepagig"] = true;
            try
            {
                List<ListItem> pages = new List<ListItem>();
                int startIndex, endIndex;
                int pagerSpan = 5;
                int intpaging = CommonFunctions.GridViewPagesize(stringformIdEnquiry);
                double dblPageCount = (double)((decimal)recordCount / Convert.ToDecimal(intpaging));
                int pageCount = (int)Math.Ceiling(dblPageCount);
                var ssn = dblPageCount.ToString(CultureInfo.InvariantCulture).Split('.');
                if (ssn[0] == "0")
                {
                    pageCount = (int)Math.Round(dblPageCount);
                }
                if (currentPage == 0)
                {
                    currentPage = 1;
                    startIndex = 1;
                }
                else
                {
                    startIndex = currentPage > 1 && currentPage + pagerSpan - 1 < pagerSpan ? currentPage : 1;
                }

                endIndex = pageCount > pagerSpan ? pagerSpan : pageCount;
                if (currentPage > pagerSpan % 2)
                {
                    if (currentPage == 2)
                    {
                        endIndex = 5;
                    }
                    else
                    {
                        endIndex = currentPage + 2;
                    }
                }
                else
                {
                    endIndex = (pagerSpan - currentPage) + 1;
                }
                if (currentPage != 0)
                {
                    if (endIndex - (pagerSpan - 1) > startIndex)
                    {
                        startIndex = endIndex - (pagerSpan - 1);
                    }
                }
                if (endIndex > pageCount)
                {
                    endIndex = pageCount;
                    startIndex = ((endIndex - pagerSpan) + 1) > 0 ? (endIndex - pagerSpan) + 1 : 1;
                }
                //Add the First Page Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("First", "1"));
                }
                //Add the Previous Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("<", (currentPage - 1).ToString()));
                }
                for (int i = startIndex; i <= endIndex; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
                }
                //Add the Next Button.
                if (currentPage < pageCount)
                {
                    pages.Add(new ListItem(">", (currentPage + 1).ToString()));
                }
                //Add the Last Button.
                if (currentPage != pageCount)
                {
                    pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                if (pageCount == 1 || pageCount == 0)
                {
                    ViewState["lastpagepagig"] = false;
                    pages.Clear();
                    //pages.Add(new ListItem("Last", pageCount.ToString()));
                }

                rptPagerEnquiry.DataSource = pages;
                rptPagerEnquiry.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        protected void lnkPageEnquiry_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["PageIndex1"] != null)
                {
                    intpageIndexEnquiry = Convert.ToInt32(Session["PageIndex1"].ToString());
                    Session["PageIndex"] = intpageIndexEnquiry;
                }
                else
                {
                    intpageIndexEnquiry = int.Parse((sender as LinkButton).CommandArgument);
                    if (intpageIndexEnquiry != 0)
                    {
                        Session["PageIndex"] = intpageIndexEnquiry;
                    }
                }

                if (intpageIndexEnquiry == 1)
                {
                    intrecFromEnquiry = 0;
                    intrecToEnquiry = CommonFunctions.GridViewPagesize(stringformIdEnquiry);
                }
                else
                {
                    int recFrom1 = (intpageIndexEnquiry * intrecToEnquiry) - intrecToEnquiry;
                    intrecFromEnquiry = recFrom1 + 1;
                    intrecToEnquiry = recFrom1 + CommonFunctions.GridViewPagesize(stringformIdEnquiry);
                }
                if (Session["REQUEST_FromSummary"] != null && Session["REQUEST_FromSummary"].ToString().Trim().Length > 0)
                {
                    string stringRequestID = Session["REQUEST_FromSummary"].ToString();
                    LoadEnquiry(stringRequestID, "NONLOAD", true,true);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
             
        }

        //for Remarks

        private void PopulateRemarks(int recordCount, int currentPage)
        {
            ViewState["lastpagepagig"] = true;
            try
            {
                List<ListItem> pages = new List<ListItem>();
                int startIndex, endIndex;
                int pagerSpan = 5;
                double dblPageCount = (double)((decimal)recordCount / CommonFunctions.GridViewPagesize(stringformIdRemarks));
                int pageCount = (int)Math.Ceiling(dblPageCount);

                var ssn = dblPageCount.ToString(CultureInfo.InvariantCulture).Split('.');
                if (ssn[0] == "0")
                {
                    pageCount = (int)Math.Round(dblPageCount);
                }
                if (currentPage == 0)
                {
                    currentPage = 1;
                    startIndex = 1;
                }
                else
                {
                    startIndex = currentPage > 1 && currentPage + pagerSpan - 1 < pagerSpan ? currentPage : 1;
                }

                endIndex = pageCount > pagerSpan ? pagerSpan : pageCount;
                if (currentPage > pagerSpan % 2)
                {
                    if (currentPage == 2)
                    {
                        endIndex = 5;
                    }
                    else
                    {
                        endIndex = currentPage + 2;
                    }
                }
                else
                {
                    endIndex = (pagerSpan - currentPage) + 1;
                }
                if (currentPage != 0)
                {
                    if (endIndex - (pagerSpan - 1) > startIndex)
                    {
                        startIndex = endIndex - (pagerSpan - 1);
                    }
                }
                if (endIndex > pageCount)
                {
                    endIndex = pageCount;
                    startIndex = ((endIndex - pagerSpan) + 1) > 0 ? (endIndex - pagerSpan) + 1 : 1;
                }
                //Add the First Page Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("First", "1"));
                }
                //Add the Previous Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("<", (currentPage - 1).ToString()));
                }
                for (int i = startIndex; i <= endIndex; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
                }
                //Add the Next Button.
                if (currentPage < pageCount)
                {
                    pages.Add(new ListItem(">", (currentPage + 1).ToString()));
                }
                //Add the Last Button.
                if (currentPage != pageCount)
                {
                    pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                if (pageCount == 1 || pageCount == 0)
                {
                    ViewState["lastpagepagig"] = false;
                    pages.Clear();
                    //pages.Add(new ListItem("Last", pageCount.ToString()));
                }

                rptPagerRemarks.DataSource = pages;
                rptPagerRemarks.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        protected void lnkPageRemarks_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["PageIndex1"] != null)
                {
                    intpageIndexRemarks = Convert.ToInt32(Session["PageIndex1"].ToString());
                    Session["PageIndex"] = intpageIndexRemarks;
                }
                else
                {
                    intpageIndexRemarks = int.Parse((sender as LinkButton).CommandArgument);
                    if (intpageIndexRemarks != 0)
                    {
                        Session["PageIndex"] = intpageIndexRemarks;
                    }
                }

                if (intpageIndexRemarks == 1)
                {
                    intrecFromRemarks = 0;
                    intrecToRemarks = CommonFunctions.GridViewPagesize(stringformIdRemarks);
                }
                else
                {
                    int recFrom1 = (intpageIndexRemarks * intrecToRemarks) - intrecToRemarks;
                    intrecFromRemarks = recFrom1 + 1;
                    intrecToRemarks = recFrom1 + CommonFunctions.GridViewPagesize(stringformIdRemarks);
                }
                if (Session["REQUEST_FromSummary"] != null && Session["REQUEST_FromSummary"].ToString().Trim().Length > 0)
                {
                    string stringRequestID = Session["REQUEST_FromSummary"].ToString();
                    LoadRemarks(stringRequestID, "NONLOAD", true, true, true);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
             
        }

        //for Docter selection
        private void PopulatePagerdoctorselection(int recordCount, int currentPage)
        {
            try
            {
                List<ListItem> pages = new List<ListItem>();
                int startIndex, endIndex;
                int pagerSpan = 5;
                int intpaging = CommonFunctions.GridViewPagesize(stringformIdPagingDocsel);
                double dblPageCount = (double)((decimal)recordCount / Convert.ToDecimal(intpaging));
                int pageCount = (int)Math.Ceiling(dblPageCount);
                var ssn = dblPageCount.ToString(CultureInfo.InvariantCulture).Split('.');
                if (ssn[0] == "0")
                {
                    pageCount = (int)Math.Round(dblPageCount);
                }
                if (currentPage == 0)
                {
                    currentPage = 1;
                    startIndex = 1;
                }
                else
                {
                    startIndex = currentPage > 1 && currentPage + pagerSpan - 1 < pagerSpan ? currentPage : 1;
                }

                endIndex = pageCount > pagerSpan ? pagerSpan : pageCount;
                if (currentPage > pagerSpan % 2)
                {
                    if (currentPage == 2)
                    {
                        endIndex = 5;
                    }
                    else
                    {
                        endIndex = currentPage + 2;
                    }
                }
                else
                {
                    endIndex = (pagerSpan - currentPage) + 1;
                }
                if (currentPage != 0)
                {
                    if (endIndex - (pagerSpan - 1) > startIndex)
                    {
                        startIndex = endIndex - (pagerSpan - 1);
                    }
                }
                if (endIndex > pageCount)
                {
                    endIndex = pageCount;
                    startIndex = ((endIndex - pagerSpan) + 1) > 0 ? (endIndex - pagerSpan) + 1 : 1;
                }
                //Add the First Page Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("First", "1"));
                }
                //Add the Previous Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("<", (currentPage - 1).ToString()));
                }
                for (int i = startIndex; i <= endIndex; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
                }
                //Add the Next Button.
                if (currentPage < pageCount)
                {
                    pages.Add(new ListItem(">", (currentPage + 1).ToString()));
                }
                //Add the Last Button.
                if (currentPage != pageCount)
                {
                    pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                if (pageCount == 1 || pageCount == 0)
                {
                    ViewState["lastpagepagig"] = false;
                    pages.Clear();
                    //pages.Add(new ListItem("Last", pageCount.ToString()));
                }


                Repeater5.DataSource = pages;
                Repeater5.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        protected void lnkPagedoctorselectionPopup_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["PageIndex1"] != null)
                {
                    intpageIndexdocselection = Convert.ToInt32(Session["PageIndex1"].ToString());
                    Session["PageIndex"] = intpageIndexdocselection;
                }
                else
                {
                    intpageIndexdocselection = int.Parse((sender as LinkButton).CommandArgument);
                    if (intpageIndexdocselection != 0)
                    {
                        Session["PageIndex"] = intpageIndexdocselection;
                    }
                }

                if (intpageIndexdocselection == 1)
                {
                    intrecFromdocselection = 0;
                    intrecTodocselection = CommonFunctions.GridViewPagesize(stringformIdPagingDocsel);
                }
                else
                {
                    int recFrom1 = (intpageIndexdocselection * intrecTodocselection) - intrecTodocselection;
                    intrecFromdocselection = recFrom1 + 1;
                    intrecTodocselection = recFrom1 + CommonFunctions.GridViewPagesize(stringformIdPagingDocsel);
                }

                btndoctorselectionsearch_Click(null, null);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        #endregion 
        protected void gvList_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRowView objdatarowattachments = null;
            DataRow objDataRow = null;
            int columnIndexToHide = 0;
            try
            {
                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }

                objdatarowattachments = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objdatarowattachments.Row;
                if (objDataRow != null)
                {
                    Button objbtnComplete = e.Row.FindControl("btnDelete") as Button;
                    objbtnComplete.Visible = true;

                    if (objDataRow["REGRMK_ID"].ToString().ToUpper() == "REQUESTOREMAIL" || txtMRStatus.Text.Trim().ToUpper() == "CANCELLED")
                    {
                        objbtnComplete.Visible = false; 
                        //columnIndexToHide = 5; 
                        //if (columnIndexToHide >= 0 && columnIndexToHide < gvList.Columns.Count)
                        //{
                        //    ((TemplateField)gvList.Columns[columnIndexToHide]).Visible = true;
                        //}
                    }  
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objdatarowattachments = null;
                objDataRow = null;
            }
        } 
        protected void btnCompletedocter_Click(object sender, EventArgs e)
        {
            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            DataRow[] objDataRowverification = null; 
            int interrorcount = 0;
            int intTotalRecord = 0;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V3";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataRow objDataRowsave = null;
            string stringtype = "";
            string[] stringValues = null;
            string stringCmdArgument = "";
            string stringServiceType1 = "";
            string stringexp = "";
            string stringuniqID = "";
            string stringdocttype = "";
            string stringDML_INDICATOR = "";
            string stringServiceType2 = "";
            string stringformid1 = "";
            string stringcompleted = "";
            string stringRequestID = "";
            string stringMessage = "";
            bool boolverification = true;
            try
            {
                //link button id
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringuniqID = stringValues[0];
                            stringdocttype = stringValues[1];

                            if (ViewState["DOCTERLISTFC0001"] != null)
                            {
                                objOrderTable = (DataTable)ViewState["DOCTERLISTFC0001"];
                            }

                            if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                            {
                                if (stringdocttype.ToUpper() == "VERIFIER")
                                {
                                    objDataRowverification = objOrderTable.Select("VERIFY_REF = 'DOCTOR' and status='IN-PROGRESS' ");
                                    if (objDataRowverification != null && objDataRowverification.Length > 0)
                                    {
                                        boolverification = false;
                                    }
                                }
                                if (boolverification)
                                {
                                    objDataRow = objOrderTable.Select("UNIQUE_ID='" + stringuniqID + "' ");
                                    if (objDataRow != null && objDataRow.Length > 0)
                                    {
                                        stringServiceType1 = "DEFAULT";
                                        stringexp = "";
                                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                                        if (interrorcount == 0)
                                        {
                                            if (objDatasetResult != null && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count == 0)
                                            {
                                                objDataRowsave = objDatasetResult.Tables["t2"].NewRow();

                                                objDataRowsave["BE_ID"] = objDataRow[0]["BE_ID"].ToString();
                                                objDataRowsave["REQUEST_ID"] = objDataRow[0]["REQUEST_ID"].ToString();
                                                objDataRowsave["DEPT_ID"] = objDataRow[0]["DEPT_ID"].ToString();
                                                objDataRowsave["EMP_NO"] = objDataRow[0]["EMP_NO"].ToString();
                                                objDataRowsave["NAME"] = objDataRow[0]["NAME"].ToString();
                                                objDataRowsave["MCR_NO"] = objDataRow[0]["MCR_NO"].ToString();
                                                objDataRowsave["REJ_REASON"] = objDataRow[0]["REJ_REASON"].ToString();
                                                objDataRowsave["REJ_TIME_STAMP"] = objDataRow[0]["REJ_TIME_STAMP"].ToString();
                                                objDataRowsave["REMARKS"] = objDataRow[0]["REMARKS"].ToString();
                                                objDataRowsave["STATUS"] = "COMPLETED";
                                                objDataRowsave["DOC_SEQ_ID"] = objDataRow[0]["DOC_SEQ_ID"].ToString(); 
                                                stringtype = objDataRow[0]["VERIFY_REF"].ToString();
                                                objDataRowsave["VERIFY_REF"] = stringtype;
                                                objDataRowsave["UNIQUE_ID"] = objDataRow[0]["UNIQUE_ID"].ToString();
                                                objDataRowsave["COMPLETED_DATE"] = DateTime.Now;
                                                objDataRowsave["SEQ_NO"] = objDataRow[0]["SEQ_NO"].ToString();
                                                objDataRowsave["reference_2"] = objDataRow[0]["reference_2"].ToString();
                                                objDataRowsave["DML_INDICATOR"] = "U";
                                                if (HttpContext.Current.Session["stringComputerName"] != null)
                                                    objDataRowsave["MODIFIED_AT"] = HttpContext.Current.Session["stringComputerName"].ToString();
                                                if (HttpContext.Current.Session["G11EOSUser_Name"] != null)
                                                    objDataRowsave["MODIFIED_BY"] = HttpContext.Current.Session["G11EOSUser_Name"].ToString();
                                                objDataRowsave["MODIFIED_ON"] = DateTime.Now;


                                                objDatasetResult.Tables["t2"].Rows.Add(objDataRowsave);

                                                if (objDatasetResult != null && objDatasetResult.Tables["t2"].Rows.Count > 0)
                                                {
                                                    objDatasetResult.Tables["t2"].AcceptChanges();
                                                    for (int intIndex = 0; intIndex < objDatasetResult.Tables["t2"].Rows.Count; intIndex++)
                                                    {
                                                        stringDML_INDICATOR = objDatasetResult.Tables["t2"].Rows[intIndex]["DML_INDICATOR"].ToString();

                                                        if (stringDML_INDICATOR == "U")
                                                        {
                                                            objDatasetResult.Tables["t2"].Rows[intIndex].SetModified();
                                                        }

                                                    }

                                                    objDatasetResult = objDatasetResult.GetChanges();
                                                    stringServiceType2 = "OperationServiceDML";
                                                    stringformid1 = "FC0001R1V3";
                                                    objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType2, objDatasetResult.GetChanges(), stringformid1, out int intErrorCount, out string[] stringOutputResult1);
                                                    if (intErrorCount == 0)
                                                    {
                                                        stringcompleted = objDataRow[0]["VERIFY_REF"].ToString();
                                                        {
                                                            if (stringcompleted != null && stringcompleted.ToString() == "DOCTOR")
                                                            {
                                                                stringMessage = "Doctor Completed Successfully";
                                                                CommonFunctions.ShowMessageboot(this, stringMessage);
                                                                stringRequestID = txtReqNo.Text.Trim().ToUpper();
                                                                LoadDocterandVerifiers(stringRequestID, "NONLOAD");
                                                                TABActive(6);
                                                            }
                                                            else if (stringcompleted != null && stringcompleted.ToString() == "VERIFIER")
                                                            {
                                                                stringMessage = "Verifer Completed Successfully";
                                                                CommonFunctions.ShowMessageboot(this, stringMessage);
                                                                stringRequestID = txtReqNo.Text.Trim().ToUpper();
                                                                LoadDocterandVerifiers(stringRequestID, "NONLOAD");
                                                                TABActive(6);
                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        Errorpopup(stringOutputResult1);

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    CommonFunctions.ShowMessageboot(this, "Please complete the doctor to update the verification status");
                                }
                            }

                        }
                    }
                }


            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDataRowsave = null;
                stringtype = null;
                stringValues = null;
                stringCmdArgument = null;
                stringServiceType1 = null;
                stringexp = null;
                stringuniqID = null;
                stringdocttype = null;
                stringDML_INDICATOR = null;
                stringServiceType2 = null;
                stringformid1 = null;
                stringcompleted = null;
                stringRequestID = null;
                stringMessage = null;
            }
        }

        protected void btnRejectdocter_Click(object sender, EventArgs e)
        {
            string[] stringValues = null;
            string stringCmdArgument = "";
            string stringuniqID = "";
            string stringdocttype = "";
            try
            {
                stringCmdArgument = ((Button)sender).CommandArgument;
                if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                {
                    stringValues = stringCmdArgument.Split(',');
                    if (stringValues != null && stringValues.Length > 0)
                    {
                        stringuniqID = stringValues[0];
                        stringdocttype = stringValues[1];
                        txtProcessCompletedRemarks.Text = "";
                        pnlupdateremarksDoctor.Visible = true;
                        UpdatePanelModalDoctor.Visible = true;
                        ModelpopuperrorDoctor.Show();
                        if (stringdocttype == "VERIFIER")
                        {
                            lblreject.Text = "Verifier Reject";
                        }
                        else
                        {
                            lblreject.Text = "Doctor Reject";
                        }
                        hdfuniqid.Value = stringuniqID;
                    }
                    else
                    {
                        hdfuniqid.Value = "";
                    }
                }


            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                stringValues = null;
                stringCmdArgument = null;
                stringuniqID = null;
                stringdocttype = null;
            }
        }
        private DataTable LoadDocterandVerifiersCOnfirm(string stringRequestID)//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V3";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringBoID = "";
            string stringServiceType = "";
            string stringExpression = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (stringRequestID.Length > 0)
                {
                    stringServiceType = "List2R1V1";
                    stringExpression = " and mrasdoc.be_id='" + stringBoID + "' and mrasdoc.request_id='" + stringRequestID + "'";

                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count > 0)
                        {
                            return objDatasetResult.Tables["t2"];
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                return null;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return null;
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = int.MaxValue;
                stringBoID = null;
                stringServiceType = null;
                stringExpression = null;
            }
        }
        private bool UpdateProcessStatusInREVERSEOrder(string stringTransSattus)//fix
        {
            bool boolStatus = false;
            DataRow objdatarow = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FDS001R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringServiceType = "";
            string stringexp = "";
            try
            {
                stringServiceType = "DEFAULT";
                stringexp = "";
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count == 0)
                    {
                        objdatarow = objDatasetResult.Tables["t2"].NewRow();
                        objdatarow["be_id"] = stringbeid;
                        objdatarow["remarks_id"] = System.Guid.NewGuid().ToString().ToUpper();
                        objdatarow["Request_ID"] = txtReqNo.Text.Trim();
                        objdatarow["remarks_desc"] = txtProcessCompletedDoctor.Text.Trim();
                        objdatarow["Status"] = txtMRStatus.Text.Trim();
                        if (stringTransSattus == "DOCTOR")
                        {
                            objdatarow["Trans_type"] = "DOCTOR";
                        }
                        else
                        {
                            objdatarow["Trans_type"] = "";
                        }
                        CommonFunctions.AssignAuditLogDetails(ref objdatarow);
                        objDatasetResult.Tables["t2"].Rows.Add(objdatarow);
                        objDatasetResult.Tables["t2"].Rows[0].RowState.ToString();

                        objDatasetResult = objDatasetResult.GetChanges();
                        stringServiceType = "OperationServiceDML";
                        objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);

                        if (intErrorCount == 0)
                        {
                            return true; 
                        }
                        else
                        {
                            Errorpopup(stringOutputResult);
                        }


                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }

                //}
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objdatarow = null;
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                stringbeid = null;
                stringServiceType = null;
                stringexp = null;
            }
            return boolStatus;
        }
        protected void btnConfirmprocessStatusDoc_Click(object sender, EventArgs e)
        {
            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V3";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataRow objDataRowsave = null;
            string stringServiceType1 = "";
            string stringexp = "";
            string stringtype = "";
            string stringDML_INDICATOR = "";
            string stringServiceType2 = "";
            string stringformid1 = "";
            string stringDOCTOVERIFER = "";
            string stringMessage = "";
            int intoverallDOCTORCompleted = 0;
            int intoverallDOCTORREJECTED = 0;
            string stringRequestID = "";
            try
            {
                pnlupdateremarksDoctor.Visible = false;
                UpdatePanelModalDoctor.Visible = false;
                ModelpopuperrorDoctor.Hide();
                //link button id
                if (hdfuniqid != null && hdfuniqid.Value.Length > 0)
                {
                    if (ViewState["DOCTERLISTFC0001"] != null)
                    {
                        objOrderTable = (DataTable)ViewState["DOCTERLISTFC0001"];
                    }

                    if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                    {
                        objDataRow = objOrderTable.Select("UNIQUE_ID='" + hdfuniqid.Value.ToString() + "' ");
                        if (objDataRow != null && objDataRow.Length > 0)
                        {
                            stringServiceType1 = "DEFAULT";
                            stringexp = "";
                            objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                            if (interrorcount == 0)
                            {
                                if (objDatasetResult != null && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count == 0)
                                {
                                    objDataRowsave = objDatasetResult.Tables["t2"].NewRow();

                                    objDataRowsave["BE_ID"] = objDataRow[0]["BE_ID"].ToString();
                                    objDataRowsave["REQUEST_ID"] = objDataRow[0]["REQUEST_ID"].ToString();
                                    objDataRowsave["DEPT_ID"] = objDataRow[0]["DEPT_ID"].ToString();
                                    objDataRowsave["EMP_NO"] = objDataRow[0]["EMP_NO"].ToString();
                                    objDataRowsave["NAME"] = objDataRow[0]["NAME"].ToString();
                                    objDataRowsave["MCR_NO"] = objDataRow[0]["MCR_NO"].ToString();
                                    objDataRowsave["REJ_REASON"] = txtProcessCompletedDoctor.Text.Trim();
                                    objDataRowsave["REJ_TIME_STAMP"] = DateTime.Now.ToString("dd-MM-yyyy");
                                    objDataRowsave["REMARKS"] = objDataRow[0]["REMARKS"].ToString();
                                    objDataRowsave["STATUS"] = "REJECTED";
                                    stringtype = objDataRow[0]["VERIFY_REF"].ToString();
                                    objDataRowsave["VERIFY_REF"] = stringtype;
                                    objDataRowsave["UNIQUE_ID"] = objDataRow[0]["UNIQUE_ID"].ToString();
                                    objDataRowsave["COMPLETED_DATE"] = DateTime.Now;
                                    objDataRowsave["DOC_SEQ_ID"] = objDataRow[0]["DOC_SEQ_ID"].ToString();
                                    objDataRowsave["SEQ_NO"] = objDataRow[0]["SEQ_NO"].ToString();
                                    objDataRowsave["reference_2"] = objDataRow[0]["reference_2"].ToString();
                                    objDataRowsave["DML_INDICATOR"] = "U";

                                    if (HttpContext.Current.Session["stringComputerName"] != null)
                                        objDataRowsave["MODIFIED_AT"] = HttpContext.Current.Session["stringComputerName"].ToString();
                                    if (HttpContext.Current.Session["G11EOSUser_Name"] != null)
                                        objDataRowsave["MODIFIED_BY"] = HttpContext.Current.Session["G11EOSUser_Name"].ToString();
                                    objDataRowsave["MODIFIED_ON"] = DateTime.Now;

                                    objDatasetResult.Tables["t2"].Rows.Add(objDataRowsave);

                                    if (objDatasetResult != null && objDatasetResult.Tables["t2"].Rows.Count > 0)
                                    {
                                        objDatasetResult.Tables["t2"].AcceptChanges();
                                        for (int intIndex = 0; intIndex < objDatasetResult.Tables["t2"].Rows.Count; intIndex++)
                                        {
                                            stringDML_INDICATOR = objDatasetResult.Tables["t2"].Rows[intIndex]["DML_INDICATOR"].ToString();

                                            if (stringDML_INDICATOR == "U")
                                            {
                                                objDatasetResult.Tables["t2"].Rows[intIndex].SetModified();
                                            }
                                        }

                                        objDatasetResult = objDatasetResult.GetChanges();
                                        stringServiceType2 = "OperationServiceDML";
                                        stringformid1 = "FC0001R1V3";
                                        objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType2, objDatasetResult.GetChanges(), stringformid1, out int intErrorCount, out string[] stringOutputResult1);
                                        if (intErrorCount == 0)
                                        {
                                            bool boolsuccesss = true;
                                            ////reject 
                                            bool boolUpdatestatusDOCTOR = false;
                                            DataTable objdatatable = null;
                                            if (Session["REQUESTID_FDS001R1V1"] != null)
                                            {
                                                stringRequestID = Session["REQUESTID_FDS001R1V1"].ToString();

                                            }
                                            objdatatable = LoadDocterandVerifiersCOnfirm(stringRequestID);

                                            if (objdatatable != null && objdatatable.Rows.Count > 0 && objdatatable.Select("VERIFY_REF ='DOCTOR'").Length > 0)
                                            {
                                                intoverallDOCTORCompleted = 0;
                                                if (objdatatable.Select("VERIFY_REF = 'DOCTOR' and STATUS = 'COMPLETED'").Length > 0)
                                                {
                                                    intoverallDOCTORCompleted = Convert.ToInt32(objdatatable.Select("VERIFY_REF ='DOCTOR' and STATUS = 'COMPLETED'").Length.ToString());
                                                }
                                                intoverallDOCTORREJECTED = 0;
                                                if (objdatatable.Select("VERIFY_REF = 'DOCTOR' and STATUS = 'REJECTED'").Length > 0)
                                                {
                                                    intoverallDOCTORREJECTED = Convert.ToInt32(objdatatable.Select("VERIFY_REF ='DOCTOR'  and STATUS = 'REJECTED'").Length.ToString());
                                                }
                                                if (intoverallDOCTORCompleted > 0)
                                                {
                                                    boolUpdatestatusDOCTOR = false;
                                                }
                                                else if (intoverallDOCTORREJECTED > 0)
                                                {
                                                    boolUpdatestatusDOCTOR = true;
                                                }
                                            }
                                            else
                                            {
                                                boolUpdatestatusDOCTOR = true;

                                            }
                                            if (boolUpdatestatusDOCTOR)
                                            {
                                                if (txtMRStatus.Text.ToUpper() == "PENDING REPORT" && stringtype.ToUpper() == "DOCTOR")
                                                {
                                                    if (UpdateProcessStatusInREVERSEOrder("DOCTOR"))
                                                    {
                                                        boolsuccesss = true;
                                                    }
                                                    else
                                                    {
                                                        boolsuccesss = false;
                                                    }
                                                }
                                            }
                                            stringDOCTOVERIFER = objDataRow[0]["VERIFY_REF"].ToString();
                                            if (stringDOCTOVERIFER != null && stringDOCTOVERIFER.ToString() == "DOCTOR")
                                            {
                                                stringMessage = "Doctor Rejected Successfully";
                                                CommonFunctions.ShowMessageboot(this, stringMessage);
                                                stringRequestID = txtReqNo.Text.Trim().ToUpper(); 
                                                LoadData(txtReqNo.Text.Trim(), "NONLOAD", "");
                                                LoadDocterandVerifiers(stringRequestID, "NONLOAD");
                                                TABActive(6);
                                            }
                                            else if (stringDOCTOVERIFER != null && stringDOCTOVERIFER.ToString() == "VERIFIER")
                                            {
                                                stringMessage = "Verifier Rejected Successfully";
                                                CommonFunctions.ShowMessageboot(this, stringMessage);
                                                stringRequestID = txtReqNo.Text.Trim().ToUpper();
                                                LoadData(txtReqNo.Text.Trim(), "NONLOAD", "");
                                                LoadDocterandVerifiers(stringRequestID, "NONLOAD");
                                                TABActive(6);
                                            }

                                        }
                                        else
                                        {
                                            Errorpopup(stringOutputResult1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }


            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDataRowsave = null;
                stringServiceType1 = null;
                stringexp = null;
                stringtype = null;
                stringDML_INDICATOR = null;
                stringServiceType2 = null;
                stringformid1 = null;
                stringDOCTOVERIFER = null;
                stringMessage = null;
                stringRequestID = null;
            }
        }
        protected void btnConfirmprocessCloseDoc_Click(object sender, EventArgs e)
        {
            try
            {

                ModelpopuperrorDoctor.Hide();
                pnlupdateremarksDoctor.Visible = false;
                UpdatePanelModalDoctor.Visible = false;
                hdfuniqid.Value = "";

                if (pnlreportpopup.Visible == true)
                {
                    mdlrbt.Show();
                    pnlreportpopup.Visible = true;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        protected void gvassigndoctor_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRowView objdatarowattachments = null;
            DataRow objDataRow = null;
            DataTable objdatatable = null;
            DataRow[] objdatarow = null;
            try
            {
                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }
                bool boolpendingreport = false;
                objdatarowattachments = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objdatarowattachments.Row;
                if (objDataRow != null)
                {
                    Button objbtnComplete = e.Row.FindControl("btnCompletedocter") as Button;
                    Button objbtnReject = e.Row.FindControl("btnRejectdocter") as Button;
                    if (objDataRow["REC_NO"].ToString().Length > 0)
                    {
                        objbtnComplete.Visible = true;
                        objbtnReject.Visible = true;
                        Button objbtndelete = e.Row.FindControl("btnDeletedocter") as Button;
                        objbtndelete.Visible = false;

                    }
                    else
                    {
                        objbtnComplete.Visible = false;
                        objbtnReject.Visible = false;
                    }
                    if (objDataRow["STATUS"].ToString() == "COMPLETED")
                    {
                        lnkbtnRecallRequest4.Visible = false;
                    }
                    if (txtMRStatus.Text.Trim() == "PENDING REPORT")
                    {
                        objbtnComplete.Enabled = true;
                    }
                    else
                    {
                        objbtnComplete.Enabled = false;
                    }
                    if ((txtMRStatus.Text.Trim() == "PENDING TRACING" || txtMRStatus.Text.Trim() == "PENDING DESPATCH" || txtMRStatus.Text.Trim() == "PENDING ASSIGNED" || txtMRStatus.Text.Trim() == "PENDING REPORT") && ((objDataRow["STATUS"].ToString() == "IN-PROGRESS") || (objDataRow["STATUS"].ToString() == "PENDING" && objDataRow["SEQ_NO"].ToString() == "1")))
                    {
                        objbtnReject.Enabled = true;
                    }
                    else
                    {
                        objbtnReject.Enabled = false;
                    }

                    if (objDataRow["STATUS"].ToString() == "COMPLETED" || objDataRow["STATUS"].ToString() == "REJECTED")
                    {
                        objbtnComplete.Enabled = false;
                        objbtnReject.Enabled = false;
                    }
                    if (Session["LoadDocterandVerifiersFC0001"] != null)
                    {
                        objdatatable = (DataTable)Session["LoadDocterandVerifiersFC0001"];

                        if (objdatatable != null && objdatatable.Rows.Count > 0)
                        {
                            objdatarow = objdatatable.Select("verify_ref='DOCTOR' and status ='REJECTED'");
                            if (objdatarow != null && objdatarow.Length > 0)
                            {
                                boolpendingreport = true;
                            }
                        }
                    }
                    if (!boolpendingreport)
                    {
                        int columnIndexToHide = 5;

                        if (columnIndexToHide >= 0 && columnIndexToHide < gvassigndoctor.Columns.Count)
                        {
                            ((TemplateField)gvassigndoctor.Columns[columnIndexToHide]).Visible = false;
                        }

                        int columnIndexToHide6 = 6;

                        if (columnIndexToHide6 >= 0 && columnIndexToHide6 < gvassigndoctor.Columns.Count)
                        {
                            ((TemplateField)gvassigndoctor.Columns[columnIndexToHide6]).Visible = false;
                        }
                    }
                    else
                    {
                        int columnIndexToHide = 5;

                        if (columnIndexToHide >= 0 && columnIndexToHide < gvassigndoctor.Columns.Count)
                        {
                            ((TemplateField)gvassigndoctor.Columns[columnIndexToHide]).Visible = true;
                        }

                        int columnIndexToHide6 = 6;

                        if (columnIndexToHide6 >= 0 && columnIndexToHide6 < gvassigndoctor.Columns.Count)
                        {
                            ((TemplateField)gvassigndoctor.Columns[columnIndexToHide6]).Visible = true;
                        }
                    }

                    if (txtMRStatus.Text.Trim().ToUpper() == "CANCELLED")
                    {
                        objbtnComplete.Enabled = false;
                        objbtnReject.Enabled = false;
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objdatarowattachments = null;
                objDataRow = null;
                objdatatable = null;
                objdatarow = null;
            }
        }

        protected void gvassignverifier_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRowView objdatarowattachments = null;
            DataRow objDataRow = null;
            DataTable objdatatable = null;
            DataRow[] objdatarow = null;
            try
            {
                GridViewRow objGridViewRow = e.Row;
                bool boolpendingreport = false;
                if (objGridViewRow.DataItem == null) { return; }

                objdatarowattachments = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objdatarowattachments.Row;
                if (objDataRow != null)
                {
                    Button objbtnComplete = e.Row.FindControl("btnCompletedocterverifier") as Button;
                    Button objbtnReject = e.Row.FindControl("btnRejectdocterverifier") as Button;
                    if (objDataRow["REC_NO"].ToString().Length > 0)
                    {
                        objbtnComplete.Visible = true;
                        objbtnReject.Visible = true;
                        Button objbtndelete = e.Row.FindControl("btnDeletedocterverifier") as Button;
                        objbtndelete.Visible = false;

                    }
                    else
                    {
                        objbtnComplete.Visible = false;
                        objbtnReject.Visible = false;
                    }


                    if (txtMRStatus.Text.Trim().ToUpper() == "FORWARDED" || txtMRStatus.Text.Trim().ToUpper() == "COLLECTED" || txtMRStatus.Text.Trim().ToUpper() == "CANCELLED")
                    {
                        objbtnComplete.Enabled = false ;
                    }
                    else
                    {
                        objbtnComplete.Enabled = true;
                    }

                    if ((txtMRStatus.Text.Trim() == "PENDING TRACING" || txtMRStatus.Text.Trim() == "PENDING DESPATCH" || txtMRStatus.Text.Trim() == "PENDING ASSIGNED" || txtMRStatus.Text.Trim() == "PENDING REPORT") && ((objDataRow["STATUS"].ToString() == "IN-PROGRESS") || (objDataRow["STATUS"].ToString() == "PENDING" && objDataRow["SEQ_NO"].ToString() == "1")))
                    {
                        objbtnReject.Enabled = true;
                    }
                    else
                    {
                        objbtnReject.Enabled = false;
                    }
                    if (objDataRow["STATUS"].ToString() == "COMPLETED" || objDataRow["STATUS"].ToString() == "REJECTED")
                    {
                        objbtnComplete.Enabled = false;
                        objbtnReject.Enabled = false;
                    }
                    if (Session["LoadDocterandVerifiersFC0001"] != null)
                    {
                        objdatatable = (DataTable)Session["LoadDocterandVerifiersFC0001"];

                        if (objdatatable != null && objdatatable.Rows.Count > 0)
                        {
                            objdatarow = objdatatable.Select("verify_ref='VERIFIER' and status ='REJECTED'");
                            if (objdatarow != null && objdatarow.Length > 0)
                            {
                                boolpendingreport = true;
                            }
                        }
                    }
                    if (!boolpendingreport)
                    {
                        int columnIndexToHide = 4;

                        if (columnIndexToHide >= 0 && columnIndexToHide < gvassignverifier.Columns.Count)
                        {
                            ((TemplateField)gvassignverifier.Columns[columnIndexToHide]).Visible = false;
                        }

                        int columnIndexToHide6 = 5;

                        if (columnIndexToHide6 >= 0 && columnIndexToHide6 < gvassignverifier.Columns.Count)
                        {
                            ((TemplateField)gvassignverifier.Columns[columnIndexToHide6]).Visible = false;
                        }
                    }
                    else
                    {
                        int columnIndexToHide = 4;

                        if (columnIndexToHide >= 0 && columnIndexToHide < gvassignverifier.Columns.Count)
                        {
                            ((TemplateField)gvassignverifier.Columns[columnIndexToHide]).Visible = true;
                        }

                        int columnIndexToHide6 = 5;

                        if (columnIndexToHide6 >= 0 && columnIndexToHide6 < gvassignverifier.Columns.Count)
                        {
                            ((TemplateField)gvassignverifier.Columns[columnIndexToHide6]).Visible = true;
                        }
                    }

                    if (txtMRStatus.Text.Trim().ToUpper() == "CANCELLED")
                    {
                        objbtnComplete.Enabled = false;
                        objbtnReject.Enabled = false;
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objdatarowattachments = null;
                objDataRow = null;
                objdatatable = null;
                objdatarow = null;
            }
        }

        #region popup

        //txtboxclear Dynamic
        protected void imgbtnCleardropdowntxtboxvalue_Click(object sender, ImageClickEventArgs e)
        {
            string buttonId = "";
            string ToolTip = "";
            string stringToolTip = "";
            string ID = "";
            string Name = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    ImageButton ButtonID = (ImageButton)sender;
                    if (ButtonID != null)
                    {
                        buttonId = ButtonID.ID;
                        ToolTip = ButtonID.AlternateText;
                        if (ToolTip.Length > 0)
                        {
                            stringValues = ToolTip.Split('_');
                            if (stringValues != null && stringValues.Length == 3)
                            {
                                stringToolTip = stringValues[0];
                                ID = stringValues[1];
                                Name = stringValues[2];
                                Control foundControlupdpnl = UpdatePanel1.ContentTemplateContainer.FindControl(ID);
                                Control foundControlNAme = UpdatePanel1.ContentTemplateContainer.FindControl(Name);
                                if (foundControlupdpnl != null && foundControlNAme != null)
                                {
                                    if (foundControlupdpnl is TextBox)
                                    {
                                        if (foundControlNAme is TextBox)
                                        {
                                            TextBox textBoxID = (TextBox)foundControlupdpnl;
                                            TextBox textBoxName = (TextBox)foundControlNAme;
                                            textBoxID.Text = textBoxName.Text = string.Empty;

                                        }
                                    }
                                }

                                if (stringToolTip.ToUpper() == "PROCESSTYPE")
                                {
                                    txtRptTypename.Text = "";
                                    txtRptTypeID.Text = "";
                                }
                                else if (stringToolTip.ToUpper() == "REQUESTTYPE")
                                {
                                    txtRptTypename.Text = "";
                                    txtRptTypeID.Text = "";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                buttonId = null;
                ToolTip = null;
                //stringToolTip = "";
                //ID = "";
                //Name = "";
                stringValues = null;
            }

        }

        protected void lnkbtnddlpopupID_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringId = "";
            string stringNAME = "";
            string txtID = "";
            string[] stringValues = null;
            string txtnameID = "";
            string updatepnlID = "";
            string stringProcessID = "";
            string stringReportFormat = "";
            string stringDeptID = "";
            string stringReqTYPEID = "";
            string stringPurpose = "";
            string stringMR_PROCESS_NAME = "";
            string stringREPORT_FORMAT_NAME = "";
            string stringREPORT_PURPOSE_NAME = "";
            string stringDuedate = "";
            string stringReqTypeNAME = "";
            string stringDeptNAME = "";
            string stringapptype = "";
            string stringMR_PAYMENT_AMT = "";
            string stringOLDAmount = "";
            string stringno_of_days_allowed = "";
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringId = stringValues[0];
                            stringNAME = stringValues[1];
                            if (hdnPopupDropdownValue != null && hdnPopupDropdownValue.Value.Length > 0)//&& hdnPopupDropdownValue.Value == "REQUESTORTYPE"
                            {
                                if (hdnPopuptxtboxValue != null && hdnPopuptxtboxValue.Value.Length > 0)
                                {
                                    if (hdnPopupupdatepnlValue != null && hdnPopupupdatepnlValue.Value.Length > 0)
                                    {
                                        if (hdnPopuptxtboxnameValue != null && hdnPopuptxtboxnameValue.Value.Length > 0)
                                        {
                                            txtID = hdnPopuptxtboxValue.Value.ToString();
                                            txtnameID = hdnPopuptxtboxnameValue.Value.ToString();
                                            updatepnlID = hdnPopupupdatepnlValue.Value.ToString();
                                            Control foundControltxtID = UpdatePanel1.ContentTemplateContainer.FindControl(txtID);
                                            Control foundControltxtNameID = UpdatePanel1.ContentTemplateContainer.FindControl(txtnameID);
                                            Control foundControlupdatepnlID = UpdatePanel1.ContentTemplateContainer.FindControl(updatepnlID);
                                            if (foundControltxtID != null && foundControltxtNameID != null)
                                            {
                                                if (foundControltxtID is TextBox)
                                                {
                                                    if (foundControltxtNameID is TextBox)
                                                    {
                                                        bool boolreporttype = true;
                                                        if (hdnPopupDropdownValue.Value == "REPORTTYPE")
                                                        {
                                                            if (stringValues != null && stringValues.Length >= 14)
                                                            {
                                                                stringMR_PAYMENT_AMT = stringValues[13];
                                                                int intNEWMR_PAYMENT_AMT = 0;
                                                                if (stringMR_PAYMENT_AMT.Length > 0)
                                                                {
                                                                    double doubleValue = Convert.ToDouble(stringMR_PAYMENT_AMT);
                                                                    intNEWMR_PAYMENT_AMT = Convert.ToInt32(doubleValue);
                                                                }

                                                                TextBox textBoxID = (TextBox)foundControltxtID;
                                                                TextBox textBoxName = (TextBox)foundControltxtNameID;


                                                                int intOLDMR_PAYMENT_AMT = 0;
                                                                stringOLDAmount = "";
                                                                stringOLDAmount = hdfmrreporttypeamount.Value.ToString();

                                                                if (stringOLDAmount.Length > 0)
                                                                {
                                                                    double doubleValue = Convert.ToDouble(stringOLDAmount);
                                                                    intOLDMR_PAYMENT_AMT = Convert.ToInt32(doubleValue);
                                                                }

                                                                if (txtMRStatus.Text.ToString() == "PENDING TRACING" || txtMRStatus.Text.ToString() == "PENDING DESPATCH")
                                                                {
                                                                    stringapptype = "";
                                                                    if (ddlApplicationStatus.SelectedItem != null && ddlApplicationStatus.SelectedValue.Length > 0)
                                                                    {
                                                                        stringapptype = ddlApplicationStatus.SelectedValue.ToString();
                                                                    }
                                                                    if ((stringapptype == "COPYREQUEST") || ((stringapptype != "COPYREQUEST") && (intOLDMR_PAYMENT_AMT <= intNEWMR_PAYMENT_AMT)))
                                                                    {
                                                                        textBoxID.Text = stringId;
                                                                        textBoxName.Text = stringNAME;
                                                                        boolreporttype = true;
                                                                    }
                                                                    else
                                                                    {
                                                                        boolreporttype = false;
                                                                        CommonFunctions.ShowMessageboot(this, "Report Type Value ,Should Not be Less Than Old Report Type Value");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    boolreporttype = true;
                                                                    textBoxID.Text = stringId;
                                                                    textBoxName.Text = stringNAME;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            TextBox textBoxID = (TextBox)foundControltxtID;
                                                            TextBox textBoxName = (TextBox)foundControltxtNameID;
                                                            textBoxID.Text = stringId;
                                                            textBoxName.Text = stringNAME;
                                                        }

                                                        if (hdnPopupDropdownValue.Value == "PROCESSTYPE")
                                                        {
                                                            if (stringValues != null && stringValues.Length == 3)
                                                            {
                                                                stringno_of_days_allowed = stringValues[2];
                                                                if (stringno_of_days_allowed.Length > 0)
                                                                {
                                                                    int intNoOfDays = Convert.ToInt32(stringno_of_days_allowed);
                                                                    txtDueDate.Text = DateTime.Now.AddDays(intNoOfDays - 1).ToString("dd-MM-yyyy");
                                                                }
                                                                else
                                                                {
                                                                    txtDueDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                txtDueDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                                                            }
                                                            txtRptTypename.Text = "";
                                                            txtRptTypeID.Text = "";
                                                        }
                                                        else if (hdnPopupDropdownValue.Value == "REQUESTTYPE")
                                                        {
                                                            txtRptTypename.Text = "";
                                                            txtRptTypeID.Text = "";
                                                        }
                                                        else if (hdnPopupDropdownValue.Value == "REQUESTOR")
                                                        {
                                                            ddlReq_SelectedIndexChanged(txtReqID, null);
                                                        }
                                                        else if (hdnPopupDropdownValue.Value == "REPORTTYPE" && boolreporttype == true)
                                                        {
                                                            stringProcessID = "";
                                                            stringReportFormat = "";
                                                            stringDeptID = "";
                                                            stringReqTYPEID = "";
                                                            stringPurpose = "";
                                                            stringMR_PROCESS_NAME = "";
                                                            stringREPORT_FORMAT_NAME = "";
                                                            stringREPORT_PURPOSE_NAME = "";
                                                            stringDuedate = "";
                                                            stringReqTypeNAME = "";
                                                            stringDeptNAME = "";
                                                            if (stringValues != null && stringValues.Length >= 10)
                                                            {
                                                                stringProcessID = stringValues[2];
                                                                stringReportFormat = stringValues[3];
                                                                stringDeptID = stringValues[4];
                                                                stringReqTYPEID = stringValues[5];
                                                                stringPurpose = stringValues[6];

                                                                stringMR_PROCESS_NAME = stringValues[7];
                                                                stringREPORT_FORMAT_NAME = stringValues[8];

                                                                stringREPORT_PURPOSE_NAME = stringValues[9];
                                                            }
                                                            if (stringValues != null && stringValues.Length >= 11)
                                                            {
                                                                stringDuedate = stringValues[10];
                                                            }
                                                            if (stringValues != null && stringValues.Length >= 12)
                                                            {
                                                                stringReqTypeNAME = stringValues[11];
                                                            }
                                                            if (stringValues != null && stringValues.Length >= 13)
                                                            {
                                                                stringDeptNAME = stringValues[12];
                                                            }

                                                            txtProcessTypeID.Text = stringProcessID;
                                                            updpnltxtProcessTypeID.Update();
                                                            txtProcessTypename.Text = stringMR_PROCESS_NAME;

                                                            txtRptFormatID.Text = stringReportFormat;
                                                            txtRptFormatname.Text = stringREPORT_FORMAT_NAME;
                                                            updpnltxtRptFormatID.Update();

                                                            txtDepartmentOUID.Text = stringDeptID;
                                                            txtDepartmentOUname.Text = stringDeptNAME;
                                                            updpnlDepartmentOUID.Update();

                                                            txtReqTypeID.Text = stringReqTYPEID;
                                                            txtReqTypename.Text = stringReqTypeNAME;
                                                            updpnltxtReqTypeID.Update();

                                                            txtPurposeID.Text = stringPurpose;
                                                            txtPurposename.Text = stringREPORT_PURPOSE_NAME;
                                                            updpnltxtPurposeID.Update();

                                                            if (stringDuedate.Length > 0)
                                                            {
                                                                int intNoOfDays = Convert.ToInt32(stringDuedate);
                                                                if (txtCreateDate.Text.Trim().Length > 0)
                                                                {
                                                                    DateTime objDateTimeCreated = CommonFunctions.ConvertToDateTime(txtCreateDate.Text, "dd-MM-yyyy");
                                                                    if (intNoOfDays > 1)
                                                                    { txtDueDate.Text = objDateTimeCreated.AddDays(intNoOfDays - 1).ToString("dd-MM-yyyy"); }
                                                                    else { txtDueDate.Text = DateTime.Now.ToString("dd-MM-yyyy"); }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                txtDueDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                                                            }

                                                            if (txtRptTypeID.Text.Trim().ToUpper() == "LOANIN" || txtRptTypeID.Text.Trim().ToUpper() == "LOANOUT")
                                                            {
                                                                txtLoanFromInst.Enabled = true;
                                                            }
                                                            else
                                                            {
                                                                txtLoanFromInst.Text = "";
                                                                txtLoanFromInst.Enabled = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (foundControlupdatepnlID != null)
                                            {
                                                if (foundControlupdatepnlID is UpdatePanel)
                                                {
                                                    UpdatePanel UpdatePanel = (UpdatePanel)foundControlupdatepnlID;
                                                    UpdatePanel.Update();
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            mdlpnlddlpopup.Hide();
                            Panel3.Visible = false;
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringId = null;
                stringNAME = null;
                txtID = null;
                stringValues = null;
                txtnameID = null;
                updatepnlID = null;
                stringProcessID = null;
                stringReportFormat = null;
                stringDeptID = null;
                stringReqTYPEID = null;
                stringPurpose = null;
                stringMR_PROCESS_NAME = null;
                stringREPORT_FORMAT_NAME = null;
                stringREPORT_PURPOSE_NAME = null;
                stringDuedate = null;
                stringReqTypeNAME = null;
                stringDeptNAME = null;
                stringapptype = null;
                stringMR_PAYMENT_AMT = null;
                stringOLDAmount = null;
                stringno_of_days_allowed = null;
            }

        }
        protected void btnclosOrganisationpopup_Click(object sender, EventArgs e)
        {
            try
            {

                mdlpnlddlpopup.Hide();
                Panel3.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }

        private void PopulatePagerdropdownpopup(int recordCount, int currentPage, int recto)
        {
            try
            {
                List<ListItem> pages = new List<ListItem>();
                int startIndex, endIndex;
                int pagerSpan = 5;
                int intpaging = CommonFunctions.GridViewPagesize(stringformIdddlpopup);
                double dblPageCount = (double)((decimal)recordCount / Convert.ToDecimal(intpaging));
                int pageCount = (int)Math.Ceiling(dblPageCount);
                var ssn = dblPageCount.ToString(CultureInfo.InvariantCulture).Split('.');
                if (ssn[0] == "0")
                {
                    pageCount = (int)Math.Round(dblPageCount);
                }
                if (currentPage == 0)
                {
                    currentPage = 1;
                    startIndex = 1;
                }
                else
                {
                    startIndex = currentPage > 1 && currentPage + pagerSpan - 1 < pagerSpan ? currentPage : 1;
                }

                endIndex = pageCount > pagerSpan ? pagerSpan : pageCount;
                if (currentPage > pagerSpan % 2)
                {
                    if (currentPage == 2)
                    {
                        endIndex = 5;
                    }
                    else
                    {
                        endIndex = currentPage + 2;
                    }
                }
                else
                {
                    endIndex = (pagerSpan - currentPage) + 1;
                }

                if (currentPage != 0)
                {
                    if (endIndex - (pagerSpan - 1) > startIndex)
                    {
                        startIndex = endIndex - (pagerSpan - 1);
                    }
                }
                if (endIndex > pageCount)
                {
                    endIndex = pageCount;
                    startIndex = ((endIndex - pagerSpan) + 1) > 0 ? (endIndex - pagerSpan) + 1 : 1;
                }
                //Add the First Page Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("First", "1"));
                }
                //Add the Previous Button.
                if (currentPage > 1)
                {
                    pages.Add(new ListItem("<<", (currentPage - 1).ToString()));
                }
                for (int i = startIndex; i <= endIndex; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
                }
                //Add the Next Button.
                if (currentPage < pageCount)
                {
                    pages.Add(new ListItem(">>", (currentPage + 1).ToString()));
                }
                //Add the Last Button.
                if (currentPage != pageCount)
                {
                    pages.Add(new ListItem("Last", pageCount.ToString()));
                }
                Repeater8.DataSource = pages;
                Repeater8.DataBind();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        protected void imgbtntrigerPopup_Click(object sender, ImageClickEventArgs e)
        {
            string stringApplicationStatus = "";
            string buttonId = "";
            string ToolTip = "";
            string ddlID = "";
            string txtID = "";
            string txtNAmeID = "";
            string updatepnlID = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    ImageButton ButtonID = (ImageButton)sender;
                    if (ButtonID != null)
                    {
                        buttonId = ButtonID.ID;
                        ToolTip = ButtonID.AlternateText;
                        if (ToolTip.Length > 0)
                        {
                            stringValues = ToolTip.Split('_');
                            if (stringValues != null && stringValues.Length == 4)
                            {
                                ddlID = stringValues[0];
                                txtID = stringValues[1];
                                txtNAmeID = stringValues[2];
                                updatepnlID = stringValues[3];
                                if (ddlID.Length > 0)
                                {
                                    if (ddlID == "REQUESTORTYPE")
                                    {
                                        lblpopupname.Text = "Report Type Selection";
                                    }
                                    else if (ddlID == "RELATIONSHIPWITHPATIENT")
                                    {
                                        lblpopupname.Text = "Relationship with Patient Selection";
                                    }
                                    else if (ddlID == "COSTCENTER")
                                    {
                                        lblpopupname.Text = "Cost Centre Selection";
                                    }
                                    else if (ddlID == "TYPEOFVISIT")
                                    {
                                        lblpopupname.Text = "Type of Visit Selection";
                                    }
                                    else if (ddlID == "DELIVERBY")
                                    {
                                        lblpopupname.Text = "Deliver By Selection";
                                    }
                                    else if (ddlID == "PRIORITY")
                                    {
                                        lblpopupname.Text = "Priority Selection";
                                    }
                                    else if (ddlID == "REPORTFORMAT")
                                    {
                                        lblpopupname.Text = "Report Format Selection";
                                    }
                                    else if (ddlID == "PURPOSE")
                                    {
                                        lblpopupname.Text = "Purpose Selection";
                                    }
                                    else if (ddlID == "RECEIVEDFROM")
                                    {
                                        lblpopupname.Text = "Received From Selection";
                                    }
                                    else if (ddlID == "PROCESSTYPE")
                                    {
                                        lblpopupname.Text = "Process Type Selection";
                                    }
                                    else if (ddlID == "REQUESTTYPE")
                                    {
                                        lblpopupname.Text = "Request Type Selection";
                                    }
                                    else if (ddlID == "REPORTTYPE")
                                    {
                                        lblpopupname.Text = "Report Type Selection";
                                    }
                                    else if (ddlID == "ADDREPORTTYPE")
                                    {
                                        lblpopupname.Text = "Additional Report Type Selection";
                                    }
                                    else if (ddlID == "REQUESTCATEGORY")
                                    {
                                        lblpopupname.Text = "Request Category Selection";
                                    }
                                    else if (ddlID == "RECMODRECORDTYPE")
                                    {
                                        lblpopupname.Text = "Record Type Selection";
                                    }
                                    else if (ddlID == "DEPARTMENTOU")
                                    {
                                        lblpopupname.Text = "Department OU Selection";

                                        if (ddlApplicationStatus.SelectedValue != null && ddlApplicationStatus.SelectedItem.Value != "")
                                        {
                                            stringApplicationStatus = ddlApplicationStatus.SelectedValue.ToString();
                                        }

                                        if (stringApplicationStatus.Length > 0 && stringApplicationStatus != "BATCHREQUESTBYPATIENT" && txtHRN.Text.Trim().Length == 0)
                                        {
                                            CommonFunctions.ShowMessageboot(this, "Please select a patient first, before proceed to Department OU selection!");
                                            TABActive(1);
                                        }
                                    }
                                    else if (ddlID == "REQUESTOR")
                                    {
                                        lblpopupname.Text = "Requestor Selection";

                                        if (ddlApplicationStatus.SelectedValue != null && ddlApplicationStatus.SelectedItem.Value != "")
                                        {
                                            stringApplicationStatus = ddlApplicationStatus.SelectedValue.ToString();

                                        }


                                        if (stringApplicationStatus.Length > 0 && stringApplicationStatus != "BATCHREQUESTBYPATIENT" && txtHRN.Text.Trim().Length == 0)
                                        {
                                            CommonFunctions.ShowMessageboot(this, "Please select a patient first, before proceed to requestor selection!");
                                            txtReqID.Text = "";
                                            txtReqname.Text = "";
                                            updpnltxtReqID.Update();
                                            TABActive(1);
                                            return;
                                        }


                                    }
                                    hdnPopupDropdownValue.Value = ddlID;
                                    hdnPopuptxtboxValue.Value = txtID;
                                    hdnPopuptxtboxnameValue.Value = txtNAmeID;
                                    hdnPopupupdatepnlValue.Value = updatepnlID;
                                    txtddlpopupvalue.Text = "";
                                    LoadProduct("");
                                }
                            }


                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringApplicationStatus = null;
                buttonId = null;
                //ToolTip = "";
                //ddlID = "";
                //txtID = "";
                //txtNAmeID = "";
                //updatepnlID = "";
                stringValues = null;
            }
        }

        private void LoadProduct(string stringexp01, int? RecordFrom = null, int? RecordTo = null)
        {
            int interrorcount = 0;
            int intrecordcount = 0;
            DataSet objDataSet = null;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            string stringformid = "";
            string stringServiceType = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            stringServiceType = "List1R1V1";
            int intRecordFrom = 0;
            int intRecordTo = int.MaxValue;
            string stringLstRefGroupID = "";
            try
            {

                intRecordFrom = intrecFromdropdownpopup;
                intRecordTo = intrecTodropdownpopup;
                stringOutputResult = new string[3];
                if (hdnPopupDropdownValue != null && hdnPopupDropdownValue.Value.Length > 0)
                {
                    if (hdnPopupDropdownValue.Value == "REQUESTORTYPE")
                    {
                        stringformid = "FA0028R1V1";
                        stringOrderBy = "mrreqts.order_id asc";
                        stringexp01 += "And mrreqts.be_id= '" + stringbeid + "' AND mrreqts.delmark='N'";
                    }
                    else if (hdnPopupDropdownValue.Value == "RELATIONSHIPWITHPATIENT")
                    {
                        stringformid = "FA0014R1V1";
                        stringOrderBy = "lst.short_name asc";
                        stringexp01 += "And lst.be_id= '" + stringbeid + "' AND lst.LSTGRP_ID like '%REQRELATION%' AND  lst.delmark='N'";

                    }
                    else if (hdnPopupDropdownValue.Value == "PRIORITY")
                    {
                        stringformid = "FA0014R1V1";
                        stringOrderBy = "lst.short_name asc";
                        stringLstRefGroupID = "MR_PRIORITY";
                        stringexp01 += "And lst.be_id= '" + stringbeid + "' AND lst.LSTGRP_ID= '" + stringLstRefGroupID.ToString() + "' AND  lst.delmark='N'";

                    }
                    else if (hdnPopupDropdownValue.Value == "RECEIVEDFROM")
                    {
                        stringformid = "FA0014R1V1";
                        stringOrderBy = "lst.short_name asc";
                        stringLstRefGroupID = "RECFROM";
                        stringexp01 += "And lst.be_id= '" + stringbeid + "' AND lst.LSTGRP_ID= '" + stringLstRefGroupID.ToString() + "' AND  lst.delmark='N'";

                    }
                    else if (hdnPopupDropdownValue.Value == "RECMODRECORDTYPE")
                    {
                        stringformid = "FA0029R1V1";
                        stringOrderBy = "mrretys.order_id asc";
                        stringexp01 += "And mrretys.be_id= '" + stringbeid + "' AND  mrretys.delmark='N'";

                    }
                    else if (hdnPopupDropdownValue.Value == "COSTCENTER")
                    {
                        stringformid = "FA0005R1V1";
                        stringOrderBy = "costcen.order_id asc";
                        stringexp01 += "And costcen.be_id= '" + stringbeid + "' And costcen.delmark='N'";
                    }
                    else if (hdnPopupDropdownValue.Value == "TYPEOFVISIT")
                    {
                        stringformid = "FA0030R1V1";
                        stringOrderBy = "tyvit.order_id asc";
                        stringexp01 += "And tyvit.be_id= '" + stringbeid + "' And tyvit.delmark='N'";
                    }
                    else if (hdnPopupDropdownValue.Value == "DELIVERBY")
                    {
                        stringformid = "FA0009R1V1";
                        stringOrderBy = "mrdelmos.order_id asc";
                        stringexp01 += "And mrdelmos.be_id= '" + stringbeid + "' And mrdelmos.delmark='N'";
                    }
                    else if (hdnPopupDropdownValue.Value == "REPORTFORMAT")
                    {
                        stringformid = "FA0025R1V1";
                        stringOrderBy = "mrrefors.order_id asc";
                        stringexp01 += "And mrrefors.be_id= '" + stringbeid + "' And mrrefors.delmark='N' ";
                    }
                    else if (hdnPopupDropdownValue.Value == "PURPOSE")
                    {
                        stringformid = "FA0021R1V1";
                        stringOrderBy = "mrpurs.order_id asc";
                        stringexp01 += "And mrpurs.be_id= '" + stringbeid + "' And mrpurs.delmark='N' ";
                    }
                    else if (hdnPopupDropdownValue.Value == "PROCESSTYPE")
                    {
                        stringformid = "FA0001R1V2";
                        stringOrderBy = "mrstprocs.short_name asc";
                        stringexp01 += "And mrstprocs.be_id= '" + stringbeid + "' And mrstprocs.delmark='N' ";
                    }
                    else if (hdnPopupDropdownValue.Value == "REQUESTTYPE")
                    {
                        stringformid = "FA0026R1V1";
                        stringOrderBy = "mrreqtyp.order_id asc";
                        stringexp01 += "And mrreqtyp.be_id= '" + stringbeid + "' And mrreqtyp.delmark='N' ";
                    }
                    else if (hdnPopupDropdownValue.Value == "REQUESTOR")
                    {
                        stringformid = "FA0027R1V1";
                        stringOrderBy = "mrreq.order_id asc";
                        stringexp01 += "And mrreq.be_id= '" + stringbeid + "' And mrreq.delmark='N' ";
                        if (ddlBlockBill.SelectedValue.ToString() == "YES")
                        {
                            txtReqAdd.CssClass = "form-control ReadOnly";
                        }
                        else
                        {
                            txtReqAdd.BackColor = Color.FromArgb(221, 245, 255);
                        }
                    }
                    else if (hdnPopupDropdownValue.Value == "REQUESTCATEGORY")
                    {
                        stringformid = "FA0022R1V1";
                        stringOrderBy = "mrreqcay.short_name asc";
                        stringexp01 += "And mrreqcay.be_id= '" + stringbeid + "' And mrreqcay.delmark='N' ";
                    }
                    else if (hdnPopupDropdownValue.Value == "DEPARTMENTOU")
                    {
                        stringformid = "FA0010R1V1";
                        stringOrderBy = "mrdep.short_name asc";
                        stringexp01 += "And mrdep.be_id= '" + stringbeid + "' And mrdep.delmark='N' ";
                    }
                    else if (hdnPopupDropdownValue.Value == "REPORTTYPE")
                    {
                        stringformid = "FA0024R1V1";
                        stringOrderBy = "mrrets.SHORT_NAME asc";
                        stringexp01 += "And mrrets.be_id= '" + stringbeid + "' And mrrets.delmark='N' AND mrrets.REFERENCE_NO_2 is not null ";
                        if (txtProcessTypeID.Text.Trim().Length > 0 && txtProcessTypename.Text.Trim().Length > 0)
                        {
                            stringexp01 += "AND mrrets.MRP_ID= '" + txtProcessTypeID.Text.Trim().ToString() + "'";
                        }
                        if (txtReqTypeID.Text.Trim().Length > 0 && txtReqTypename.Text.Trim().Length > 0 )
                        {
                            stringexp01 += "AND mrrets.REQUESTTYP_ID= '" + txtReqTypeID.Text.Trim().ToString() + "'";
                        } 
                    }
                    else if (hdnPopupDropdownValue.Value == "ADDREPORTTYPE")
                    {
                        stringformid = "FA0024R1V1";
                        stringOrderBy = "mrrets.SHORT_NAME asc";
                        stringexp01 += "And mrrets.be_id= '" + stringbeid + "' And mrrets.delmark='N' And mrrets.mrp_id='NONMR' AND mrrets.REFERENCE_NO_2 is not null ";
                    }
                }
                objDataSet = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp01, stringOrderBy, intRecordFrom, intRecordTo, out intrecordcount, out interrorcount, out stringOutputResult);

                PopulatePagerdropdownpopup(intrecordcount, intpageIndexdropdownpopup, intrecTodropdownpopup);

                if (interrorcount == 0)
                {
                    if (objDataSet != null && objDataSet.Tables.Count > 0 && objDataSet.Tables[0] != null && objDataSet.Tables[0].Rows.Count > 0)
                    {
                        gvlistPopUppurpose.DataSource = objDataSet.Tables[0];
                        gvlistPopUppurpose.DataBind();
                        mdlpnlddlpopup.Show();
                        Panel3.Visible = true;
                    }
                    else
                    {
                        gvlistPopUppurpose.DataSource = objDataSet.Tables[0];
                        gvlistPopUppurpose.DataBind();
                        CommonFunctions.ShowMessageboot(this, "No Records Found");
                        mdlpnlddlpopup.Show();
                        Panel3.Visible = true;
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);

                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                interrorcount = 0;
                intrecordcount = 0;
                objDataSet = null;
                stringOutputResult = null;
                stringOrderBy = null;
                stringformid = null;
                stringServiceType = null;
                stringbeid = null;
            }
        }

        protected void btnfindddlpopupRecord_Click(object sender, EventArgs e)
        {
            try
            {

                DropDownSearchCndition();
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        private void DropDownSearchCndition()
        {
            string stringExpression = "";
            string stringColumn1 = "";
            string stringColumn2 = "";
            try
            {
                if (hdnPopupDropdownValue != null && hdnPopupDropdownValue.Value.Length > 0)
                {
                    if (hdnPopupDropdownValue.Value == "REQUESTORTYPE")
                    {
                        stringColumn1 = "mrreqts.reqtyp_id";
                        stringColumn2 = "mrreqts.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "RELATIONSHIPWITHPATIENT" || hdnPopupDropdownValue.Value == "PRIORITY"
                       || hdnPopupDropdownValue.Value == "RELATIONSHIPWITHPATIENT" || hdnPopupDropdownValue.Value == "RECEIVEDFROM")
                    {
                        stringColumn1 = "lst.lst_id";
                        stringColumn2 = "lst.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "RECMODRECORDTYPE")
                    {
                        stringColumn1 = "mrretys.rectyp_id";
                        stringColumn2 = "mrretys.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "COSTCENTER")
                    {
                        stringColumn1 = "costcen.ID";
                        stringColumn2 = "costcen.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "TYPEOFVISIT")
                    {
                        stringColumn1 = "tyvit.TYPE_ID";
                        stringColumn2 = "tyvit.description";
                    }
                    else if (hdnPopupDropdownValue.Value == "DELIVERBY")
                    {
                        stringColumn1 = "mrdelmos.delmod_id";
                        stringColumn2 = "mrdelmos.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "REPORTFORMAT")
                    {
                        stringColumn1 = "mrrefors.rptfmt_id";
                        stringColumn2 = "mrrefors.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "PURPOSE")
                    {
                        stringColumn1 = "mrpurs.rptpur_id";
                        stringColumn2 = "mrpurs.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "PROCESSTYPE")
                    {
                        stringColumn1 = "mrstprocs.mrp_id";
                        stringColumn2 = "mrstprocs.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "REQUESTTYPE")
                    {
                        stringColumn1 = "mrreqtyp.requesttyp_id";
                        stringColumn2 = "mrreqtyp.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "REPORTTYPE" || hdnPopupDropdownValue.Value == "ADDREPORTTYPE")
                    {
                        stringColumn1 = "mrrets.rpttyp_id";
                        stringColumn2 = "mrrets.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "REQUESTOR")
                    {
                        stringColumn1 = "mrreq.rptreq_id";
                        stringColumn2 = "mrreq.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "REQUESTCATEGORY")
                    {
                        stringColumn1 = "mrreqcay.REQUESTTYP_ID";
                        stringColumn2 = "mrreqcay.short_name";
                    }
                    else if (hdnPopupDropdownValue.Value == "DEPARTMENTOU")
                    {
                        stringColumn1 = "mrdep.DEPT_ID";
                        stringColumn2 = "mrdep.short_name";
                    }
                    if (stringColumn1.Length > 0 && stringColumn2.Length > 0)
                    {
                        stringExpression = "AND ( " + stringColumn1 + " Like '%" + txtddlpopupvalue.Text.Trim().ToUpper() + "%' or " + stringColumn2 + " Like '%" + txtddlpopupvalue.Text.Trim().ToUpper() + "%'" + " )";
                    }

                    LoadProduct(stringExpression);

                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringExpression = null;
                stringColumn1 = null;
                stringColumn2 = null;
            }
        }

        protected void gvlistPopUppurpose_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringID = "";
            string stringdesc = "";
            string stringSort = string.Empty;
            DataRowView objDRV = null;
            DataRow objDataRow = null;
            string stringno_of_days_allowed = "";
            string stringProcessID = "";
            string stringReportFormat = "";
            string stringDeptID = "";
            string stringReqTYPEID = "";
            string stringREPORT_FORMAT_NAME = "";
            string stringPurpose = "";
            string stringMR_PROCESS_NAME = "";
            string stringREPORT_PURPOSE_NAME = "";
            string stringDuedate = "";
            string stringReqTypeNAME = "";
            string stringDeptNAME = "";
            string stringMR_PAYMENT_AMT = "";
            try
            {
                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }

                objDRV = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objDRV.Row;
                if (objDataRow != null)
                {
                    if (hdnPopupDropdownValue != null && hdnPopupDropdownValue.Value.Length > 0)
                    {
                        if (hdnPopupDropdownValue.Value == "REQUESTORTYPE")
                        {
                            stringID = objDataRow["reqtyp_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "RELATIONSHIPWITHPATIENT" || hdnPopupDropdownValue.Value == "PRIORITY"
                           || hdnPopupDropdownValue.Value == "RELATIONSHIPWITHPATIENT" || hdnPopupDropdownValue.Value == "RECEIVEDFROM")
                        {
                            stringID = objDataRow["lst_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "RECMODRECORDTYPE")
                        {
                            stringID = objDataRow["rectyp_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "COSTCENTER")
                        {
                            stringID = objDataRow["ID"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "TYPEOFVISIT")
                        {
                            stringID = objDataRow["TYPE_ID"].ToString();
                            stringdesc = objDataRow["description"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "DELIVERBY")
                        {
                            stringID = objDataRow["delmod_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "REPORTFORMAT")
                        {
                            stringID = objDataRow["rptfmt_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "PURPOSE")
                        {
                            stringID = objDataRow["rptpur_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "PROCESSTYPE")
                        {
                            stringID = objDataRow["mrp_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "REQUESTTYPE")
                        {
                            stringID = objDataRow["requesttyp_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "REPORTTYPE" || hdnPopupDropdownValue.Value == "ADDREPORTTYPE")
                        {
                            stringID = objDataRow["rpttyp_id"].ToString();
                            stringdesc = objDataRow["SHORT_NAME"].ToString() + "( $" + objDataRow["MR_PAYMENT_AMT"].ToString() + " )";
                        }
                        else if (hdnPopupDropdownValue.Value == "REQUESTOR")
                        {
                            stringID = objDataRow["rptreq_id"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "REQUESTCATEGORY")
                        {
                            stringID = objDataRow["REQUESTTYP_ID"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }
                        else if (hdnPopupDropdownValue.Value == "DEPARTMENTOU")
                        {
                            stringID = objDataRow["DEPT_ID"].ToString();
                            stringdesc = objDataRow["short_name"].ToString();
                        }

                        if (stringID != null && stringID.Trim().Length > 0)
                        { ((LinkButton)e.Row.FindControl("lnkbtnddlpopupID")).Text = stringID; }

                        if (stringdesc != null && stringdesc.Trim().Length > 0)
                        { ((Label)e.Row.FindControl("lnkbtnddlpopupdesc")).Text = stringdesc; }

                        if (hdnPopupDropdownValue.Value == "PROCESSTYPE")
                        {
                            stringno_of_days_allowed = objDataRow["no_of_days_allowed"].ToString();
                            LinkButton objButtonName = (LinkButton)e.Row.FindControl("lnkbtnddlpopupID");
                            objButtonName.CommandArgument = stringID + "," + stringdesc + "," + stringno_of_days_allowed;
                        }
                        if (hdnPopupDropdownValue.Value == "REPORTTYPE")
                        {
                            stringProcessID = objDataRow["mrp_id"].ToString();
                            stringReportFormat = objDataRow["REPORT_FORMAT_ID"].ToString();
                            stringDeptID = objDataRow["dept_id"].ToString();
                            stringReqTYPEID = objDataRow["REQUESTTYP_ID"].ToString();
                            stringPurpose = objDataRow["REPORT_PURPOSE_ID"].ToString();

                            stringMR_PROCESS_NAME = objDataRow["MR_PROCESS_NAME"].ToString();
                            stringREPORT_FORMAT_NAME = objDataRow["REPORT_FORMAT_NAME"].ToString();
                            stringREPORT_PURPOSE_NAME = objDataRow["REPORT_PURPOSE_NAME"].ToString();
                            stringDuedate = objDataRow["no_of_days_allowed"].ToString();
                            stringReqTypeNAME = objDataRow["REQUEST_TYPE_NAME"].ToString();
                            stringDeptNAME = objDataRow["DEP_SHORT_NAME"].ToString();
                            stringMR_PAYMENT_AMT = objDataRow["MR_PAYMENT_AMT"].ToString();

                            LinkButton objButtonName = (LinkButton)e.Row.FindControl("lnkbtnddlpopupID");
                            objButtonName.CommandArgument = stringID + "," + stringdesc + "," + stringProcessID + "," + stringReportFormat + "," + stringDeptID + "," + stringReqTYPEID + "," + stringPurpose + "," + stringMR_PROCESS_NAME + "," + stringREPORT_FORMAT_NAME + "," + stringREPORT_PURPOSE_NAME + "," + stringDuedate + "," + stringReqTypeNAME + "," + stringDeptNAME + "," + stringMR_PAYMENT_AMT;
                        }
                        else
                        {
                            LinkButton objButtonName = (LinkButton)e.Row.FindControl("lnkbtnddlpopupID");
                            objButtonName.CommandArgument = stringID + "," + stringdesc;
                        }

                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringID = null;
                stringdesc = null;
                stringSort = null;
                objDRV = null;
                objDataRow = null;
                stringno_of_days_allowed = null;
                stringProcessID = null;
                stringReportFormat = null;
                stringDeptID = null;
                stringReqTYPEID = null;
                stringREPORT_FORMAT_NAME = null;
                stringPurpose = null;
                stringMR_PROCESS_NAME = null;
                stringREPORT_PURPOSE_NAME = null;
                stringDuedate = null;
                stringReqTypeNAME = null;
                stringDeptNAME = null;
                stringMR_PAYMENT_AMT = null;
            }
        }

        protected void lnkPagedropdownpopup_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session["PageIndex1"] != null)
                {
                    intpageIndexdropdownpopup = Convert.ToInt32(Session["PageIndex1"].ToString());
                    Session["PageIndex"] = intpageIndexdropdownpopup;
                }
                else
                {
                    intpageIndexdropdownpopup = int.Parse((sender as LinkButton).CommandArgument);
                    if (intpageIndexdropdownpopup != 0)
                    {
                        Session["PageIndex"] = intpageIndexdropdownpopup;
                    }
                }

                if (intpageIndexdropdownpopup == 1)
                {
                    intrecFromdropdownpopup = 0;
                }
                else
                {
                    int intrecFromProcessHistory1 = (intpageIndexdropdownpopup * intrecTodropdownpopup) - intrecTodropdownpopup;
                    intrecFromdropdownpopup = intrecFromProcessHistory1 + 1;
                    intrecTodropdownpopup = intrecFromProcessHistory1 + CommonFunctions.GridViewPagesize(stringformIdddlpopup);

                }
                hdnClickEvent.Value = "true";

                if (hdnClickEvent.Value == "true")
                {
                    DropDownSearchCndition();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
        private void ControlsDropdownValues(string stringType, bool boolEnable)//fix
        {
            try
            {
                if (stringType != null && stringType.Trim().Length > 0)
                {
                    switch (stringType.Trim().ToUpper())
                    {
                        case "REQUESTORTYPE":
                            {
                                imgbtntrigerPopup.Enabled = boolEnable;
                                imgbtnCleardropdowntxtboxvalue.Enabled = boolEnable;
                                break;
                            }
                        case "RELATIONSHIPWITHPATIENT":
                            {
                                imgbtntxtReqRelationIDtrigger.Enabled = boolEnable;
                                imgbtnclrtxtReqRelationID.Enabled = boolEnable;
                                break;
                            }
                        case "COSTCENTER":
                            {
                                imgbtntrigerCOSTCENTER.Enabled = boolEnable;
                                imgbtnClearCOSTCENTER.Enabled = boolEnable;
                                break;
                            }
                        case "TYPEOFVISIT":
                            {
                                imgbtntrigerTYPEOFVISIT.Enabled = boolEnable;
                                imgbtnClearTYPEOFVISIT.Enabled = boolEnable;
                                break;
                            }
                        case "DELIVERBY":
                            {
                                imgbtntrigerDELIVERBY.Enabled = boolEnable;
                                imgbtnClearDELIVERBY.Enabled = boolEnable;
                                break;
                            }
                        case "PRIORITY":
                            {
                                imgbtntrigerPRIORITY.Enabled = boolEnable;
                                imgbtnClearPRIORITY.Enabled = boolEnable;
                                break;
                            }
                        case "REPORTFORMAT":
                            {
                                imgbtntrigerREPORTFORMAT.Enabled = boolEnable;
                                imgbtnClearREPORTFORMAT.Enabled = boolEnable;
                                break;
                            }
                        case "PURPOSE":
                            {
                                imgbtntrigerPURPOSE.Enabled = boolEnable;
                                imgbtnClearPURPOSE.Enabled = boolEnable;
                                break;
                            }
                        case "RECEIVEDFROM":
                            {
                                imgbtntrigerRECEIVEDFROM.Enabled = boolEnable;
                                imgbtnClearRECEIVEDFROM.Enabled = boolEnable;
                                break;
                            }
                        case "RECMODRECORDTYPE":
                            {
                                imgbtntrigerRECMODRECORDTYPE.Enabled = boolEnable;
                                imgbtnClearRECMODRECORDTYPE.Enabled = boolEnable;
                                break;
                            }
                        case "PROCESSTYPE":
                            {
                                imgbtntrigerPROCESSTYPE.Enabled = boolEnable;
                                imgbtnClearPROCESSTYPE.Enabled = boolEnable;
                                break;
                            }
                        case "REPORTTYPE":
                            {
                                imgbtntrigerREPORTTYPE.Enabled = boolEnable;
                                imgbtnClearREPORTTYPE.Enabled = boolEnable;
                                break;
                            }
                        case "ADDREPORTTYPE":
                            {
                                imgbtntrigerADDREPORTTYPE.Enabled = boolEnable;
                                imgbtnClearADDREPORTTYPE.Enabled = boolEnable;
                                break;
                            }
                        case "REQUESTTYPE":
                            {
                                imgbtntrigerREQUESTTYPE.Enabled = boolEnable;
                                imgbtnClearREQUESTTYPE.Enabled = boolEnable;
                                break;
                            }
                        case "REQUESTOR":
                            {
                                imgbtntrigerREQUESTOR.Enabled = boolEnable;
                                imgbtnClearREQUESTOR.Enabled = boolEnable;
                                break;
                            }
                        case "REQUESTCATEGORY":
                            {
                                imgbtntrigerREQUESTCATEGORY.Enabled = boolEnable;
                                imgbtnClearREQUESTCATEGORY.Enabled = boolEnable;
                                break;
                            }
                        case "DEPARTMENTOU":
                            {
                                imgbtntrigerDEPARTMENTOU.Enabled = boolEnable;
                                imgbtnClearDEPARTMENTOU.Enabled = boolEnable;
                                break;
                            }
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }

        #endregion

        #region popup TRANSFER INST
        protected void btnTransferOK_Click(object sender, EventArgs e)
        {
            DataRow objdatarow = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            DataSet objDatasetResult = null; 
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V7";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringErrorMsg = "";
            bool boolrecexixts = true;
            string stringID = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringServiceType = "";
            string stringexp = "";
            string stringmessage = "";
            try
            {
                if (CommonFunctions.ValidateASPControls(GetThisSCreenControls("TAB2"), out stringErrorMsg))
                {
                    stringServiceType = "DEFAULT";
                    stringexp = "";
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t1"].Rows.Count == 0)
                        {

                            if (boolrecexixts)
                            {
                                objdatarow = objDatasetResult.Tables["t1"].NewRow();
                                objdatarow["TRANSFER_TO"] = ddltransferInst.SelectedValue.ToString().ToUpper();
                                objdatarow["HRN_ID"] = txtpatientIDEncripted.Text.ToString();
                                objdatarow["PATIENT_ID"] = txtpatientID.Text.ToString();
                                objdatarow["REQUEST_ID"] = txtReqNo.Text.ToString();
                                objdatarow["MR_ID"] = txtMRNumberHEADER.Text.ToString();
                                objdatarow["REQUESTTYP_ID"] = txtReqTypeID.Text.ToString();
                                objdatarow["RPTTYP_ID"] = txtRptTypeID.Text.ToString();
                                objdatarow["RPTFMT_ID"] = txtRptFormatID.Text.ToString();
                                objdatarow["RPTPUR_ID"] = txtPurposeID.Text.ToString();
                                objdatarow["RecTyp_ID"] = txtRecTypeID.Text.ToString();
                                objdatarow["MRP_ID"] = txtProcessTypeID.Text.ToString();
                                objdatarow["DELMOD_ID"] = txtDelToID.Text.ToString();
                                objdatarow["DEPT_ID"] = txtDepartmentOUID.Text.ToString();
                                objdatarow["MR_STATUS"] = txtMRStatus.Text.ToString();
                                objdatarow["REQ_ADDRESS"] = txtReqAdd.Text.ToString();
                                objdatarow["REQ_MAIL_ADDRESS"] = txtMailAdd.Text.ToString();
                                objdatarow["REQUESTED_BY"] = txtReqBy.Text.ToString();
                                objdatarow["RECEIVED_FROM"] = txtRecFrmID.Text.ToString();
                                objdatarow["PRIORITY"] = txtPriorityID.Text.ToString();
                                if (rbtEMR.Checked == true)
                                {
                                    objdatarow["EMR"] = "Y";
                                }
                                else if (rbt1EMR.Checked == true)
                                {
                                    objdatarow["EMR"] = "N";
                                }
                                else if (rbtnboth.Checked == true)
                                {
                                    objdatarow["EMR"] = "BOTH";
                                }

                                objdatarow["RPTREQ_ID"] = ViewState["rptreq_id"].ToString();
                                CommonFunctions.AssignAuditLogDetails(ref objdatarow);


                                objDatasetResult.Tables["t1"].Rows.Add(objdatarow);
                                objDatasetResult.Tables["t1"].Rows[0].RowState.ToString();

                                objDatasetResult = objDatasetResult.GetChanges();
                                stringServiceType = "MRISService_DataManipulationR1V1";
                                objDatasetResult = CommonFunctions.DataManipulationExcelR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);

                                if (intErrorCount == 0)
                                {
                                    if (stringOutputResult[0] != null && stringOutputResult[0].Length > 0)
                                    {
                                        stringID = stringOutputResult[0].ToString();
                                    }
                                    stringmessage = "Institution Transfer Completed" + " " + stringID + ".";
                                    ShowMessageandReloadPage(this, stringmessage, "FC0001R1V1.aspx"); 
                                }
                                else
                                {
                                    CommonFunctions.ShowMessageboot(this, "Patient does  not exists"); 
                                }
                            }

                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                else
                {
                    CommonFunctions.ShowMessageboot(this, stringErrorMsg);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objdatarow = null;
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                stringServiceType = null;
                stringexp = null;
                stringmessage = null;
            }

        }

        protected void btnTransferCancel_Click(object sender, EventArgs e)
        {

        }

        protected void imgbtnInstTransfer_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                LoadDoctorHostINS();
                ModelpopupTransfer.Show();
                pnlupdateTransfer.Visible = true;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }

        private void LoadDoctorHostINS()
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0034R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            objDatasetResult = new DataSet();
            string stringbeid = CommonFunctions.GETBussinessEntity();
            DataTable objdatatableLoadInstID = null;
            string stringexp = "";
            string stringServiceType = "";
            try
            {

                stringexp = "And INST.BE_ID<> '" + stringbeid + "'And INST.ins_id<> '" + stringbeid + "'And INST.delmark= 'N'";
                stringServiceType = "List2R1V1";
                ddltransferInst.ClearSelection();
                if (Session["SSNLOADINSTITUTION"] != null)
                {
                    objdatatableLoadInstID = (DataTable)Session["SSNLOADINSTITUTION"];
                }
                if ((objdatatableLoadInstID == null) || (objdatatableLoadInstID != null && objdatatableLoadInstID.Rows.Count == 0))
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t2"] != null && objDatasetResult.Tables["t2"].Rows.Count > 0)
                        {
                            objdatatableLoadInstID = objDatasetResult.Tables["t2"];
                            Session["SSNLOADINSTITUTION"] = objdatatableLoadInstID;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                if (objdatatableLoadInstID != null && objdatatableLoadInstID.Rows.Count > 0)
                {
                    ddltransferInst.DataValueField = "INS_ID";
                    ddltransferInst.DataTextField = "INS_NAME";
                    ddltransferInst.DataSource = objdatatableLoadInstID;
                    ddltransferInst.DataBind();
                    ddltransferInst.Items.Insert(0, new ListItem("", ""));
                }
                else
                {
                    ddltransferInst.DataSource = objDatasetResult;
                    ddltransferInst.DataBind();
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                objdatatableLoadInstID = null;
                stringexp = null;
                stringServiceType = null;
            }

        }

        #endregion

        protected void lnkbtncopyreqLinkexistrec_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringHRNId = "";
            string stringRequest_ID = "";
            string stringQueryFLAG = "";
            string stringQueryString = "";
            string stringWebURLCC = "";
            string script = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringHRNId = stringValues[0];
                            stringRequest_ID = stringValues[1];


                            if (stringRequest_ID.Length > 0)
                            {
                                Session["REQUEST_FromSummary"] = stringRequest_ID;
                                Session["boolModifyRights"] = false;
                                stringQueryFLAG = "Y";
                                stringQueryString = "&QUERYCASE=" + stringQueryFLAG;
                                stringWebURLCC = ConfigurationManager.AppSettings["MRREQQUERYCASE"].ToString() + stringQueryString;

                                script = "window.open('" + stringWebURLCC + "','_blank');";
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "OpenWindow", script, true);

                            }
                            else
                            {
                                Session["boolModifyRights"] = null;
                                Session["REQUEST_FromSummary"] = null;
                            }
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringHRNId = null;
                stringRequest_ID = null;
                stringQueryFLAG = null;
                stringQueryString = null;
                stringWebURLCC = null;
                script = null;
                stringValues = null;
            }
        } 
        private void Clearpopvalues()
        {
            try
            {
                txtSecretaryname.Text = "";
                txtdocempnumdocselection.Text = "";
                ddlDepartmentOUDoctersel.ClearSelection();
                txtMCRNumberdocselection.Text = "";
                txtDoctorNamedocselection.Text = "";
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        protected void rbtndoctor_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                pnlDepartmentOU.Visible = true;
                pnlMCRNumber.Visible = true;
                pnlDocempno.Visible = true;
                pnlDoctorname.Visible = true;
                pnlSecretaryname.Visible = false;


                ddlDepartmentOUDoctersel.Items.Clear();
                Clearpopvalues();
                LoadDepartmentOU();

                updtpnldocterselection.Visible = true;
                mdlpopupdoctorselection.Show();

                gvlistdoctorselectionpopup.DataSource = null;
                gvlistdoctorselectionpopup.DataBind();
                PopulatePagerdoctorselection(0, intpageIndexdocselection);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }

        protected void rbtndepsec_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                pnlDepartmentOU.Visible = true;
                pnlMCRNumber.Visible = false;
                pnlDocempno.Visible = false;
                pnlDoctorname.Visible = false;
                pnlSecretaryname.Visible = true;

                ddlDepartmentOUDoctersel.Items.Clear();
                Clearpopvalues();
                LoadDepartmentOUHIMSDEPT();

                updtpnldocterselection.Visible = true;
                mdlpopupdoctorselection.Show();

                gvlistdoctorselectionpopup.DataSource = null;
                gvlistdoctorselectionpopup.DataBind();
                PopulatePagerdoctorselection(0, intpageIndexdocselection);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }

        protected void rbtnhims_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                pnlDepartmentOU.Visible = false;
                pnlMCRNumber.Visible = false;
                pnlDocempno.Visible = true;
                pnlDoctorname.Visible = true;
                pnlSecretaryname.Visible = false;
                Clearpopvalues();

                updtpnldocterselection.Visible = true;
                mdlpopupdoctorselection.Show();
                lbldoctorEmployeeNo.Text = "User ID";
                lblDoctorName.Text = "User Name";

                gvlistdoctorselectionpopup.DataSource = null;
                gvlistdoctorselectionpopup.DataBind();
                PopulatePagerdoctorselection(0, intpageIndexdocselection);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }

        private void LoadDepartmentOUHIMSDEPT()//fixed
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0010R1V1";
            string stringOrderBy = "short_name asc";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringexp = "";
            string stringServiceType = "";
            try
            {
                ddlDepartmentOUDoctersel.Items.Clear();
                stringexp = "And be_id= '" + stringbeid + "' And delmark= 'N'";

                stringServiceType = "List1R1V1";

                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {

                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                    {
                        if (objDatasetResult.Tables["t1"].Columns.Contains("short_name") && objDatasetResult.Tables["t1"].Columns.Contains("DEPT_ID"))
                        {
                            ddlDepartmentOUDoctersel.DataTextField = "short_name";
                            ddlDepartmentOUDoctersel.DataValueField = "DEPT_ID";
                            ddlDepartmentOUDoctersel.DataSource = objDatasetResult.Tables["t1"];
                            ddlDepartmentOUDoctersel.DataBind();
                            ddlDepartmentOUDoctersel.Items.Insert(0, new ListItem("", ""));
                        }
                        else
                        {
                            ddlDepartmentOUDoctersel.DataSource = null;
                            ddlDepartmentOUDoctersel.DataBind();
                        }

                    }
                    else
                    {
                        ddlDepartmentOUDoctersel.DataSource = null;
                        ddlDepartmentOUDoctersel.DataBind();

                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                stringexp = null;
                stringServiceType = null;
            }
        }
        protected void gvlistdoctorselectionpopup_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRowView objdatarowattachments = null;
            DataRow objDataRow = null;
            try
            {
                if (e.Row.RowType == DataControlRowType.Header)
                {
                    Label lblEMP_NOr = (Label)e.Row.FindControl("lblEMP_NOr");
                    Label lblDescription = (Label)e.Row.FindControl("lblDescription");
                    if (lblEMP_NOr != null)
                    {
                        if (rbtndepsec.Checked == true)
                        {
                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                            {
                                lblEMP_NOr.Text = "Verifier ID";
                            }

                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                            {
                                lblEMP_NOr.Text = "Secretary ADID";
                            }

                        }
                        else if (rbtndoctor.Checked == true)
                        {
                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                            {
                                lblEMP_NOr.Text = "Verifier ID";
                            }

                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                            {
                                lblEMP_NOr.Text = "Doctor Employee Number";
                            }
                        }
                        else if (rbtnhims.Checked == true)
                        {
                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                            {
                                lblEMP_NOr.Text = "Verifier ID";
                            }

                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                            {
                                lblEMP_NOr.Text = "User ID";
                            }
                        }
                    }
                    if (lblDescription != null)
                    {

                        if (rbtndepsec.Checked == true)
                        {
                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                            {
                                lblDescription.Text = "Verifier Name";
                            }

                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                            {
                                lblDescription.Text = "Secretary Name";
                            }
                        }
                        else if (rbtndoctor.Checked == true)
                        {
                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                            {
                                lblDescription.Text = "Verifier Name";
                            }

                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                            {
                                lblDescription.Text = "Doctor Name";
                            }
                        }
                        else if (rbtnhims.Checked == true)
                        {
                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "VERIFIER")
                            {
                                lblDescription.Text = "Verifier Name";
                            }

                            if (ViewState["DocterSelectionPopup"] != null && ViewState["DocterSelectionPopup"].ToString() == "DOCTOR")
                            {
                                lblDescription.Text = "User Name";
                            }
                        }
                    }
                }

                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }

                objdatarowattachments = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objdatarowattachments.Row;
                if (objDataRow != null)
                {
                    if (rbtndepsec.Checked == true)
                    {
                        int columnIndexToHide = 2;

                        if (columnIndexToHide >= 0 && columnIndexToHide < gvlistdoctorselectionpopup.Columns.Count)
                        {
                            ((TemplateField)gvlistdoctorselectionpopup.Columns[columnIndexToHide]).Visible = false;
                        }
                        int columnIndexToHide6 = 3;

                        if (columnIndexToHide6 >= 0 && columnIndexToHide6 < gvlistdoctorselectionpopup.Columns.Count)
                        {
                            ((TemplateField)gvlistdoctorselectionpopup.Columns[columnIndexToHide6]).Visible = true;
                        }
                    }
                    else if (rbtndoctor.Checked == true)
                    {
                        int columnIndexToHide = 2;

                        if (columnIndexToHide >= 0 && columnIndexToHide < gvlistdoctorselectionpopup.Columns.Count)
                        {
                            ((TemplateField)gvlistdoctorselectionpopup.Columns[columnIndexToHide]).Visible = true;
                        }

                        int columnIndexToHide6 = 3;

                        if (columnIndexToHide6 >= 0 && columnIndexToHide6 < gvlistdoctorselectionpopup.Columns.Count)
                        {
                            ((TemplateField)gvlistdoctorselectionpopup.Columns[columnIndexToHide6]).Visible = true;
                        }
                    }
                    else if (rbtnhims.Checked == true)
                    {
                        int columnIndexToHide = 2;

                        if (columnIndexToHide >= 0 && columnIndexToHide < gvlistdoctorselectionpopup.Columns.Count)
                        {
                            ((TemplateField)gvlistdoctorselectionpopup.Columns[columnIndexToHide]).Visible = false;
                        }

                        int columnIndexToHide3 = 3;

                        if (columnIndexToHide3 >= 0 && columnIndexToHide3 < gvlistdoctorselectionpopup.Columns.Count)
                        {
                            ((TemplateField)gvlistdoctorselectionpopup.Columns[columnIndexToHide3]).Visible = false;
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objdatarowattachments = null;
                objDataRow = null;
            }
        }
        protected void ddlBlockBill_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (ddlBlockBill.SelectedValue == "YES")
                {
                    txtRegReferenceNo.BackColor = Color.FromArgb(221, 245, 255);
                }
                else
                {
                    ddlReference.Enabled = false;
                    ddlReference.CssClass = "form-control ReadOnly";
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }

        #region remarks save
        private object[] GetThisSCreenControls(string stringType)
        {
            object[] objControls = null;
            try
            {
                if (stringType.ToUpper() == "TAB1")
                {
                    objControls = new object[] {
                        txtHRN,
                        ddlRemarks,
                        ddlTarget,
                    };

                    return objControls;
                }
                else if (stringType.ToUpper() == "TAB2")
                {
                    objControls = new object[] {
                        ddltransferInst,
                    };

                    return objControls;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

            return objControls;
        }
        protected void lnkbtnaddremarks_Click(object sender, EventArgs e)
        {
            string stringErrorMsg = "";
            string stringremarksID = "";
            DataTable objDataTableAddAttachments = null;
            string stringbeid = CommonFunctions.GETBussinessEntity().ToString();
            bool boolrecordexits = true;
            bool boolrecrdsave = false;
            DataRow[] objdatarow = null;
            try
            {
                if (CommonFunctions.ValidateASPControls(GetThisSCreenControls("TAB1"), out stringErrorMsg))
                {
                    if (ddlRemarks.SelectedItem != null)
                    {
                        stringremarksID = ddlRemarks.SelectedItem.Value.ToString();
                    }

                    if (Session["ADD_REMARKS"] != null)
                    { objDataTableAddAttachments = (DataTable)Session["ADD_REMARKS"]; }
                    else
                    {
                        LoadDefauldRemarks();
                        if (Session["ADD_REMARKS"] != null)
                        { objDataTableAddAttachments = (DataTable)Session["ADD_REMARKS"]; }
                    }
                    if (objDataTableAddAttachments != null)
                    {

                        if (objDataTableAddAttachments != null && objDataTableAddAttachments.Rows.Count > 0)
                        {
                            if (Session["REQUESTID_REMARKSEDIT"] == null)
                            {
                                if (objDataTableAddAttachments.Select("Request_ID= '" + txtReqNo.Text.Trim() + "'").Length > 0)
                                {
                                    boolrecordexits = true;
                                }
                            }
                            if (boolrecordexits)
                            {
                                if (Session["REQUESTID_REMARKSEDIT"] != null)
                                {
                                    objdatarow = objDataTableAddAttachments.Select("Request_ID= '" + txtReqNo.Text.Trim() + "' AND REFERENCE_1='" + Session["REQUESTID_REMARKSEDIT"].ToString() + "'");

                                    if (objdatarow != null && objdatarow.Length > 0)
                                    {
                                        objdatarow[0]["be_id"] = stringbeid;
                                        objdatarow[0]["Request_ID"] = txtReqNo.Text.Trim();
                                        if (ddlRemarks.SelectedItem != null)
                                        {
                                            objdatarow[0]["REGRMK_ID"] = stringremarksID.ToString();
                                            Session["RemarksDelete"] = objdatarow[0]["REGRMK_ID"].ToString();
                                        }
                                        if (ddlTarget.SelectedItem != null)
                                        {
                                            objdatarow[0]["TARG_AUD"] = ddlTarget.SelectedItem.Value.ToString();
                                        }
                                        if (txtRemarkdte.Text.Trim().Length > 0)
                                        {
                                            DateTime objdatetime = DateTime.Now;
                                            objdatarow[0]["REMARKS_DATE"] = objdatetime;
                                        }

                                        objdatarow[0]["REMARK_ID"] = objdatarow[0]["REMARK_ID"].ToString();
                                        objdatarow[0]["remarks"] = txtDesc.Text.Trim();
                                        if (LoadRemarksInfo(txtReqNo.Text.Trim(), Session["REQUESTID_REMARKSEDIT"].ToString()))
                                        {
                                            objdatarow[0]["DML_INDICATOR"] = "I";
                                        }
                                        else
                                        {
                                            objdatarow[0]["DML_INDICATOR"] = "U";
                                        }
                                        objDataTableAddAttachments.AcceptChanges();
                                        boolrecrdsave = true;
                                    }
                                    else
                                    {
                                        AddbtnInsert(stringremarksID, objDataTableAddAttachments, stringbeid);
                                        boolrecrdsave = true;
                                    }
                                }
                                else
                                {
                                    AddbtnInsert(stringremarksID, objDataTableAddAttachments, stringbeid);
                                    boolrecrdsave = true;
                                }
                            }
                            else
                            {
                                CommonFunctions.ShowMessageboot(this, "Record already exist");
                            }
                        }
                        else
                        {
                            AddbtnInsert(stringremarksID, objDataTableAddAttachments, stringbeid);
                            boolrecrdsave = true;
                        }
                        if (boolrecrdsave)
                        {
                            SaveRemarks("");
                        }

                        ClearValuesafteradd();
                        LoadRemarks(txtReqNo.Text.Trim(), "NONLOAD", true, false, false);

                        Session["REQUESTID_REMARKSEDIT"] = null;
                    }
                }
                else
                {
                    TABActive(7);
                    CommonFunctions.ShowMessageboot(this, stringErrorMsg);
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringErrorMsg = null;
                stringremarksID = null;
                objDataTableAddAttachments = null;
                stringbeid = null;
                objdatarow = null;
            }
        }
        private bool LoadRemarksInfo(string stringRequestNo, string stringremid)//fixed
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            bool boolidexist = true;
            string stringbeid = CommonFunctions.GETBussinessEntity().ToString();
            string stringServiceType1 = "";
            string stringexp012 = "";
            try
            {
                if (stringRequestNo != null && stringRequestNo.Trim().Length > 0)
                {
                    stringServiceType1 = "List9R1V1";
                    stringexp012 = " and mrregrmk.be_id='" + stringbeid + "' and mrregrmk.REQUEST_ID='" + stringRequestNo + "' and mrregrmk.REMARK_ID='" + stringremid + "'";

                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t9"] != null && objDatasetResult.Tables["t9"].Rows.Count > 0)
                        {
                            boolidexist = false;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                return boolidexist;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return boolidexist;
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                stringServiceType1 = null;
                stringexp012 = null;
            }
        }

        private void ClearValuesafteradd()//fixed
        {
            try
            {
                txtDesc.Text = "";
                ddlTarget.ClearSelection();
                ddlRemarks.ClearSelection();
                txtRemarkdte.Text = Convert.ToDateTime(DateTime.Now).ToString("dd-MM-yyyy");
                Session["FC0007R1V1_REMARKID"] = null;
                ddlRemarks.Enabled = true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        } 
        private void AddbtnInsert(string stringremarksID, DataTable objDataTableAddAttachments, string stringbeid)
        {
            DataRow objdatarow = null;
            string stringtransid = "";
            try
            {
                objdatarow = objDataTableAddAttachments.NewRow();

                objdatarow["be_id"] = stringbeid;
                objdatarow["Request_ID"] = txtReqNo.Text.Trim();
                if (ddlRemarks.SelectedItem != null)
                {
                    objdatarow["REGRMK_ID"] = stringremarksID.ToString();
                    objdatarow["SHORT_NAME"] = ddlRemarks.SelectedItem.Text.ToString();
                }
                if (ddlTarget.SelectedItem != null)
                {
                    objdatarow["TARG_AUD"] = ddlTarget.SelectedItem.Value.ToString();
                }
                if (txtRemarkdte.Text.Trim().Length > 0)
                {
                    DateTime objdatetime = DateTime.Now;
                    objdatarow["REMARKS_DATE"] = objdatetime;
                }
                stringtransid = DateTime.Now.ToString("HHmmssfff");
                objdatarow["reference_1"] = stringtransid;
                objdatarow["REMARK_ID"] = stringtransid;
                objdatarow["Remarks"] = txtDesc.Text.Trim().ToUpper();

                CommonFunctions.AssignAuditLogDetails(ref objdatarow);

                objdatarow["DML_INDICATOR"] = "I";
                objDataTableAddAttachments.Rows.Add(objdatarow);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objdatarow = null;
                stringtransid = null;
            }
        }
        protected void lnkbtnRemarkID_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringref_1 = "";
            string stringreqid = "";
            string stringremid = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringref_1 = stringValues[0];
                            stringreqid = stringValues[1];
                            stringremid = stringValues[2];

                            if (txtReqNo.Text.Trim().Length > 0)
                            {
                                Session["REQUESTID_REMARKSEDIT"] = stringref_1;
                                LoadDataRemarks(stringreqid, stringref_1, stringremid);
                            }
                            else
                            {
                                Session["REQUESTID_REMARKSEDIT"] = null;
                            }
                        }
                        else
                        {
                            Session["REQUESTID_REMARKSEDIT"] = null;
                        }
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringref_1 = null;
                stringreqid = null;
                stringremid = null;
                stringValues = null;
            }
        }
        private void LoadDataRemarks(string stringreq_id, string stringref_1, string stringremid)
        {
            DataRow[] objdatarow = null;
            DataTable objDataTable = null;
            string stringTARG_AUD = "";
            string stringRemarkID = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                if (stringreq_id.Length > 0 && stringref_1.Length > 0)
                {
                    objDataTable = (DataTable)Session["ADD_REMARKS"];
                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        objdatarow = objDataTable.Select("be_id= '" + stringbeid + "' and  REMARK_ID='" + stringref_1 + "' and REQUEST_ID='" + stringreq_id + "' ");
                        if (objdatarow != null && objdatarow.Length > 0)
                        {
                            ddlTarget.ClearSelection();
                            stringTARG_AUD = objdatarow[0]["TARG_AUD"].ToString();
                            if (ddlTarget.Items.FindByValue(stringTARG_AUD) != null)
                                ddlTarget.Items.FindByValue(stringTARG_AUD).Selected = true;

                            ddlRemarks.ClearSelection();
                            stringRemarkID = objdatarow[0]["REGRMK_ID"].ToString();
                            if (ddlRemarks.Items.FindByValue(stringRemarkID) != null)
                                ddlRemarks.Items.FindByValue(stringRemarkID).Selected = true;

                            if (objdatarow[0]["REMARKS_DATE"] != null && objdatarow[0]["REMARKS_DATE"].ToString().Trim().Length > 0)
                            { txtRemarkdte.Text = Convert.ToDateTime(objdatarow[0]["REMARKS_DATE"]).ToString("dd-MM-yyyy"); }

                            txtDesc.Text = objdatarow[0]["remarks"].ToString();
                            ddlRemarks.Enabled = false;
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objdatarow = null;
                objDataTable = null;
                stringTARG_AUD = null;
                stringRemarkID = null;
                stringbeid = null;
            }
        }

        private bool SaveRemarks(string stringTYPE)
        {
            DataTable objDataTableAddReports = null;
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataSet objDatasetResult1 = null;
            string stringformid = "FC0001R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            string stringBoID = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            DataRow objDataRow = null;
            int intErrorCount = 0;
            string stringDMLIndicator = "";
            string stringcustemerid3 = "";
            string stringServiceType1 = "";
            string stringformid1 = "";
            try
            {
                if (Session["ADD_REMARKS"] != null)
                { objDataTableAddReports = (DataTable)Session["ADD_REMARKS"]; }


                if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t9"].Rows.Count == 0)
                        {
                            for (int intIndex = 0; intIndex < objDataTableAddReports.Rows.Count; intIndex++)
                            {
                                objDataRow = objDatasetResult.Tables["t9"].NewRow();

                                stringDMLIndicator = objDataTableAddReports.Rows[intIndex]["DML_INDICATOR"].ToString();

                                if (stringDMLIndicator != null && stringDMLIndicator.Trim().Length > 0)
                                {
                                    objDataRow["DELMARK"] = "N";
                                    objDataRow["REFERENCE_5"] = stringDMLIndicator;
                                    objDataRow["Request_ID"] = objDataTableAddReports.Rows[intIndex]["Request_ID"].ToString();
                                    objDataRow["REGRMK_ID"] = objDataTableAddReports.Rows[intIndex]["REGRMK_ID"].ToString();
                                    objDataRow["TARG_AUD"] = objDataTableAddReports.Rows[intIndex]["TARG_AUD"].ToString();
                                    objDataRow["REMARKS_DATE"] = objDataTableAddReports.Rows[intIndex]["REMARKS_DATE"].ToString();
                                    objDataRow["reference_1"] = objDataTableAddReports.Rows[intIndex]["reference_1"].ToString();
                                    objDataRow["REMARK_ID"] = objDataTableAddReports.Rows[intIndex]["REMARK_ID"].ToString();
                                    objDataRow["Remarks"] = objDataTableAddReports.Rows[intIndex]["Remarks"].ToString();
                                    objDataRow["SHORT_NAME"] = objDataTableAddReports.Rows[intIndex]["SHORT_NAME"].ToString();
                                    objDataRow["LONG_NAME"] = objDataTableAddReports.Rows[intIndex]["Remarks"].ToString();
                                    CommonFunctions.AssignAuditLogDetails(ref objDataRow);

                                    objDatasetResult.Tables["t9"].Rows.Add(objDataRow);

                                    objDatasetResult.Tables["t9"].AcceptChanges();

                                    objDatasetResult.Tables["t9"].Rows[0].RowState.ToString();
                                }
                                objDatasetResult.Tables["t9"].AcceptChanges();


                            }
                            if (objDatasetResult.Tables["t9"].Rows.Count > 0)
                            {
                                for (int intIndex = 0; intIndex < objDatasetResult.Tables["t9"].Rows.Count; intIndex++)
                                {
                                    stringcustemerid3 = objDatasetResult.Tables["t9"].Rows[intIndex]["REFERENCE_5"].ToString();
                                    if (stringcustemerid3 == "D")
                                    {
                                        objDatasetResult.Tables["t9"].Rows[intIndex].Delete();
                                    }
                                    else if (stringcustemerid3 == "I")
                                    {
                                        objDatasetResult.Tables["t9"].Rows[intIndex].SetAdded();
                                    }
                                    else if (stringcustemerid3 == "U")
                                    {
                                        objDatasetResult.Tables["t9"].Rows[intIndex].SetModified();
                                    }
                                }

                                objDatasetResult = objDatasetResult.GetChanges();
                                stringServiceType1 = "OperationServiceDML";
                                stringformid1 = "FC0001R1V1";
                                objDatasetResult1 = CommonFunctions.DataManipulationR1V1(stringServiceType1, objDatasetResult.GetChanges(), stringformid1, out intErrorCount, out string[] stringOutputResult1);
                                if (intErrorCount == 0)
                                {
                                    return true;
                                }
                                else
                                {
                                    Errorpopup(stringOutputResult1);
                                    return false;
                                }
                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        return false;
                    }
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException); return false;
            }
            finally
            {
                objDataTableAddReports = null;
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                objDatasetResult1 = null;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
                stringBoID = null;
                objDataRow = null;
                intErrorCount = 0;
                stringDMLIndicator = null;
                stringcustemerid3 = null;
                stringServiceType1 = null;
                stringformid1 = null;
            }
        }

        private void LoadDefauldRemarks()
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringformid = "FC0001R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            try
            {
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables["t9"].Rows.Count == 0)
                    {
                        Session["ADD_REMARKS"] = objDatasetResult.Tables["t9"];
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
            }
        }
        protected void btnDelete_Click(object sender, EventArgs e)
        {
            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            string stringCmdArgument = "";
            string stringref_1 = "";
            string stringreqid = "";
            string stringremid = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringref_1 = stringValues[0];
                            stringreqid = stringValues[1];
                            stringremid = stringValues[2];


                            if (Session["ADD_REMARKS"] != null)
                            {
                                objOrderTable = (DataTable)Session["ADD_REMARKS"];
                            }

                            if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                            {
                                if (stringref_1.Length > 0)
                                {
                                    objDataRow = objOrderTable.Select("reference_1='" + stringref_1 + "' and Request_ID='" + stringreqid + "' and REMARK_ID='" + stringref_1 + "'");
                                } 
                                if (objDataRow != null && objDataRow.Length > 0)
                                {
                                    if (objDataRow[0]["DML_INDICATOR"].ToString() == "I")
                                    {
                                        objDataRow[0].Delete();
                                    }
                                    else
                                    {
                                        objDataRow[0]["DML_INDICATOR"] = "D";
                                    }
                                }

                                objOrderTable.AcceptChanges();
                                Session["ADD_REMARKS"] = objOrderTable;
                                SaveRemarks(""); 
                                ClearValuesRemarks();
                                LoadRemarks(txtReqNo.Text.Trim(), "NONLOAD", true, false, false);
                            }

                        }
                    }
                }


            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                stringCmdArgument = null;
                stringref_1 = null;
                stringValues = null;
            } 
        }

        protected void imgbtnDelete_Click(object sender, ImageClickEventArgs e)
        {  
        }
        private void ClearValuesRemarks()//fixed
        {
            try
            {
                txtDesc.Text = "";
                ddlTarget.ClearSelection();
                ddlRemarks.ClearSelection();
                txtRemarkdte.Text = Convert.ToDateTime(DateTime.Now).ToString("dd-MM-yyyy");
                Session["FC0007R1V1_REMARKID"] = null;
                Session["ADD_REMARKS"] = null;
                ddlRemarks.Enabled = true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        private void LoadRemarks()//fixed
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0023R1V1";
            string stringOrderBy = "mreeks.ORDER_ID asc,mreeks.short_name asc";
            int intFromRecord = 0;
            int intToRecord = 5000;
            DataTable objdatatableRemarks = null;
            string stringDeleteMark = "";
            string stringexp012 = "";
            string stringServiceType = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                ddlRemarks.Items.Clear();
                stringDeleteMark = "N";
                stringexp012 = "And mreeks.be_id= '" + stringbeid + "' And mreeks.delmark= '" + stringDeleteMark.ToString() + "'";
                stringServiceType = "List1R1V1";
                if (Session["SSNLOADREMARKS"] != null)
                {
                    objdatatableRemarks = (DataTable)Session["SSNLOADREMARKS"];
                }
                if ((objdatatableRemarks == null) || (objdatatableRemarks != null && objdatatableRemarks.Rows.Count == 0))
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objdatatableRemarks = objDatasetResult.Tables["t1"];
                            Session["SSNLOADREMARKS"] = objdatatableRemarks;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                if (objdatatableRemarks != null && objdatatableRemarks.Rows.Count > 0)
                {
                    ddlRemarks.DataTextField = "short_name";
                    ddlRemarks.DataValueField = "rptrmk_id";
                    ddlRemarks.DataSource = objdatatableRemarks;
                    ddlRemarks.DataBind();
                    ddlRemarks.Items.Insert(0, new ListItem("", ""));

                    ddlRemarks.SelectedIndex = 1;
                }
                else
                {
                    ddlRemarks.DataSource = null;
                    ddlRemarks.DataBind();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objdatatableRemarks = null;
                stringDeleteMark = null;
                stringexp012 = null;
                stringServiceType = null;
                stringbeid = null;
            }
        }

        private void LoadTarget()//fixed
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FAD1012R1V1";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringOrderBy = "ags.ACCESS_GRP_DESC asc";
            DataTable objdatatableLoadTarget = null;
            string stringexp = "";
            string stringServiceType = "";
            try
            {
                ddlTarget.Items.Clear();
                stringexp = "and ags.be_id= '" + stringbeid + "' and ACCESS_GRP_ID <>'HIMS SUPERVISOR' ";
                stringServiceType = "List1R1v1AdminServiceClient";
                if (Session["SSNLOADTARGET"] != null)
                {
                    objdatatableLoadTarget = (DataTable)Session["SSNLOADTARGET"];
                }
                if ((objdatatableLoadTarget == null) || (objdatatableLoadTarget != null && objdatatableLoadTarget.Rows.Count == 0))
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objdatatableLoadTarget = objDatasetResult.Tables["t1"];
                            Session["SSNLOADTARGET"] = objdatatableLoadTarget;
                        }

                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }

                if (objdatatableLoadTarget != null && objdatatableLoadTarget.Rows.Count > 0)
                {
                    ddlTarget.DataTextField = "ACCESS_GRP_DESC";
                    ddlTarget.DataValueField = "ACCESS_GRP_ID";
                    ddlTarget.DataSource = objdatatableLoadTarget;
                    ddlTarget.DataBind();
                    ddlTarget.Items.Insert(0, new ListItem("", ""));
                    if (objdatatableLoadTarget.Select("ACCESS_GRP_ID='ALL'").Length == 0)
                    {
                        ddlTarget.Items.Insert(1, new ListItem("ALL", "ALL"));
                    }
                    ddlTarget.SelectedIndex = 1;
                }
                else
                {
                    ddlTarget.DataSource = null;
                    ddlTarget.DataBind();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                stringexp = null;
                stringServiceType = null;
            }


        }
        protected void ddlRemarks_SelectedIndexChanged(object sender, EventArgs e)
        {
            string stringddlRemarks = "";
            try
            {
                if (ddlRemarks.SelectedItem != null && ddlRemarks.SelectedValue.ToString().Length > 0)
                {
                    stringddlRemarks = ddlRemarks.SelectedItem.Text.ToString();
                    txtDesc.Text = stringddlRemarks;
                }
                else
                {
                    txtDesc.Text = "";
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringddlRemarks = null;
            }
        }


        protected void lnkbtnremarksclear_Click(object sender, EventArgs e)
        {
            try
            {
                ClearValuesRemarks();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        #endregion


        #region saveenquiry 
        private void LoadDefauldenquiry()
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringformid = "FC0003R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            try
            {
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count == 0)
                    {
                        Session["LoadEnquiryFC0001"] = objDatasetResult.Tables["t1"];
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
            }
        }
        protected void lnkbtnenquiryadd_Click(object sender, EventArgs e)
        {
            string stringErrorMsg = "";
            string stringremarksID = "";
            DataTable objDataTableAddAttachments = null;
            string stringbeid = CommonFunctions.GETBussinessEntity().ToString();
            bool boolrecordexits = true;
            bool boolrecrdsave = false;
            DataRow[] objdatarow = null;
            try
            {
                if (ValidateControls())
                {
                    if (Session["mrp_idFC0003R1V1"] != null)
                    {
                        stringremarksID = Session["mrp_idFC0003R1V1"].ToString();
                    }

                    if (Session["LoadEnquiryFC0001"] != null)
                    { objDataTableAddAttachments = (DataTable)Session["LoadEnquiryFC0001"]; }
                    else
                    {
                        LoadDefauldenquiry();
                        if (Session["LoadEnquiryFC0001"] != null)
                        { objDataTableAddAttachments = (DataTable)Session["LoadEnquiryFC0001"]; }
                    }
                    if (objDataTableAddAttachments != null)
                    {

                        if (objDataTableAddAttachments != null && objDataTableAddAttachments.Rows.Count > 0)
                        {
                            if (Session["mrp_idFC0003R1V1"] == null)
                            {
                                if (objDataTableAddAttachments.Select("Request_ID= '" + txtReqNo.Text.Trim() + "' AND mr_enq_id='" + stringremarksID + "'").Length > 0)
                                {
                                    boolrecordexits = false;
                                }
                            }
                            if (boolrecordexits)
                            {

                                objdatarow = objDataTableAddAttachments.Select("Request_ID= '" + txtReqNo.Text.Trim() + "' AND mr_enq_id='" + stringremarksID + "'");

                                if (objdatarow != null && objdatarow.Length > 0)
                                {
                                    objdatarow[0]["Request_ID"] = txtReqNo.Text.Trim();
                                    objdatarow[0]["Callers_Name"] = txtCName.Text.Trim().ToUpper();
                                    objdatarow[0]["Callers_Enquiry"] = txtCEnq.Text.Trim().ToUpper();
                                    objdatarow[0]["Staffs_Name"] = txtSName.Text.Trim().ToUpper();
                                    objdatarow[0]["Staffs_Response"] = txtSRes.Text.Trim().ToUpper();
                                    if (ViewState["hidFldEnqID"] != null)
                                    {
                                        objdatarow[0]["MR_Enq_ID"] = ViewState["hidFldEnqID"].ToString();
                                    }
                                    objdatarow[0]["Remarks"] = txtRemarks.Text.Trim().ToUpper();
                                    objdatarow[0]["reference_1"] = ddlEnqStatus.SelectedItem.Value.ToString();

                                    if (LoadEnquiryInfo(txtReqNo.Text.Trim(), stringremarksID))
                                    {
                                        objdatarow[0]["DML_INDICATOR"] = "I";
                                    }
                                    else
                                    {
                                        objdatarow[0]["DML_INDICATOR"] = "U";
                                    }
                                    objDataTableAddAttachments.AcceptChanges();
                                    boolrecrdsave = true;
                                }
                                else
                                {
                                    AddbtnInsertEnquiry(stringremarksID, objDataTableAddAttachments, stringbeid);
                                    boolrecrdsave = true;
                                }
                            }
                            else
                            {
                                CommonFunctions.ShowMessageboot(this, "Record already exist");
                            }
                        }
                        else
                        {
                            AddbtnInsertEnquiry(stringremarksID, objDataTableAddAttachments, stringbeid);
                            boolrecrdsave = true;
                        }
                        if (boolrecrdsave)
                        {
                            SaveEnquiry("INSERT");
                        } 
                        ClearValuesENQ();
                        objDataTableAddAttachments.AcceptChanges();
                        if (Session["REQUEST_FromSummary"] != null && Session["REQUEST_FromSummary"].ToString().Trim().Length > 0)
                        {
                            string stringRequestID = Session["REQUEST_FromSummary"].ToString();
                            LoadEnquiry(stringRequestID, "NONLOAD", true,false);
                        } 

                        Session["mrp_idFC0003R1V1"] = null;
                    }
                }
                else
                {
                    TABActive(7);
                    CommonFunctions.ShowMessageboot(this, stringErrorMsg);
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringErrorMsg = null;
                stringremarksID = null;
                objDataTableAddAttachments = null;
                stringbeid = null;
                objdatarow = null;
            }
        } 
        private void AddbtnInsertEnquiry(string stringremarksID, DataTable objDataTableAddAttachments, string stringbeid)
        {
            DataRow objdatarow = null;
            try
            {
                objdatarow = objDataTableAddAttachments.NewRow();

                objdatarow["be_id"] = stringbeid;
                objdatarow["Request_ID"] = txtReqNo.Text.Trim();
                objdatarow["Callers_Name"] = txtCName.Text.Trim().ToUpper();
                objdatarow["Callers_Enquiry"] = txtCEnq.Text.Trim().ToUpper();
                objdatarow["Staffs_Name"] = txtSName.Text.Trim().ToUpper();
                objdatarow["Staffs_Response"] = txtSRes.Text.Trim().ToUpper();
                objdatarow["Enq_Date"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                if (ViewState["hidFldEnqID"] != null)
                {
                    objdatarow["MR_Enq_ID"] = ViewState["hidFldEnqID"].ToString();
                }
                else
                {
                    objdatarow["mr_enq_id"] = Guid.NewGuid();
                }
                objdatarow["Remarks"] = txtRemarks.Text.Trim().ToUpper();
                objdatarow["reference_1"] = ddlEnqStatus.SelectedItem.Value.ToString();


                CommonFunctions.AssignAuditLogDetails(ref objdatarow);

                objdatarow["DML_INDICATOR"] = "I";
                objDataTableAddAttachments.Rows.Add(objdatarow);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objdatarow = null;
            }
        }

        private bool LoadEnquiryInfo(string stringRequestNo, string stringremid)//fixed
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0003R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            bool boolidexist = true;
            string stringbeid = CommonFunctions.GETBussinessEntity().ToString();
            string stringServiceType1 = "";
            string stringexp012 = "";
            try
            {
                if (stringRequestNo != null && stringRequestNo.Trim().Length > 0)
                {
                    stringServiceType1 = "List1R1V1";
                    stringexp012 = " and mreh.be_id='" + stringbeid + "' and mreh.REQUEST_ID='" + stringRequestNo + "' and mreh.mr_enq_id='" + stringremid + "'";

                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            boolidexist = false;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                return boolidexist;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return boolidexist;
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                stringServiceType1 = null;
                stringexp012 = null;
            }
        }
        private void LoadEnquiryStatus()//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0014R1V1";
            string stringOrderBy = "lst.short_name asc";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            DataTable objdatatableLoadEnquiryStatus = null;
            string stringcondition = "";
            string stringServiceType = "";
            try
            {
                ddlEnqStatus.Items.Clear();
                stringcondition = "And lst.be_id= '" + stringbeid + "'  AND  lst.LSTGRP_ID like '%MRENQUIRY_STATUS%' AND lst.delmark='N' ";
                stringServiceType = "List1R1V1";
                if (Session["SSNLOADENQUIRYSTATUS"] != null)
                {
                    objdatatableLoadEnquiryStatus = (DataTable)Session["SSNLOADENQUIRYSTATUS"];
                }
                if ((objdatatableLoadEnquiryStatus == null) || (objdatatableLoadEnquiryStatus != null && objdatatableLoadEnquiryStatus.Rows.Count == 0))
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objdatatableLoadEnquiryStatus = objDatasetResult.Tables["t1"];
                            Session["SSNLOADENQUIRYSTATUS"] = objdatatableLoadEnquiryStatus;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }

                if (objdatatableLoadEnquiryStatus != null && objdatatableLoadEnquiryStatus.Rows.Count > 0)
                {
                    ddlEnqStatus.DataTextField = "SHORT_NAME";
                    ddlEnqStatus.DataValueField = "LST_ID";
                    ddlEnqStatus.DataSource = objdatatableLoadEnquiryStatus;
                    ddlEnqStatus.DataBind();
                    ddlEnqStatus.Items.Insert(0, new ListItem("", ""));
                }
                else
                {
                    ddlEnqStatus.DataSource = null;
                    ddlEnqStatus.DataBind();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                objdatatableLoadEnquiryStatus = null;
                stringcondition = null;
                stringServiceType = null;
            }
        }

        private void Loadcontactpreference()//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0014R1V1";
            string stringOrderBy = "lst.short_name asc";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringcondition = "";
            string stringServiceType = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            DataTable objdatatableLoadcontactpreference = null;
            try
            {
                ddlContactPreference.Items.Clear();
                stringcondition = "And lst.be_id= '" + stringbeid + "'  AND  lst.LSTGRP_ID like '%CONTACTPREFERENCEFC0001R1V1_ID%' AND lst.delmark='N' ";
                stringServiceType = "List1R1V1";
                if (Session["SSNLOADCONTACTPREFERENCE"] != null)
                {
                    objdatatableLoadcontactpreference = (DataTable)Session["SSNLOADCONTACTPREFERENCE"];
                }
                if ((objdatatableLoadcontactpreference == null) || (objdatatableLoadcontactpreference != null && objdatatableLoadcontactpreference.Rows.Count == 0))
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objdatatableLoadcontactpreference = objDatasetResult.Tables["t1"];
                            Session["SSNLOADCONTACTPREFERENCE"] = objdatatableLoadcontactpreference;
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }

                if (objdatatableLoadcontactpreference != null && objdatatableLoadcontactpreference.Rows.Count > 0)
                {
                    ddlContactPreference.DataTextField = "SHORT_NAME";
                    ddlContactPreference.DataValueField = "LST_ID";
                    ddlContactPreference.DataSource = objdatatableLoadcontactpreference;
                    ddlContactPreference.DataBind();
                    ddlContactPreference.Items.Insert(0, new ListItem("", ""));
                    ddlContactPreference.SelectedIndex = 1;
                }
                else
                {
                    ddlContactPreference.DataSource = null;
                    ddlContactPreference.DataBind();
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringcondition = null;
                stringServiceType = null;
                stringbeid = null;
                objdatatableLoadcontactpreference = null;
            }
        }

        protected void lnkbtnEnq_Date_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringbedep = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringbedep = stringValues[0];
                            Session["mrp_idFC0003R1V1"] = stringbedep;
                            LoadDatavalues(stringbedep);
                            if (Session["LoadEnquiryFC0001"] != null)
                            {
                                gvListEnquiry.DataSource = (DataTable)Session["LoadEnquiryFC0001"];
                                gvListEnquiry.DataBind();
                            }

                            if (stringbedep.Length > 0)
                            {
                                Session["mrp_idFC0003R1V1"] = stringbedep;
                            }
                            else
                            {
                                Session["mrp_idFC0003R1V1"] = null;
                            }
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringbedep = null;
                stringValues = null;
            }
        }

        private void LoadDatavalues(string stringdesg_id)//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0003R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            DataTable objDataTable = null;
            DataRow[] objdatarow = null;
            string stringTemp = "";
            string stringRequestID = "";
            string stringServiceType = "";
            string stringexp012 = "";
            string stringStatus = "";
            if (Session["REQUESTID_ENQUIRY"] != null)
            {
                stringRequestID = Session["REQUESTID_ENQUIRY"].ToString();
                Session["REQUESTID_ENQUIRY"] = stringRequestID;
            }
            try
            {
                if (Session["LoadEnquiryFC0001"] != null)
                {
                    objDataTable = (DataTable)Session["LoadEnquiryFC0001"];
                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        ViewState["exportconditiondesig"] = "and be_id= '" + stringbeid + "' And mr_enq_id = '" + stringdesg_id.ToString() + "'";
                        objdatarow = objDataTable.Select("be_id= '" + stringbeid + "' and mr_enq_id = '" + stringdesg_id.ToString() + "'");
                        if (objdatarow != null && objdatarow.Length > 0)
                        {
                            Session["AuditLogdepartment"] = objdatarow;

                            stringTemp = objdatarow[0]["mr_enq_id"].ToString();
                            ViewState["hidFldEnqID"] = objdatarow[0]["mr_enq_id"].ToString();

                            stringServiceType = "List1R1V1";
                            stringexp012 = "And mreh.be_id= '" + stringbeid + "'  And mreh.mr_enq_id= '" + stringRequestID + "' ";

                            objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp012, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                            if (interrorcount == 0)
                            {
                                if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                                {
                                    objDataTable = objDatasetResult.Tables["t1"];
                                }
                                if (objDataTable != null && objDataTable.Rows.Count > 0)
                                {
                                    txtRemarks.Text = objDataTable.Rows[0]["remarks"].ToString();

                                }
                            }
                            else
                            {
                                Errorpopup(stringOutputResult);
                            }

                            txtSName.Text = objdatarow[0]["staffs_name"].ToString().Trim().ToUpper();
                            txtCName.Text = objdatarow[0]["callers_name"].ToString().Trim().ToUpper();
                            txtSRes.Text = objdatarow[0]["staffs_response"].ToString().Trim().ToUpper();
                            txtCEnq.Text = objdatarow[0]["callers_enquiry"].ToString().Trim().ToUpper();

                            stringStatus = objdatarow[0]["reference_1"].ToString().Trim().ToUpper();
                            if (stringStatus != null && stringStatus.Trim().Length > 0)
                            {
                                if (ddlEnqStatus.Items.FindByValue(stringStatus) != null)
                                { ddlEnqStatus.ClearSelection(); ddlEnqStatus.Items.FindByValue(stringStatus).Selected = true; }
                            }

                            Session["stringDMLIndicator"] = "U";
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                objDataTable = null;
                objdatarow = null;
                stringTemp = null;
                stringRequestID = null;
                stringServiceType = null;
                stringexp012 = null;
                stringStatus = null;
            }
        }

        private bool SaveEnquiry(string strinngtype)
        {
            DataTable objDataTableAddReports = null;
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataSet objDatasetResult1 = null;
            string stringformid = "FC0003R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            string stringBoID = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            DataRow objDataRow = null;
            int intErrorCount = 0;
            string stringDMLIndicator = ""; 
            string stringcustemerid3 = "";
            string stringServiceType1 = "";
            string stringformid1 = "";
            try
            {
                if (Session["LoadEnquiryFC0001"] != null)
                { objDataTableAddReports = (DataTable)Session["LoadEnquiryFC0001"]; }


                if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t1"].Rows.Count == 0)
                        {
                            for (int intIndex = 0; intIndex < objDataTableAddReports.Rows.Count; intIndex++)
                            {
                                objDataRow = objDatasetResult.Tables["t1"].NewRow();

                                stringDMLIndicator = objDataTableAddReports.Rows[intIndex]["DML_INDICATOR"].ToString();

                                if (stringDMLIndicator != null && stringDMLIndicator.Trim().Length > 0 )
                                {
                                    objDataRow["Request_ID"] = objDataTableAddReports.Rows[intIndex]["Request_ID"].ToString();
                                    objDataRow["Callers_Name"] = objDataTableAddReports.Rows[intIndex]["Callers_Name"].ToString();
                                    objDataRow["Callers_Enquiry"] = objDataTableAddReports.Rows[intIndex]["Callers_Enquiry"].ToString();
                                    objDataRow["Staffs_Name"] = objDataTableAddReports.Rows[intIndex]["Staffs_Name"].ToString();
                                    objDataRow["Staffs_Response"] = objDataTableAddReports.Rows[intIndex]["Staffs_Response"].ToString();
                                    if (ViewState["hidFldEnqID"] != null)
                                    {
                                        objDataRow["MR_Enq_ID"] = ViewState["hidFldEnqID"].ToString();
                                    }
                                    else
                                    {
                                        objDataRow["MR_Enq_ID"] = objDataTableAddReports.Rows[intIndex]["MR_Enq_ID"].ToString();
                                    }
                                    objDataRow["Remarks"] = objDataTableAddReports.Rows[intIndex]["Remarks"].ToString();
                                    objDataRow["reference_1"] = objDataTableAddReports.Rows[intIndex]["reference_1"].ToString();

                                    objDataRow["delmark"] = "N";
                                    objDataRow["be_id"] = Session["BusinessID"].ToString();
                                    objDataRow["DELMARK"] = "N";
                                    objDataRow["REFERENCE_5"] = stringDMLIndicator;

                                    CommonFunctions.AssignAuditLogDetails(ref objDataRow);

                                    objDatasetResult.Tables["t1"].Rows.Add(objDataRow);

                                    objDatasetResult.Tables["t1"].AcceptChanges();

                                    objDatasetResult.Tables["t1"].Rows[0].RowState.ToString();
                                }
                                objDatasetResult.Tables["t1"].AcceptChanges();


                            }
                            if (objDatasetResult.Tables["t1"].Rows.Count > 0)
                            {
                                for (int intIndex = 0; intIndex < objDatasetResult.Tables["t1"].Rows.Count; intIndex++)
                                {
                                    stringcustemerid3 = objDatasetResult.Tables["t1"].Rows[intIndex]["REFERENCE_5"].ToString();
                                    if (stringcustemerid3 == "D")
                                    {
                                        objDatasetResult.Tables["t1"].Rows[intIndex].Delete();
                                    }
                                    else if (stringcustemerid3 == "I")
                                    {
                                        objDatasetResult.Tables["t1"].Rows[intIndex].SetAdded();
                                    }
                                    else if (stringcustemerid3 == "U")
                                    {
                                        objDatasetResult.Tables["t1"].Rows[intIndex].SetModified();
                                    }
                                }

                                objDatasetResult = objDatasetResult.GetChanges();
                                stringServiceType1 = "OperationServiceDML";
                                stringformid1 = "FC0003R1V1";
                                objDatasetResult1 = CommonFunctions.DataManipulationR1V1(stringServiceType1, objDatasetResult.GetChanges(), stringformid1, out intErrorCount, out string[] stringOutputResult1);
                                if (intErrorCount == 0)
                                {
                                    Session["mrp_idFC0003R1V1"] = null;
                                    ClearValuesENQ();
                                    return true;
                                }
                                else
                                {
                                    Errorpopup(stringOutputResult1);
                                    return false;
                                }
                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        return false;
                    }
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException); return false;
            }
            finally
            {
                objDataTableAddReports = null;
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = "";
                intFromRecord = 0;
                intToRecord = int.MaxValue;
                objDatasetResult1 = null;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
                stringBoID = null;
                objDataRow = null;
                intErrorCount = 0;
                stringDMLIndicator = null;
                stringcustemerid3 = null;
                stringServiceType1 = null;
                stringformid1 = null;
            }

        }
        private void ClearValuesENQ()//fix
        {
            try
            {
                txtCName.Text = "";
                txtCEnq.Text = "";
                ddlEnqStatus.SelectedIndex = 0;
                Session["mrp_idFC0003R1V1"] = null;
                Session["stringDMLIndicator"] = "I";
                txtSName.ToolTip = Session["G11EOSUser_Name"].ToString();
                txtSName.Text = Session["G11EOSUser_Name"].ToString();
                txtSRes.Text = "";
                txtRemarks.Text = "";
                if (ddlEnqStatus.Items.FindByValue("PENDING") != null) { ddlEnqStatus.ClearSelection(); ddlEnqStatus.Items.FindByValue("PENDING").Selected = true; }
                ViewState["hidFldEnqID"] = null;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        } 
        private bool ValidateControls()//fix
        {
            bool boolStatus = true;

            string stringOverallMsg = "";
            try
            {
                boolStatus = true;
                stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n";
                if (txtCName.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Callers Name" + "\\r\\n";
                    boolStatus = false;
                }

                if (txtCEnq.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Caller's Enquiry" + "\\r\\n";
                    boolStatus = false;
                }

                if (txtSName.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Staff's Name" + "\\r\\n";
                    boolStatus = false;
                }

                if (ddlEnqStatus.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Enquiry status" + "\\r\\n";
                    boolStatus = false;

                }



                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            } 

            return boolStatus;
        }
        protected void gvListEnquiry_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRow objDataRow = null;
            string stringTemp = "";
            try
            {
                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }

                objDataRow = ((DataRowView)e.Row.DataItem).Row;
                if (objDataRow != null)
                {
                    stringTemp = objDataRow["reference_1"].ToString();
                    if (stringTemp.Trim().ToUpper() == "PENDING") { ((TextBox)e.Row.FindControl("lblreference_1")).Text = "PENDING"; }
                    else if (stringTemp.Trim().ToUpper() == "ANSWERED") { ((TextBox)e.Row.FindControl("lblreference_1")).Text = "COMPLETED"; }

                    Button objbtnComplete = e.Row.FindControl("btnDeleteenq") as Button;

                    if (txtMRStatus.Text.Trim().ToUpper() == "CANCELLED")
                    {
                        objbtnComplete.Enabled = false;
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objDataRow = null;
                stringTemp = null;
            }

        }
        protected void btnDeleteenq_Click(object sender, EventArgs e)
        {

            DataTable objOrderTable = null;
            DataRow[] objDataRow = null;
            string stringCmdArgument = "";
            string stringref_1 = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringref_1 = stringValues[0];


                            if (Session["LoadEnquiryFC0001"] != null)
                            {
                                objOrderTable = (DataTable)Session["LoadEnquiryFC0001"];
                            }

                            if (objOrderTable != null && objOrderTable.Rows.Count > 0)
                            {
                                if (stringref_1.Length > 0)
                                {
                                    objDataRow = objOrderTable.Select("mr_enq_id='" + stringref_1 + "' ");
                                }

                                if (objDataRow != null && objDataRow.Length > 0)
                                {
                                    if (objDataRow[0]["DML_INDICATOR"].ToString() == "I")
                                    {
                                        objDataRow[0].Delete();
                                    }
                                    else
                                    {
                                        objDataRow[0]["DML_INDICATOR"] = "D";
                                    }
                                } 
                                objOrderTable.AcceptChanges();

                                ClearValuesENQ();
                                SaveEnquiry("DELETE"); 
                                if (Session["REQUEST_FromSummary"] != null && Session["REQUEST_FromSummary"].ToString().Trim().Length > 0)
                                {
                                    string stringRequestID = Session["REQUEST_FromSummary"].ToString();
                                    LoadEnquiry(stringRequestID, "NONLOAD", true, false);
                                } 
                            } 
                        }
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objOrderTable = null;
                objDataRow = null;
                stringCmdArgument = null;
                stringref_1 = null;
                stringValues = null;
            }
        } 
        protected void lnkbtnenquiryclear_Click(object sender, EventArgs e)
        {
            try
            {
                ClearValuesENQ();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        #endregion

        #region pending items
        private void LoadDefauldPendingItem()
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringformid = "FC0001R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            try
            {
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables["t13"].Rows.Count == 0)
                    {
                        Session["LoadPendingItemsFC0001"] = objDatasetResult.Tables["t13"];
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
            }
        }
        protected void lnkbtnpendingItemsadd_Click(object sender, EventArgs e)
        {
            string stringErrorMsg = "";
            DataTable objDataTableAddAttachments = null;
            string stringbeid = CommonFunctions.GETBussinessEntity().ToString();
            bool boolrecordexits = true;
            bool boolrecrdsave = false;
            string stringpenid = "";
            DataRow[] objdatarow = null;
            string stringStatus = "";
            try
            {
                if (ValidateControlsPendingItems() && ValidateBusinessLogicPendingItems())
                {
                    if (Session["LoadPendingItemsFC0001"] != null)
                    { objDataTableAddAttachments = (DataTable)Session["LoadPendingItemsFC0001"]; }
                    else
                    {
                        LoadDefauldPendingItem();
                        if (Session["LoadPendingItemsFC0001"] != null)
                        { objDataTableAddAttachments = (DataTable)Session["LoadPendingItemsFC0001"]; }
                    }
                    if (objDataTableAddAttachments != null)
                    {
                        if (objDataTableAddAttachments != null && objDataTableAddAttachments.Rows.Count > 0)
                        {
                            if (ddlPenItems.SelectedItem != null)
                            {
                                stringpenid = ddlPenItems.SelectedValue.ToString();
                            }
                            if (hidFldPenSeq_ID.Value.ToString().Length == 0)
                            {
                                if (objDataTableAddAttachments.Select("Request_ID= '" + txtReqNo.Text.Trim() + "' AND pen_id='" + stringpenid + "'").Length > 0)
                                {
                                    boolrecordexits = false;
                                }
                            }
                            if (boolrecordexits)
                            {

                                objdatarow = objDataTableAddAttachments.Select("Request_ID= '" + txtReqNo.Text.Trim() + "' AND pen_id='" + stringpenid + "'");

                                if (objdatarow != null && objdatarow.Length > 0)
                                {
                                    objdatarow[0]["be_id"] = CommonFunctions.GETBussinessEntity().ToString();

                                    objdatarow[0]["PenSeq_ID"] = hidFldPenSeq_ID.Value;
                                    objdatarow[0]["Pen_ID"] = ddlPenItems.SelectedValue.ToString();
                                    objdatarow[0]["PENDING_SHORT_NAME"] = ddlPenItems.SelectedItem.Text.ToString();
                                    objdatarow[0]["Request_ID"] = txtReqNo.Text.Trim();
                                    stringStatus = ddlStatus.SelectedValue.ToString();
                                    objdatarow[0]["Pending_Status"] = stringStatus;
                                    if (txtCloseDate.Text.Trim().Length > 0)
                                    {
                                        objdatarow[0]["Close_Date"] = CommonFunctions.ConvertToDateTime(txtCloseDate.Text.Trim().ToString(), "dd-MM-yyyy");
                                    }
                                    else
                                    {
                                        if (stringStatus == "CLOSED" && txtCloseDate.Text.Trim().Length == 0)
                                        {
                                            objdatarow[0]["Close_Date"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                                        }
                                    }
                                    if (txtStartDate.Text.Trim().Length > 0)
                                    {
                                        objdatarow[0]["reference_date_1"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                                    }

                                    objdatarow[0]["Due_days"] = Convert.ToInt32(txtDueDays.Text.Trim());

                                    if (IsRecordExist(txtReqNo.Text.Trim(), stringpenid))
                                    {
                                        objdatarow[0]["DML_INDICATOR"] = "U";
                                    }
                                    else
                                    {
                                        objdatarow[0]["DML_INDICATOR"] = "I";
                                    }
                                    objDataTableAddAttachments.AcceptChanges();
                                    boolrecrdsave = true;
                                }
                                else
                                {
                                    AddbtnInsertPendingItems(stringpenid, objDataTableAddAttachments, stringbeid);
                                    boolrecrdsave = true;
                                }
                            }
                            else
                            {
                                CommonFunctions.ShowMessageboot(this, "Record already exist");
                            }
                        }
                        else
                        {
                            AddbtnInsertPendingItems(stringpenid, objDataTableAddAttachments, stringbeid);
                            boolrecrdsave = true;
                        }
                        Session["LoadPendingItemsFC0001"] = objDataTableAddAttachments;
                        objDataTableAddAttachments.AcceptChanges();

                        if (boolrecrdsave)
                        {
                            SvePendingItems("");
                        }
                    }
                }
                else
                {
                    TABActive(8);
                    CommonFunctions.ShowMessageboot(this, stringErrorMsg);
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringErrorMsg = null;
                objDataTableAddAttachments = null;
                stringbeid = null;
                stringpenid = null;
                objdatarow = null;
                stringStatus = null;
            }
        }
        protected void btndeletependingitms_Click(object sender, EventArgs e)
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringServiceType = "";
            DataRow objdatarow = null;
            string stringPenSeq_ID = "";
            string stringPen_ID = "";
            string stringRequest_ID = "";
            string stringStatus = "";
            string stringDue_days = "";
            string stringCmdArgument = "";
            string[] stringValues = null;
            string stringexp = "";

            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length >= 5)
                        {
                            stringPenSeq_ID = stringValues[0];
                            stringPen_ID = stringValues[1];
                            stringRequest_ID = stringValues[2];
                            stringStatus = stringValues[3];
                            stringDue_days = stringValues[4];

                            if (stringPen_ID.Length > 0 && stringPen_ID != "PEND001")
                            {
                                if (stringPenSeq_ID.Length > 0 && stringPen_ID.Length > 0 && stringRequest_ID.Length > 0)
                                {

                                    stringServiceType = "DEFAULT";
                                    stringexp = "";
                                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                                    if (objDatasetResult != null && objDatasetResult.Tables["t13"] != null && objDatasetResult.Tables["t13"].Rows.Count == 0)
                                    {
                                        objdatarow = objDatasetResult.Tables["t13"].NewRow();
                                        objdatarow["be_id"] = CommonFunctions.GETBussinessEntity().ToString();
                                        objdatarow["PenSeq_ID"] = stringPenSeq_ID;
                                        objdatarow["Pen_ID"] = stringPen_ID;
                                        objdatarow["Request_ID"] = stringRequest_ID;
                                        objdatarow["Pending_Status"] = "CLOSED";
                                        objdatarow["Close_Date"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                                        objdatarow["start_Date"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                                        objdatarow["Due_days"] = stringDue_days;
                                        objdatarow["delmark"] = "N";
                                        if (Session["stringComputerName"] != null)
                                            objdatarow["MODIFIED_AT"] = Session["stringComputerName"].ToString();
                                        if (Session["stringUserID"] != null)
                                            objdatarow["MODIFIED_BY"] = Session["stringUserID"].ToString();
                                        objdatarow["MODIFIED_ON"] = DateTime.Now;
                                        objdatarow["REFERENCE_5"] = "D";

                                        objDatasetResult.Tables["t13"].Rows.Add(objdatarow);
                                        objDatasetResult.Tables["t13"].AcceptChanges();


                                        stringServiceType = "OperationServiceDML";
                                        if (objDatasetResult != null && objDatasetResult.Tables["t13"] != null && objDatasetResult.Tables["t13"].Rows.Count > 0)
                                        {
                                            for (int intIndex = 0; intIndex < objDatasetResult.Tables["t13"].Rows.Count; intIndex++)
                                            {
                                                string stringcustemerid3 = objDatasetResult.Tables["t13"].Rows[intIndex]["REFERENCE_5"].ToString();
                                                if (stringcustemerid3 == "D")
                                                {
                                                    objDatasetResult.Tables["t13"].Rows[intIndex].Delete();
                                                }
                                            }

                                            objDatasetResult = objDatasetResult.GetChanges();
                                            objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);
                                            if (intErrorCount == 0)
                                            {
                                                CommonFunctions.ShowMessageboot(this, "Record Deleted Successfully");
                                                ClearValuesRemarks();
                                                Session["LoadPendingItemsFC0001"] = null;
                                                LoadPendingItems(stringRequest_ID, "LOAD", true);
                                                pnlPendingItems.Visible = true;
                                            }
                                            else
                                            {
                                                Errorpopup(stringOutputResult);
                                            }
                                        }

                                    }
                                }
                            }
                            else
                            {
                                CommonFunctions.ShowMessagebootwithsingquotes(this, "Payment pending item can't be deleted. Please proceed to payment screen and complete the payment");
                            }
                        }
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = int.MaxValue;
                stringServiceType = null;
                objdatarow = null;
                stringPenSeq_ID = null;
                stringPen_ID = null;
                stringRequest_ID = null;
                stringStatus = null;
                stringDue_days = null;
                stringCmdArgument = null;
                stringValues = null;
                stringexp = null;

            }
        } 
        private void AddbtnInsertPendingItems(string stringremarksID, DataTable objDataTableAddAttachments, string stringbeid)
        {
            string stringStatus = "";
            DataRow objdatarow = null;
            try
            {
                objdatarow = objDataTableAddAttachments.NewRow();

                objdatarow["be_id"] = CommonFunctions.GETBussinessEntity().ToString();

                objdatarow["PenSeq_ID"] = hidFldPenSeq_ID.Value;
                objdatarow["Pen_ID"] = ddlPenItems.SelectedValue.ToString();
                objdatarow["PENDING_SHORT_NAME"] = ddlPenItems.SelectedValue.ToString();
                objdatarow["Request_ID"] = txtReqNo.Text.Trim();
                stringStatus = ddlStatus.SelectedValue.ToString();
                objdatarow["Pending_Status"] = stringStatus;
                if (txtCloseDate.Text.Trim().Length > 0)
                {
                    objdatarow["Close_Date"] = CommonFunctions.ConvertToDateTime(txtCloseDate.Text.Trim().ToString(), "dd-MM-yyyy");
                }
                else
                {
                    if (stringStatus == "CLOSED" && txtCloseDate.Text.Trim().Length == 0)
                    {
                        objdatarow["Close_Date"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                    }
                }
                if (txtStartDate.Text.Trim().Length > 0)
                {
                    objdatarow["reference_date_1"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                }

                objdatarow["Due_days"] = Convert.ToInt32(txtDueDays.Text.Trim());
                objdatarow["delmark"] = "N";
                CommonFunctions.AssignAuditLogDetails(ref objdatarow);

                objdatarow["DML_INDICATOR"] = "I";
                objDataTableAddAttachments.Rows.Add(objdatarow);
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringStatus = null;
                objdatarow = null;
            }
        }

        protected void btnclosependingitms_Click(object sender, EventArgs e)
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringServiceType = "";
            DataRow objdatarow = null;
            string stringPenSeq_ID = "";
            string stringPen_ID = "";
            string stringRequest_ID = "";
            string stringStatus = "";
            string stringDue_days = "";
            string stringCmdArgument = "";
            string[] stringValues = null;
            string stringexp = "";

            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((Button)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringPenSeq_ID = stringValues[0];
                            stringPen_ID = stringValues[1];
                            stringRequest_ID = stringValues[2];
                            stringStatus = stringValues[3];
                            stringDue_days = stringValues[4];
                            if (stringPenSeq_ID.Length > 0 && stringPen_ID.Length > 0 && stringRequest_ID.Length > 0)
                            {
                                if (PAymentClosValidation(stringPen_ID, out int intbalance))
                                {
                                    if (intbalance == 0)
                                    {
                                        CommonFunctions.ShowMessageboot(this, "Pending Item Already Closed");
                                    }
                                    else
                                    {
                                        stringServiceType = "DEFAULT";
                                        stringexp = "";
                                        objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                                        if (objDatasetResult != null && objDatasetResult.Tables["t13"] != null && objDatasetResult.Tables["t13"].Rows.Count == 0)
                                        {
                                            objdatarow = objDatasetResult.Tables["t13"].NewRow();
                                            objdatarow["be_id"] = CommonFunctions.GETBussinessEntity().ToString();
                                            objdatarow["PenSeq_ID"] = stringPenSeq_ID;
                                            objdatarow["Pen_ID"] = stringPen_ID;
                                            objdatarow["Request_ID"] = stringRequest_ID;
                                            objdatarow["Pending_Status"] = "CLOSED";
                                            objdatarow["Close_Date"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                                            objdatarow["start_Date"] = CommonFunctions.ConvertToDateTime(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy");
                                            objdatarow["Due_days"] = stringDue_days;
                                            objdatarow["delmark"] = "N";
                                            if (Session["stringComputerName"] != null)
                                                objdatarow["MODIFIED_AT"] = Session["stringComputerName"].ToString();
                                            if (Session["stringUserID"] != null)
                                                objdatarow["MODIFIED_BY"] = Session["stringUserID"].ToString();
                                            objdatarow["MODIFIED_ON"] = DateTime.Now;

                                            objDatasetResult.Tables["t13"].Rows.Add(objdatarow);
                                            objDatasetResult.Tables["t13"].AcceptChanges();
                                            objDatasetResult.Tables["t13"].Rows[0]["delmark"] = "N";
                                            objDatasetResult.Tables["t13"].Rows[0].RowState.ToString();

                                            objDatasetResult = objDatasetResult.GetChanges();
                                            stringServiceType = "OperationServiceDML";
                                            objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);
                                            if (intErrorCount == 0)
                                            {
                                                CommonFunctions.ShowMessageboot(this, "Record updated Successfully");
                                                ClearValuesRemarks();
                                                Session["LoadPendingItemsFC0001"] = null;
                                                LoadPendingItems(stringRequest_ID, "LOAD", true);
                                                pnlPendingItems.Visible = true;
                                            }
                                            else
                                            {
                                                Errorpopup(stringOutputResult);
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    CommonFunctions.ShowMessageboot(this, "Please Complete Payment Details");
                                }
                            }
                        }
                    }
                } 
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = int.MaxValue;
                stringServiceType = null;
                objdatarow = null;
                stringPenSeq_ID = null;
                stringPen_ID = null;
                stringRequest_ID = null;
                stringStatus = null;
                stringDue_days = null;
                stringCmdArgument = null;
                stringValues = null;
                stringexp = null;

            }
        } 
        private bool PAymentClosValidation(string stringPen_ID, out int intbalance)
        {
            bool boolpaymentpendingItems = true;
            string stringMRamt = ""; 
            intbalance = 1;
            DataTable objdatatable = null;
            string stringbalanceamt = "";
            try
            {
                if (stringPen_ID == "PEND001")
                {
                    if (hdfmramount.Value.Length > 0)
                    {
                        stringMRamt = hdfmramount.Value.ToString();
                        if (stringMRamt.Length > 0)
                        {
                            decimal decimalmrAmount = 0;
                            if (stringMRamt != null && stringMRamt.Trim().Length > 0)
                            { decimal.TryParse(stringMRamt, out decimalmrAmount); }

                            if (ddlBlockBill.SelectedItem != null && ddlBlockBill.SelectedValue.ToString() == "NO" && ((ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.ToString() == "NO") || (ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.ToString() == "YES" && (ddlWApproved.SelectedItem != null && (ddlWApproved.SelectedValue.ToString() == "REJECTED" || ddlWApproved.SelectedValue.ToString() == "HALFWAIVER" || ddlWApproved.SelectedValue.ToString() == "PENDING")))))
                            {
                                if (decimalmrAmount > 0 && Session["LoadPaymentReceiptsGridFC0001"] == null)
                                {
                                    boolpaymentpendingItems = false;
                                }
                                else
                                {
                                    if (Session["LoadPaymentReceiptsGridFC0001"] != null)
                                    {
                                        objdatatable = (DataTable)Session["LoadPaymentReceiptsGridFC0001"];
                                        if (objdatatable != null && objdatatable.Rows.Count > 0)
                                        {
                                            objdatatable.DefaultView.Sort = "MODIFIED_ON asc";
                                            objdatatable = objdatatable.DefaultView.ToTable();

                                            stringbalanceamt = objdatatable.Rows[0]["BALANCE_AMT"].ToString();
                                            if (stringbalanceamt.Length > 0)
                                            {
                                                int intbalanceamt = 0;

                                                double doubleValue = Convert.ToDouble(stringbalanceamt);
                                                intbalanceamt = Convert.ToInt32(doubleValue);

                                                if (intbalanceamt > 0)
                                                {
                                                    boolpaymentpendingItems = false;
                                                }
                                                else if (intbalanceamt == 0)
                                                {
                                                    intbalance = intbalanceamt;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            boolpaymentpendingItems = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot(this, objException.Message);
            }
            finally
            {
                stringMRamt = null; 
                objdatatable = null;
                stringbalanceamt = null;
            }
            return boolpaymentpendingItems;
        }

        protected void lblpendingshortname_Click(object sender, EventArgs e)
        {
            string stringCmdArgument = "";
            string stringReciptid = "";
            string[] stringValues = null;
            try
            {
                if (sender != null)
                {
                    stringCmdArgument = ((LinkButton)sender).CommandArgument;
                    if (stringCmdArgument != null && stringCmdArgument.Trim().Length > 0)
                    {
                        stringValues = stringCmdArgument.Split(',');
                        if (stringValues != null && stringValues.Length > 0)
                        {
                            stringReciptid = stringValues[0];

                            if (stringReciptid.Length > 0)
                            {
                                LoadDatavaluesPendingItems(stringReciptid);
                            } 
                        }
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringCmdArgument = null;
                stringReciptid = null;
                stringValues = null;
            }
        }
         
        protected void ddlStatus_SelectedIndexChanged(object sender, EventArgs e)
        {
            string stringsts = "";
            try
            {
                if (ddlStatus.SelectedItem != null && ddlStatus.SelectedValue.ToString().Length > 0)
                {
                    stringsts = ddlStatus.SelectedValue.ToString();
                    if (stringsts == "CLOSED")
                    {
                        txtCloseDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                    }
                    else if (stringsts == "PENDING")
                    {
                        txtCloseDate.Text = "";
                    }
                }
                else
                {
                    txtCloseDate.Text = "";
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringsts = null;
            }
        }
        protected void gvListPendingItems_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            string stringSort = string.Empty;
            DataRowView objDRV = null;
            DataRow objDataRow = null;
            try
            {
                GridViewRow objGridViewRow = e.Row;
                if (objGridViewRow.DataItem == null) { return; }

                objDRV = ((DataRowView)objGridViewRow.DataItem);
                objDataRow = objDRV.Row;
                if (objDataRow != null)
                {
                    if (objDataRow["Pending_Status"].ToString() == "PENDING")
                    { ((Label)e.Row.FindControl("lblClosedte")).Text = ""; }
                    Button objbtnComplete = e.Row.FindControl("btnclose") as Button;
                    if (txtMRStatus.Text.Trim().ToUpper() == "CANCELLED")
                    {
                        objbtnComplete.Enabled = false;
                    }

                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringSort = null;
                objDRV = null;
                objDataRow = null;
            }
        }
        private bool ValidateControlsPendingItems()//fix
        {
            bool boolStatus = true;

            string stringOverallMsg = "";
            try
            {
                stringOverallMsg = "You must enter the value for the following fields:- " + "\\r\\n";

                boolStatus = true;


                if (ddlPenItems.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Pending Items" + "\\r\\n";
                    boolStatus = false;
                }

                if (txtDueDays.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Due Days" + "\\r\\n";
                    boolStatus = false;
                }

                if (ddlStatus.Text.Trim().Length == 0)
                {
                    stringOverallMsg += "- Pending Status" + "\\r\\n";
                    boolStatus = false;
                }

                if (!boolStatus)
                {
                    if (stringOverallMsg.Trim().Length > 0)
                    {
                        stringOverallMsg = stringOverallMsg.Trim() + " ";
                        stringOverallMsg = stringOverallMsg.Remove(stringOverallMsg.Length - 1, 1);
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        return boolStatus;
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            } 
            return boolStatus;
        }

        private bool ValidateBusinessLogicPendingItems()//fix
        {
            bool boolStatus = true;

            try
            {
                if (txtCloseDate.Text.Trim().Length > 0 && !CommonFunctions.ValidDateTime(txtCloseDate.Text.Trim()))
                {
                    CommonFunctions.ShowMessageboot(this, "Close date Should be a valid date");
                    txtCloseDate.Focus();
                    return false;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            } 
            return boolStatus;
        }

        private void ClearValuesPendingItems()//fix
        {
            try
            {
                ddlStatus.ClearSelection();
                ddlPenItems.ClearSelection();
                txtDueDays.Text = "";
                txtCloseDate.Text = "";
                txtStartDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
                Session["stringDMLIndicator"] = "I";
                hidFldPenSeq_ID.Value = null;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            } 
        }

        private void LoadStatus() 
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0014R1V1";
            string stringOrderBy = "lst.short_name asc";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataTable objDataTable = null;
            string stringcondition = "";
            string stringServiceType = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                ddlStatus.Items.Clear();

                stringcondition = "And lst.be_id= '" + stringbeid + "'  AND  lst.LSTGRP_ID like '%PENDING-ITEM-STATUS%' AND lst.delmark='N' ";


                stringServiceType = "List1R1V1";

                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                    {
                        objDataTable = objDatasetResult.Tables["t1"];
                    }
                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        ddlStatus.DataTextField = "short_name";
                        ddlStatus.DataValueField = "lst_id";
                        ddlStatus.DataSource = objDataTable;
                        ddlStatus.DataBind();
                        ddlStatus.Items.Insert(0, new ListItem("", ""));
                        ddlStatus.SelectedIndex = 1;
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }


            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objDataTable = null;
                stringcondition = null;
                stringServiceType = null;
                stringbeid = null;
            }
        }

        private void LoadPendingItems()//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0020R1V1";
            string stringOrderBy = "peits.ORDER_ID asc,peits.short_name asc";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataTable objdatatableLoadPendingItems = null;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            string stringcondition = "";
            string stringServiceType = "";
            try
            {
                ddlPenItems.Items.Clear();
                stringcondition = "And peits.be_id= '" + stringbeid + "'  And peits.delmark= 'N'";

                stringServiceType = "List1R1V1";
                if (Session["SSNLOADPENDINGITEMS"] != null)
                {
                    objdatatableLoadPendingItems = (DataTable)Session["SSNLOADPENDINGITEMS"];
                }
                if ((objdatatableLoadPendingItems == null) || (objdatatableLoadPendingItems != null && objdatatableLoadPendingItems.Rows.Count == 0))
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objdatatableLoadPendingItems = objDatasetResult.Tables["t1"];
                            Session["SSNLOADPENDINGITEMS"] = objdatatableLoadPendingItems;
                        }

                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                if (objdatatableLoadPendingItems != null && objdatatableLoadPendingItems.Rows.Count > 0)
                {
                    ddlPenItems.DataTextField = "short_name";
                    ddlPenItems.DataValueField = "pen_id";
                    ddlPenItems.DataSource = objdatatableLoadPendingItems;
                    ddlPenItems.DataBind();
                    ddlPenItems.Items.Insert(0, new ListItem("", ""));
                    ddlPenItems.SelectedIndex = 1;

                    if (ddlBlockBill.SelectedItem != null && ddlBlockBill.SelectedValue.ToString() == "NO" && ((ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.ToString() == "NO") || (ddlWApp.SelectedItem != null && ddlWApp.SelectedValue.ToString() == "YES" && (ddlWApproved.SelectedItem != null && (ddlWApproved.SelectedValue.ToString() == "REJECTED" || ddlWApproved.SelectedValue.ToString() == "HALFWAIVER" || ddlWApproved.SelectedValue.ToString() == "PENDING")))))
                    {
                    }
                    else
                    {
                        ddlPenItems.Items.Remove("PEND001");
                    }
                }
                else
                {
                    ddlPenItems.DataSource = null;
                    ddlPenItems.DataBind();
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {

                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                objdatatableLoadPendingItems = null;
                stringbeid = null;
                stringcondition = null;
                stringServiceType = null;
            }
        }

        protected void lbtnClear_Click(object sender, EventArgs e)
        {
            try
            {
                ClearValuesPendingItems();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }

        protected void ddlPenItems_SelectedIndexChanged(object sender, EventArgs e)//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0020R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            DataTable objDataTable = null;
            string stringID = "";
            string stringcondition = "";
            string stringServiceType = "";
            DataRow objDataRow = null;
            try
            {
                if (ddlPenItems.SelectedIndex >= 0)
                {
                    stringID = ddlPenItems.SelectedValue.ToString();
                    stringcondition = "And peits.be_id= '" + stringbeid + "' And peits.pen_id= '" + stringID.ToString() + "'";

                    stringServiceType = "List1R1V1";

                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                        {
                            objDataTable = objDatasetResult.Tables["t1"];
                        }
                        if (objDataTable != null && objDataTable.Rows.Count > 0)
                        {
                            objDataRow = objDataTable.Rows[0];
                            txtDueDays.Text = objDataRow["due_days"].ToString();
                            if (ddlStatus.Items.FindByText("PENDING") != null)
                            {
                                ddlStatus.ClearSelection();
                                ddlStatus.Items.FindByText("PENDING").Selected = true;
                                txtCloseDate.Text = "";
                                txtStartDate.Text = DateTime.Now.ToString("dd-MM-yyyy");

                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
                else
                {
                    txtDueDays.Text = "0";
                    ddlStatus.SelectedIndex = 0;
                    txtCloseDate.Text = "";
                    txtStartDate.Text = "";
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringbeid = null;
                objDataTable = null;
                stringID = null;
                stringcondition = null;
                stringServiceType = null;
                objDataRow = null;
            }
        }

        private void LoadDatavaluesPendingItems(string stringSequenceID)//fix
        {
            string stringTemp = "";
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringServiceType = "";
            DataTable objDataTable = null;
            string stringExpression = "";
            string stringBoID = "";
            string stringformid01 = "";
            string stringID = "";
            string stringcondition = "";
            string stringServiceType1 = "";
            DataRow objDataRow = null;
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            try
            {
                if (stringSequenceID != null && stringSequenceID.Trim().Length > 0)
                {
                    stringServiceType = "List12R1V1";

                    stringExpression = "and mrpend.be_id='" + stringBoID + "' and mrpend.penseq_id='" + stringSequenceID + "' ";

                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t12"] != null && objDatasetResult.Tables["t12"].Rows.Count > 0)
                        {
                            objDataTable = objDatasetResult.Tables["t12"];
                        }
                        if (objDataTable != null && objDataTable.Rows.Count > 0)
                        {

                            objDataRow = objDataTable.Rows[0];
                            hidFldPenSeq_ID.Value = stringSequenceID;
                            ddlPenItems.ClearSelection();
                            stringTemp = objDataRow["pen_id"].ToString();
                            if (stringTemp != null && stringTemp.Trim().Length > 0)
                            {
                                if (ddlPenItems.Items.FindByValue(stringTemp) != null)
                                {
                                    ddlPenItems.Items.FindByValue(stringTemp).Selected = true;
                                }
                                else
                                {
                                    stringTemp = objDataRow["pen_id"].ToString();
                                    stringformid01 = "FA0020R1V1";
                                    stringID = ddlPenItems.SelectedValue.ToString();
                                    stringcondition = "and peits.be_id='" + stringBoID + "' And peits.delmark= 'N' ";

                                    stringServiceType1 = "List1R1V1";

                                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType1, stringformid01, stringcondition, "peits.ORDER_ID asc,peits.short_name asc", intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                                    if (interrorcount == 0)
                                    {
                                        if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                                        {
                                            objDataTable = objDatasetResult.Tables["t1"];
                                        }
                                        if (objDataTable != null && objDataTable.Rows.Count > 0)
                                        {
                                            ddlPenItems.DataTextField = "short_name";
                                            ddlPenItems.DataValueField = "pen_id";
                                            ddlPenItems.DataSource = objDataTable;
                                            ddlPenItems.DataBind();
                                            ddlPenItems.Items.Insert(0, new ListItem("", ""));

                                            foreach (DataRow objDataRowUpdate in objDataTable.Select("pen_id ='" + stringTemp + "'"))
                                            {
                                                stringTemp = objDataRowUpdate["short_name"].ToString();
                                            }
                                        }

                                        ddlPenItems.SelectedItem.Text = stringTemp;
                                    }
                                    else
                                    {
                                        Errorpopup(stringOutputResult);
                                    }

                                }
                            }

                            txtDueDays.Text = objDataRow["due_days"].ToString();
                            if (objDataRow["close_date"] != null && objDataRow["close_date"].ToString().Trim().Length > 0)
                            { txtDueDate.Text = Convert.ToDateTime(objDataRow["close_date"]).ToString("dd-MM-yyyy"); }

                            if (objDataRow["Close_Date"] != null && objDataRow["Close_Date"].ToString().Trim().Length > 0)
                            { txtCloseDate.Text = Convert.ToDateTime(objDataRow["Close_Date"]).ToString("dd-MM-yyyy"); }
                            if (objDataRow["start_Date"] != null && objDataRow["start_Date"].ToString().Trim().Length > 0)
                            { txtStartDate.Text = Convert.ToDateTime(objDataRow["start_Date"]).ToString("dd-MM-yyyy"); }

                            ddlStatus.ClearSelection();
                            stringTemp = objDataRow["pending_status"].ToString();
                            if (stringTemp != null && stringTemp.Trim().Length > 0)
                            {
                                if (ddlStatus.Items.FindByValue(stringTemp) != null)
                                {
                                    ddlStatus.Items.FindByValue(stringTemp).Selected = true;
                                }
                            }
                            if (stringTemp == "PENDING")
                            {
                                txtCloseDate.Text = "";
                            }

                            Session["stringDMLIndicator"] = "U";
                        }

                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                    }
                }
            }

            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                stringTemp = null;
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null;
                objDataTable = null;
                stringExpression = null;
                stringBoID = null;
                stringformid01 = null;
                stringID = null;
                stringcondition = null;
                stringServiceType1 = null;
                objDataRow = null;
            }
        }
        private bool IsRecordExist(string stringreqID, string stringpenID)//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringServiceType = "";
            DataTable objDataTable = null;
            string stringExpression = "";
            string stringBoID = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }

            try
            {
                stringServiceType = "List12R1V1";
                if (stringpenID.Length > 0)
                {
                    stringExpression = "and mrpend.be_id='" + stringBoID + "' and mrpend.request_id='" + stringreqID + "' and mrpend.pen_id='" + stringpenID + "'";

                }
                else
                {
                    stringExpression = "and mrpend.be_id='" + stringBoID + "' and mrpend.request_id='" + stringreqID + "' ";

                }
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringExpression, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t12"] != null && objDatasetResult.Tables["t12"].Rows.Count > 0)
                    {
                        objDataTable = objDatasetResult.Tables["t12"];
                        return true;
                    }
                    else
                    {
                        return false;
                    }

                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
            }

            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
                return false;
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringServiceType = null;
                objDataTable = null;
                stringExpression = null;
                stringBoID = null;
            }
            return false;
        }
         
        private bool SvePendingItems(string strinngtype)
        {
            DataTable objDataTableAddReports = null;
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataSet objDatasetResult1 = null;
            string stringformid = "FC0001R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            string stringBoID = "";
            string stringcustemerid3 = "";
            string stringServiceType1 = "";
            string stringDMLIndicator = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            DataRow objDataRow = null;
            int intErrorCount = 0;

            try
            {
                if (Session["LoadPendingItemsFC0001"] != null)
                { objDataTableAddReports = (DataTable)Session["LoadPendingItemsFC0001"]; }


                if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                {
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                    if (interrorcount == 0)
                    {
                        if (objDatasetResult != null && objDatasetResult.Tables["t13"].Rows.Count == 0)
                        {
                            for (int intIndex = 0; intIndex < objDataTableAddReports.Rows.Count; intIndex++)
                            {
                                objDataRow = objDatasetResult.Tables["t13"].NewRow();

                                stringDMLIndicator = objDataTableAddReports.Rows[intIndex]["DML_INDICATOR"].ToString();

                                if (stringDMLIndicator != null && stringDMLIndicator.Trim().Length > 0)
                                {
                                    objDataRow["be_id"] = objDataTableAddReports.Rows[intIndex]["be_id"].ToString();

                                    objDataRow["PenSeq_ID"] = objDataTableAddReports.Rows[intIndex]["PenSeq_ID"].ToString();
                                    objDataRow["Pen_ID"] = objDataTableAddReports.Rows[intIndex]["Pen_ID"].ToString();
                                    objDataRow["Request_ID"] = objDataTableAddReports.Rows[intIndex]["Request_ID"].ToString();
                                    objDataRow["Pending_Status"] = objDataTableAddReports.Rows[intIndex]["Pending_Status"].ToString();
                                    objDataRow["Close_Date"] = objDataTableAddReports.Rows[intIndex]["Close_Date"];
                                    objDataRow["start_Date"] = objDataTableAddReports.Rows[intIndex]["start_Date"];

                                    objDataRow["Due_days"] = objDataTableAddReports.Rows[intIndex]["Due_days"];
                                    objDataRow["delmark"] = objDataTableAddReports.Rows[intIndex]["delmark"].ToString();

                                    objDataRow["REFERENCE_5"] = stringDMLIndicator;

                                    CommonFunctions.AssignAuditLogDetails(ref objDataRow);

                                    objDatasetResult.Tables["t13"].Rows.Add(objDataRow);

                                    objDatasetResult.Tables["t13"].AcceptChanges();

                                    objDatasetResult.Tables["t13"].Rows[0].RowState.ToString();
                                }
                                objDatasetResult.Tables["t13"].AcceptChanges();


                            }
                            if (objDatasetResult.Tables["t13"].Rows.Count > 0)
                            {
                                for (int intIndex = 0; intIndex < objDatasetResult.Tables["t13"].Rows.Count; intIndex++)
                                {
                                    stringcustemerid3 = objDatasetResult.Tables["t13"].Rows[intIndex]["REFERENCE_5"].ToString();
                                    if (stringcustemerid3 == "D")
                                    {
                                        objDatasetResult.Tables["t13"].Rows[intIndex].Delete();
                                    }
                                    else if (stringcustemerid3 == "I")
                                    {
                                        objDatasetResult.Tables["t13"].Rows[intIndex].SetAdded();
                                    }
                                    else if (stringcustemerid3 == "U")
                                    {
                                        objDatasetResult.Tables["t13"].Rows[intIndex].SetModified();
                                    }
                                }

                                objDatasetResult = objDatasetResult.GetChanges();
                                stringServiceType1 = "OperationServiceDML";
                                objDatasetResult1 = CommonFunctions.DataManipulationR1V1(stringServiceType1, objDatasetResult.GetChanges(), stringformid, out intErrorCount, out string[] stringOutputResult1);
                                if (intErrorCount == 0)
                                {
                                    Session["LoadPendingItemsFC0001"] = null;
                                    ClearValuesPendingItems();
                                    LoadPendingItems(txtReqNo.Text.ToString(), "LOAD", false);

                                    pnlPendingItems.Visible = true;
                                    btnpendingitems.Visible = true;
                                    return true;
                                }
                                else
                                {
                                    Errorpopup(stringOutputResult1);
                                    return false;
                                }
                            }
                        }
                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        return false;
                    }
                }
                return true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException); return false;
            }
            finally
            {
                objDataTableAddReports = null;
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                objDatasetResult1 = null;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
                stringBoID = null;
                stringcustemerid3 = null;
                stringServiceType1 = null;
                stringDMLIndicator = null;
            }

        }

        #endregion

        protected void LnkbtnSort_Click(object sender, EventArgs e)
        {

        }

        protected void lblFEE_EFF_DATE_Click(object sender, EventArgs e)
        {

        }

        protected void btnDelete2ndlevel1sttab_Click(object sender, EventArgs e)
        {

        }

        protected void gv2ndtabqstlevel_RowDataBound(object sender, GridViewRowEventArgs e)
        {

        }
        #region sentCOMPLETESMRDOC_Click
        protected void btnsentCOMPLETESMRDOC_Click(object sender, EventArgs e)
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            string[] stringOutputResult = null;
            string stringformid = "FC0001R1V3";
            string stringTransSattus = "";

            string stringOverallMsg = "";
            bool boolcheckvalidationvalidemail = true;
            byte[] objbytearray = null;
            try
            {
                if (txtsmremailRequestor.Text.Trim().Length > 0)
                {
                    if (txtDelToID.Text.Trim().Length > 0 && txtDelToID.Text == "EMAIL" && txtsmremailRequestor.Text.Trim().Length > 0)
                    {
                        if (!IsValidEmailAddress(txtsmremailRequestor.Text.Trim()))
                        {
                            boolcheckvalidationvalidemail = false;
                        }
                    }
                    if (boolcheckvalidationvalidemail)
                    {
                        objDatasetAppsVariables = (DataSet)Session["objDatasetlocaldeclaration"];
                        objDatasetAppsVariables.Tables[0].Rows[0]["FORM_ID"] = stringformid;

                        clsCertificateValidation.EnableTrustedHosts();
                        using (GSInterfaceService.InterfaceServiceClient objInterfaceServiceClient = new GSInterfaceService.InterfaceServiceClient(CommonFunctions.CreateServiceBasicHttpBinding(), CommonFunctions.objEndpointAddressInterfaceService))
                        {  
                            objDatasetResult = objInterfaceServiceClient.SendEmailUserR1V1(txtReqNo.Text.Trim(), txtsmremailRequestor.Text.Trim(), txtsmremailCC.Text.Trim(), txtsmremailBCC.Text.Trim(), txtsmremailSubject.Text.Trim(), txtsmremailCOntent.Text.Trim(), "N",objDatasetAppsVariables,out objbytearray ,out interrorcount, out stringOutputResult);
                            if (objInterfaceServiceClient != null)
                                objInterfaceServiceClient.Close();
                        }
                        SaveRemarksSMREMAIL(interrorcount, stringOutputResult);
                        if (interrorcount == 0)
                        { 
                            mpePdtPlsmremaisend.Show();
                            Panel10.Visible = true;
                            if (UpdateProcessStatus(stringTransSattus.Trim().ToUpper()))
                            {
                                CommonFunctions.ShowMessageboot(this, "Document Submitted to Email Server");
                                LoadData(txtReqNo.Text.Trim(), "NONLOAD", ""); 
                                TABActive(1);
                                mpePdtPlsmremaisend.Hide();
                                Panel10.Visible = false;
                            }
                        }
                        else
                        {
                            mpePdtPlsmremaisend.Hide();
                            Panel10.Visible = false;
                            Errorpopup(stringOutputResult); 
                        }
                    }
                    else
                    {
                        stringOverallMsg = "You must enter the Valid Recipient Email" + "\\r\\n";
                        CommonFunctions.ShowMessageboot(this, stringOverallMsg);
                        mpePdtPlsmremaisend.Show();
                        Panel10.Visible = true;
                    }
                }
                else
                {
                    CommonFunctions.ShowMessageboot(this, "You must enter the value for Recipient Email");
                    mpePdtPlsmremaisend.Show();
                    Panel10.Visible = true;
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);

                mpePdtPlsmremaisend.Show();
                Panel10.Visible = true;
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                stringOutputResult = null;
                stringformid = null;
                stringTransSattus = null;
                stringOverallMsg = null;
            }
        }
        private void SaveRemarksSMREMAIL(int interrorcountemail, string[] stringOutputResultemail)
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            DataSet objDatasetResult1 = null;
            string stringformid = "FC0001R1V1";
            string stringServiceType = "DEFAULT";
            string stringexp = "";
            string stringBoID = "";
            if (Session["BusinessID"] != null)
            {stringBoID = Session["BusinessID"].ToString(); }
            DataRow objDataRow = null;
            int intErrorCount = 0; 
            string stringcustemerid3 = "";
            string stringServiceType1 = "";
            string stringformid1 = "";
            string stringremarksmessge = "";
            try
            {
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables["t9"] != null && objDatasetResult.Tables["t9"].Rows.Count == 0)
                    {
                        objDataRow = objDatasetResult.Tables["t9"].NewRow();

                        objDataRow["DELMARK"] = "N";
                        objDataRow["REFERENCE_5"] = "I";
                        objDataRow["be_id"] = stringBoID;
                        objDataRow["Request_ID"] = txtReqNo.Text.Trim();
                        objDataRow["REGRMK_ID"] = "REQUESTOREMAIL";
                        objDataRow["SHORT_NAME"] = "Recipient Email";
                        objDataRow["Long_NAME"] = "Recipient Email";
                        objDataRow["TARG_AUD"] = "ALL"; 
                        objDataRow["REMARKS_DATE"] = DateTime.Now; 

                        if (interrorcountemail == 0)
                        {
                            objDataRow["remarks"] = "RECIPIENT EMAIL :" + txtsmremailRequestor.Text.Trim().ToUpper() + " ,SUCCESS: EMAIL SENT TO EMAIL SERVER SUCCESSFULLY";
                        }
                        else
                        {
                            if(stringOutputResultemail != null && stringOutputResultemail[2] != null && stringOutputResultemail[2].ToString().Length > 0)
                            {
                                stringremarksmessge = stringOutputResultemail[2].ToString();
                                objDataRow["remarks"] = "RECIPIENT EMAIL :" + txtsmremailRequestor.Text.Trim().ToUpper() + " ,ERROR: " + stringremarksmessge.ToUpper();
                            }
                        }
                        CommonFunctions.AssignAuditLogDetails(ref objDataRow);

                        objDatasetResult.Tables["t9"].Rows.Add(objDataRow);

                        objDatasetResult.Tables["t9"].AcceptChanges();

                        objDatasetResult.Tables["t9"].Rows[0].RowState.ToString(); 

                        if (objDatasetResult.Tables["t9"].Rows.Count > 0)
                        {
                            for (int intIndex = 0; intIndex < objDatasetResult.Tables["t9"].Rows.Count; intIndex++)
                            {
                                stringcustemerid3 = objDatasetResult.Tables["t9"].Rows[intIndex]["REFERENCE_5"].ToString();
                                if (stringcustemerid3 == "D")
                                {
                                    objDatasetResult.Tables["t9"].Rows[intIndex].Delete();
                                }
                                else if (stringcustemerid3 == "I")
                                {
                                    objDatasetResult.Tables["t9"].Rows[intIndex].SetAdded();
                                }
                                else if (stringcustemerid3 == "U")
                                {
                                    objDatasetResult.Tables["t9"].Rows[intIndex].SetModified();
                                }
                            }

                            objDatasetResult = objDatasetResult.GetChanges();
                            stringServiceType1 = "OperationServiceDML";
                            stringformid1 = "FC0001R1V1";
                            objDatasetResult1 = CommonFunctions.DataManipulationR1V1(stringServiceType1, objDatasetResult.GetChanges(), stringformid1, out intErrorCount, out string[] stringOutputResult1);
                            if (intErrorCount == 0)
                            {
                            }
                            else
                            {
                                Errorpopup(stringOutputResult1);

                            }
                        }
                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                objDatasetResult1 = null;
                stringformid = null;
                stringServiceType = null;
                stringexp = null;
                stringBoID = null;
                objDataRow = null;
                intErrorCount = 0;
                stringcustemerid3 = null;
                stringServiceType1 = null;
                stringformid1 = null;
            }
        }
        private void LoadSMREMAILNOTIFICATION()//fix
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0014R1V1";
            string stringOrderBy = "lst.short_name asc";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            DataTable objDataTable = null;
            DataRow[] objdatarow = null;
            DataRow[] objdatarowsub = null;
            string stringcondition = "";
            string stringContent = "";
            string stringServiceType = "";
            try
            {

                stringcondition = "And lst.be_id= '" + stringbeid + "'  AND  lst.LSTGRP_ID like '%COMPLETEMEDREPEMAILNOTIFICATION%' AND lst.delmark='N' ";

                stringServiceType = "List1R1V1";

                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringcondition, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                if (interrorcount == 0)
                {
                    if (objDatasetResult != null && objDatasetResult.Tables.Count > 0 && objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                    {
                        objDataTable = objDatasetResult.Tables["t1"];
                    }
                    if (objDataTable != null && objDataTable.Rows.Count > 0)
                    {
                        objdatarow = objDataTable.Select("lst_id= 'SMREMAILNOTIFICATION'");
                        if (objdatarow != null && objdatarow.Length > 0)
                        {
                            stringContent = objdatarow[0]["REMARKS"].ToString();
                            txtsmremailCOntent.Text = stringContent;
                        }
                        else
                        {
                            txtsmremailCOntent.Text = "";
                        }
                        objdatarowsub = objDataTable.Select("lst_id= 'SMREMAILNOTIFICATIONSUBJECT'");
                        if (objdatarowsub != null && objdatarowsub.Length > 0)
                        {
                            stringContent = objdatarowsub[0]["REMARKS"].ToString();
                            txtsmremailSubject.Text = stringContent;
                        }
                        else
                        {
                            txtsmremailSubject.Text = "";
                        }

                    }
                }
                else
                {
                    Errorpopup(stringOutputResult);
                }

                txtsmremailCC.Text = "";
                txtsmremailBCC.Text = "";
                LoadSMRAttachments();

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;
                stringbeid = null;
                objDataTable = null;
                objdatarow = null;
                objdatarowsub = null;
                stringcondition = null;
                stringContent = null;
                stringServiceType = null;
            }
        }

        private void LoadSMRAttachments()
        {
            DataTable objDataTableAddReports = null;
            DataTable objDataTableCompleteMedicalReport = null;
            DataRow objdatarowCompleteMedicalReportlatest = null;
            string stringBoID = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            DataRow[] objdatarowCompleteMedicalReport = null;
            string stringBE_ID, stringFORM_ID, stringTRANS_ID, stringDOC_NAME, stringDOC_TYPE, stringATTACH_ID, StringFileName = string.Empty;
            DataSet objDatasetAppsVariables = (DataSet)HttpContext.Current.Session["objDatasetlocaldeclaration"];
            objDatasetAppsVariables.Tables[0].Rows[0]["FORM_ID"] = "FINT0003R1V1";
            string stringreqID = "";
            try
            {
                if (Session["ADD_ATTACHMENTS"] != null)
                { objDataTableAddReports = (DataTable)Session["ADD_ATTACHMENTS"]; }


                if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                {
                     objdatarowCompleteMedicalReport = objDataTableAddReports.Select("TRANS_ID = '" + txtReqNo.Text.Trim().ToString() + "' and CATEGORY = 'COMPLETED MEDICAL REPORTS' ");
                    if (objdatarowCompleteMedicalReport != null && objdatarowCompleteMedicalReport.Length > 0)
                    {
                        objDataTableCompleteMedicalReport = objdatarowCompleteMedicalReport.CopyToDataTable();
                        objDataTableCompleteMedicalReport.DefaultView.Sort = "MODIFIED_ON desc";
                        objDataTableCompleteMedicalReport = objDataTableCompleteMedicalReport.DefaultView.ToTable();

                        if (objDataTableCompleteMedicalReport != null && objDataTableCompleteMedicalReport.Rows.Count > 0)
                        {
                            objdatarowCompleteMedicalReportlatest = objDataTableCompleteMedicalReport.Rows[0];
                        }
                        if (objdatarowCompleteMedicalReportlatest != null)
                        {
                            stringBE_ID = objdatarowCompleteMedicalReportlatest["BE_ID"].ToString();
                            stringFORM_ID = objdatarowCompleteMedicalReportlatest["FORM_ID"].ToString();
                            stringTRANS_ID = objdatarowCompleteMedicalReportlatest["TRANS_ID"].ToString();
                            stringDOC_NAME = objdatarowCompleteMedicalReportlatest["DOC_NAME"].ToString();
                            stringDOC_TYPE = objdatarowCompleteMedicalReportlatest["DOC_TYPE"].ToString();
                            stringATTACH_ID = objdatarowCompleteMedicalReportlatest["ATTACH_ID"].ToString();
                            StringFileName = stringBE_ID + @"\" + stringFORM_ID + @"\" + stringATTACH_ID + @"\" + stringDOC_NAME;
                            if (txtReqNo.Text.Trim().Length > 0)
                            {
                                stringreqID = txtReqNo.Text.Trim().ToString().Replace('/', '_');
                                if (stringreqID.Length > 0)
                                {
                                    stringDOC_NAME = stringreqID + "_" + stringDOC_NAME;
                                }
                            }
                            lnkbtnsmremailfilename.Text = stringDOC_NAME;
                        }
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDataTableAddReports = null;
                objDataTableCompleteMedicalReport = null;
                objdatarowCompleteMedicalReportlatest = null;
                stringBoID = null;
                objdatarowCompleteMedicalReport = null;
                stringBE_ID = null;
                stringFORM_ID = null;
                stringTRANS_ID = null;
                stringDOC_NAME = null;
                stringDOC_TYPE = null;
                stringATTACH_ID = null;
                StringFileName = null;
            }
        }
        protected void btncancelsmrfile_Click(object sender, ImageClickEventArgs e)
        {
            try
            {

                pnlattachmentsmr.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }

        protected void lnkbtnsmremailfilename_Click(object sender, EventArgs e)
        {
            DataTable objDataTableAddReports = null;
            DataTable objDataTableCompleteMedicalReport = null;
            DataRow objdatarowCompleteMedicalReportlatest = null;
            string stringBoID = "";
            if (Session["BusinessID"] != null)
            {
                stringBoID = Session["BusinessID"].ToString();
            }
            DataRow[] objdatarowCompleteMedicalReport = null;
            string stringBE_ID, stringFORM_ID, stringTRANS_ID, stringDOC_NAME, stringDOC_TYPE, stringATTACH_ID, StringFileName = string.Empty;
            DataSet objDatasetAppsVariables = (DataSet)HttpContext.Current.Session["objDatasetlocaldeclaration"];
            objDatasetAppsVariables.Tables[0].Rows[0]["FORM_ID"] = "FINT0003R1V1";

            long longlength;
            string stringFilepath = "";
            byte[] objbyteArray = null;
            string[] stringOutputResult = null;

            try
            {
                if (Session["ADD_ATTACHMENTS"] != null)
                { objDataTableAddReports = (DataTable)Session["ADD_ATTACHMENTS"]; }


                if (objDataTableAddReports != null && objDataTableAddReports.Rows.Count > 0)
                {
                     objdatarowCompleteMedicalReport = objDataTableAddReports.Select("TRANS_ID = '" + txtReqNo.Text.Trim().ToString() + "' and CATEGORY = 'COMPLETED MEDICAL REPORTS' ");
                    if (objdatarowCompleteMedicalReport != null && objdatarowCompleteMedicalReport.Length > 0)
                    {
                        objDataTableCompleteMedicalReport = objdatarowCompleteMedicalReport.CopyToDataTable();
                        objDataTableCompleteMedicalReport.DefaultView.Sort = "MODIFIED_ON desc";
                        objDataTableCompleteMedicalReport = objDataTableCompleteMedicalReport.DefaultView.ToTable();

                        if (objDataTableCompleteMedicalReport != null && objDataTableCompleteMedicalReport.Rows.Count > 0)
                        {
                            objdatarowCompleteMedicalReportlatest = objDataTableCompleteMedicalReport.Rows[0];
                        }
                        if (objdatarowCompleteMedicalReportlatest != null)
                        {
                            stringBE_ID = objdatarowCompleteMedicalReportlatest["BE_ID"].ToString();
                            stringFORM_ID = objdatarowCompleteMedicalReportlatest["FORM_ID"].ToString();
                            stringTRANS_ID = objdatarowCompleteMedicalReportlatest["TRANS_ID"].ToString();
                            stringDOC_NAME = objdatarowCompleteMedicalReportlatest["DOC_NAME"].ToString();
                            stringDOC_TYPE = objdatarowCompleteMedicalReportlatest["DOC_TYPE"].ToString();
                            stringATTACH_ID = objdatarowCompleteMedicalReportlatest["ATTACH_ID"].ToString();
                            StringFileName = stringBE_ID + @"\" + stringFORM_ID + @"\" + stringATTACH_ID + @"\" + stringDOC_NAME;

                            clsCertificateValidation.EnableTrustedHosts();
                            using (GSFileTransferService.FileTransferServiceClient objFileTransfer1 = new GSFileTransferService.FileTransferServiceClient())
                            {
                                objFileTransfer1.DownloadFileFromServerR1V1(ref objDatasetAppsVariables, stringATTACH_ID, ref StringFileName, stringDOC_NAME, txtReqNo.Text.Trim(), out longlength, out stringFilepath, out stringOutputResult, out objbyteArray);

                                if (objFileTransfer1 != null)
                                    objFileTransfer1.Close();
                            }
                            if (stringFilepath != null && stringFilepath.Length > 0)
                            { 
                            }
                            else
                            {
                                Errorpopup(stringOutputResult);
                            }
                            CommonFunctions.OpenExportedFileR1V1(this, objbyteArray, StringFileName.ToString(), "ATTACHMENTS");
                        }
                    }
                }
                mpePdtPlsmremaisend.Show();
                Panel10.Visible = true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
            finally
            {
                objDataTableAddReports = null;
                objDataTableCompleteMedicalReport = null;
                objdatarowCompleteMedicalReportlatest = null;
                stringBoID = null;
                objdatarowCompleteMedicalReport = null;
                stringBE_ID = null;
                stringFORM_ID = null;
                stringTRANS_ID = null;
                stringDOC_NAME = null;
                stringDOC_TYPE = null;
                stringATTACH_ID = null;
                StringFileName = null;
                stringFilepath = null;
                objbyteArray = null;
                stringOutputResult = null;
            } 
        }
        #endregion
         
        protected void lnkbtnnextattachments_Click(object sender, EventArgs e)
        {
            try
            {
                TABActive(7);
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }

        protected void lnkbtnclear_Click(object sender, EventArgs e)
        {

        }

        protected void ImageButton8_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                ModalPopupExtenderpreview.Hide();
                Paneldocpreview.Visible = false;
                mpePdtPlsmremaisend.Show();
                Panel10.Visible = true;
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }

        }
         
        #region Print Report 
        protected void imgBtnPrint_Click(object sender, ImageClickEventArgs e)
        {
            DataTable objdatatabledefault = null;
            DataTable objdatatablecancelled = null;
            DataRow[] objdatrow = null;
            string stringStatus = "";
            DataRow[] objdatarowcancelled = null;
            try
            {

                if (Session["defauledviewstatus"] != null)
                {
                    objdatatabledefault = (DataTable)Session["defauledviewstatus"];
                    if (objdatatabledefault != null)
                    {
                        objdatrow = objdatatabledefault.Select("STATUS='APPT0001'");
                        if (objdatrow != null && objdatrow.Length > 0)
                        {
                            rbtndefaultclinicfinal.Enabled = true;
                            rbtnmrassesment.Enabled = true;
                            rbtndefaultclinicreview.Enabled = true;
                        }
                        else
                        {
                            rbtndefaultclinicfinal.Enabled = false;
                            rbtnmrassesment.Enabled = false;
                            rbtndefaultclinicreview.Enabled = false;
                        }  
                    }
                }
                if (Session["Cancelledrecord"] != null)
                {
                    objdatatablecancelled = (DataTable)Session["Cancelledrecord"];
                    if (objdatatablecancelled != null && objdatatablecancelled.Rows.Count > 0)
                    {
                        objdatarowcancelled = objdatatablecancelled.Select("MR_STATUS='CANCELLED'");
                        if (objdatarowcancelled != null && objdatarowcancelled.Length > 0)
                        {
                            rbtncancellation.Enabled = true;
                        }
                        else
                        {
                            rbtncancellation.Enabled = false;
                        }
                    }
                }
                stringStatus = txtMRStatus.Text.Trim().ToString();
                if (stringStatus.Trim().ToUpper() == "FORWARDED" || stringStatus.Trim().ToUpper() == "COLLECTED" || stringStatus.Trim().ToUpper() == "CANCELLED")
                {
                    rbtnnorecord.Enabled = false;
                    rbtnoutstanding.Enabled = false;
                }
                mdlrbt.Show();
                pnlreportpopup.Visible = true;
                rbtnrequestormail.Checked = true;
                AccessenableReports();
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            } 
        }

        private void AccessenableReports()
        {
            DataRow[] objdatarow01 = null;
            DataRow[] objdatarowpaymentdetail = null;
            string stringnotreadyforaccessment = "";
            DataTable objdatatablerpttype = null;
            DataTable objdatattablepaymentdetail = null;
            try
            {
                CommonFunctions.LoadReportType("SESSION");
                if (Session["ReportType0001DATATABLE"] != null)
                {
                    objdatatablerpttype = (DataTable)Session["ReportType0001DATATABLE"];

                }
                if (objdatatablerpttype != null && objdatatablerpttype.Rows.Count > 0)
                {
                    objdatarow01 = objdatatablerpttype.Select("rpttyp_id = '" + txtRptTypeID.Text.ToString() + "'");
                    if (objdatarow01 != null && objdatarow01.Length > 0)
                    {
                        stringnotreadyforaccessment = objdatarow01[0]["WIC_FLAG"].ToString(); 
                        if (stringnotreadyforaccessment == "Y")
                        {
                            rbtnworkcompensation.Enabled = true;
                        }
                        else
                        {
                            rbtnworkcompensation.Enabled = false;
                        }

                    }
                } 
                if (Session["LoadPaymentReceiptsGridFC0001"] != null)
                {
                    objdatattablepaymentdetail = (DataTable)Session["LoadPaymentReceiptsGridFC0001"];
                    if (objdatattablepaymentdetail != null && objdatattablepaymentdetail.Rows.Count > 0)
                    {
                        objdatarowpaymentdetail = objdatattablepaymentdetail.Select("PAYMENT_STATUS='PARTIAL PAID' or PAYMENT_STATUS = 'PAID'");
                        if(objdatarowpaymentdetail!=null&& objdatarowpaymentdetail.Length > 0)
                        {
                            rbtnpaymentAcknowlege.Enabled = true;
                        }
                        else
                        {
                            rbtnpaymentAcknowlege.Enabled = false;
                        }
                    }
                }
                else
                {
                    rbtnpaymentAcknowlege.Enabled = false;
                }

                ControlByStatus(txtMRStatus.Text.Trim(), txtDelToID.Text.Trim());

            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }
        private void ControlByStatus(string stringStatus, string stringDeliveryMode)//completed
        {
            switch (txtMRStatus.Text.Trim().ToUpper())
            {
                case "MR CREATED":
                    { 
                        break;
                    }
                case "TRACED":
                    { 
                        break;
                    }
                case "DESPATCHED":
                    {  
                        break;
                    }
                case "RECEIVED":
                    { 
                        break;
                    }
                case "FORWARDED":
                    { 
                        break;
                    }
                case "COLLECTED":
                    { 
                        break;
                    }
                case "CANCELLED":
                    {
                        int intnoofdoc = 0;

                        if (hdfCANRefundamt.Value != null && hdfCANRefundamt.Value.ToString().Trim().Length > 0)
                        {
                            double refundAmount;
                            if (double.TryParse(hdfCANRefundamt.Value.ToString(), out refundAmount))
                            {
                                intnoofdoc = Convert.ToInt32(refundAmount);
                            }
                            if (intnoofdoc > 0)
                            {
                                rbtnrefundletter.Enabled = true;
                                rbtnpartialrefundletter.Enabled = true;
                            }
                            else
                            {
                                rbtnrefundletter.Enabled = false;
                                rbtnrefundletter.Enabled = false;

                            }

                        }
                        else
                        {
                            rbtndefaultclinicreview.Enabled = false;
                            rbtndefaultclinicfinal.Enabled = false; 
                        } 
                        break;
                    }
            }
        }

        protected void btnGenerate_Click(object sender, EventArgs e)
        {
            string stringreport = "";
            try
            {

                if (rbtnacknoeledge.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700011R1V1", "acknowledgement_letter");
                    }
                }
                else if (rbtnhospitalization.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700020R1V1", "hospitalisation_letter");
                    }
                }
                else if (rbtnrefundletter.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700010R1V1", "refund_letter");
                    }
                }
                else if (rbtnnorecord.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700022R1V1", "no_records_letter");
                    }
                }
                else if (rbtndefaultclinicreview.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700018R1V1", "defaulter");
                    }
                }
                else if (rbtndefaultclinicfinal.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700019R1V1", "final_defaulter");
                    }
                }
                else if (rbtncoverletter.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700008R1V1", "cover_letter");
                    }
                }
                else if (rbtnpartialrefundletter.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700009R1V1", "partial_refund_letter");
                    }
                }
                else if (rbtnworkcompensation.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700021R1V1", "WMC_letter");
                    }
                }
                else if (rbtnnotreportassenment.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700025R1V1", "assessment_report");
                    }
                }
                else if (rbtnpendingitemfirst.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        if (txtFirstRemPrintedOn.Text.Trim().Length == 0)
                        {
                            if (UpdateFirstReminderPrintDate(stringreport.Trim().ToUpper()))
                            { LoadData(stringreport, "NONLOAD", "");  }
                            LoadReports("DOP700003R1V1", "FirstReminderLetter");
                        }
                        else
                        {
                            LoadReports("DOP700003R1V1", "FirstReminderLetter");
                        }
                    }
                }
                else if (rbtnpendingitemfinal.Checked == true)
                {
                    if (txtFirstRemPrintedOn.Text.Trim().Length > 0)
                    {
                        DateTime objDateTimeFirstRem = CommonFunctions.ConvertToDateTime(txtFirstRemPrintedOn.Text.Trim(), "dd-MM-yyyy");

                        TimeSpan daycalc = objDateTimeFirstRem.Subtract(DateTime.Now);
                        int intday = (int)daycalc.TotalDays;

                        if (intday >= 14)
                        {
                            SecondRemLetterPrint();
                        }
                        else
                        {
                            //now temp hide
                            SecondRemLetterPrint();
                            //string stringd1stdate = CommonFunctions.ConvertDateTimetoStringShowDate(objDateTimeFirstRem);
                            //lblMsgLine2.Text = "Final Reminder is not due, First Reminder sent on " + stringd1stdate + " only. Do you wants to generate Final Reminder?";
                            //Modelpopupeconfirm.Show();
                        }
                    }
                    else
                    {
                        CommonFunctions.ShowMessage("First Reminder not yet generated");
                    }
                     
                }
                else if (rbtncancellation.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700005R1V1", "cancellation_requests");
                    }
                }
                else if (rbtnEnvelopletter.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700016R1V1", "envelope_letter");
                    }
                }
                else if (rbtnwaiverform.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700026R1V1", "waiver_letter");
                    }
                }
                else if (rbtnmrassesment.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700006R1V1", "mr_assessment_defaulter");
                    }
                }
                else if (rbtnsimplemedicalreort.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700013R1V1", "simple_medical_report");
                    }
                }
                else if (rbtnoutstanding.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700007R1V1", "outstanding_status");
                    }
                }
                else if (rbtnconsent.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700002R1V1", "consent_form");
                    }
                }
                else if (rbtnmedicalreport.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700015R1V1", "mr_processing");
                    }
                }
                //else if (rbtnletterundertaking.Checked == true)
                //{
                //    string stringreport = txtReqNo.Text.ToString();
                //    if (stringreport.Trim().Length > 0 && stringreport != null)
                //    {
                //        LoadReports("DOP700027R1V1", "undertaking_letter");
                //    }
                //}
                else if (rbtnsplistreport.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700028R1V1", "Specialist_letter");
                    }
                }
                //else if (rbtnoverpayment.Checked == true)
                //{
                //    stringreport = txtReqNo.Text.ToString();
                //    if (stringreport.Trim().Length > 0 && stringreport != null)
                //    {
                //        LoadReports("DOP700029R1V1", "Overpayment_Letter");
                //    }
                //}
                else if (rbtnnodletter.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700030R1V1", "NOD_Letter");
                    }
                }
                else if (rbtnstandardnodletter.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700031R1V1", "Standard_NOD_Letter");
                    }
                }
                else if (rbtnpaymentAcknowlege.Checked == true)
                {
                    stringreport = txtReqNo.Text.ToString();
                    if (stringreport.Trim().Length > 0 && stringreport != null)
                    {
                        LoadReports("DOP700032R1V1", "Payment_Acknowledgement_Letter");
                    }
                }
                else
                {
                    CommonFunctions.ShowMessageboot(this, "Please Choose a Report");
                    mdlrbt.Show();
                    pnlreportpopup.Visible = true;
                    rbtnrequestormail.Checked = true;
                }

                Reportpopupclearvalues();

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                stringreport = null;
            }
        }

        private void Reportpopupclearvalues()
        {
            try
            {
                rbtnmedicalreport.Checked = false;
                //rbtnletterundertaking.Checked = false;
                rbtnpendingitemfirst.Checked = false;
                rbtnconsent.Checked = false;
                rbtnpaymentAcknowlege.Checked = false;
                rbtnpendingitemfinal.Checked = false;
                rbtnnorecord.Checked = false;
                rbtndefaultclinicreview.Checked = false;
                rbtncancellation.Checked = false;
                rbtndefaultclinicfinal.Checked = false;
                rbtnoutstanding.Checked = false;
                rbtnmrassesment.Checked = false;
                rbtnacknoeledge.Checked = false;
                rbtnworkcompensation.Checked = false;
                rbtnwaiverform.Checked = false;
                rbtnrefundletter.Checked = false;
                rbtnhospitalization.Checked = false;
                rbtnsimplemedicalreort.Checked = false;
                rbtnpadientadd.Checked = false;
                rbtnrequestor.Checked = false;
                rbtncoverletter.Checked = false;
                rbtnpartialrefundletter.Checked = false;
                rbtnnotreportassenment.Checked = false;
                rbtnworkcompensation.Checked = false;
                rbtnEnvelopletter.Checked = false;
                rbtnnodletter.Checked = false;
                // rbtnoverpayment.Checked = false;
                rbtnsplistreport.Checked = false;
                rbtnstandardnodletter.Checked = false;

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        } 
        private void LoadReports(string stringFORMID, string stringreportname)//completed
        {

            byte[] objbytereturn = null;
            string stringFile = string.Empty;
            string stringoutputresult = "";
            int intErrorCount = 0;
            string[] stringOutputResult = null;
            string[] stringInputs = new string[5];
            string[] stringSettings = new string[21];
            string stringbeid = "";
            string stringaddress = "";
            string stringTelephoneNo = "";

            DateTime objDateTimeFrom;
            string stringfromdate = "";
            string stringtodate = "";

            stringbeid = CommonFunctions.GETBussinessEntity();
            stringaddress = ConfigurationManager.AppSettings["BEIDAddress"];
            stringTelephoneNo = ConfigurationManager.AppSettings["BEIDTelephoneNo"];
            string stringUserDisplayName = "";
            string stringPatientAddress = "";
            string stringRQQPatientAddress = "";
            string stringmailaddPatientAddress = "";
            string stringADDRESS = "";
            string stringRequestID01 = txtReqNo.Text.ToString(); 
            string StringddlExportFormat = string.Empty; 
            string stringRequetstorothers = "";
            // string stringpatientname = "";
            string stringRequestid = "";
            string stringRequestorname = "";
            string stringreqID = "";

            try
            {
                string stringreport = txtReqNo.Text.ToString();
                if (stringreport.Length > 0)
                {
                    if (Session["G11EOSUser_Name"] != null)
                    {
                        stringUserDisplayName = Session["G11EOSUser_Name"].ToString();
                    }
                    Session["PAT_ADDRESS"] = txtAddress.Text.ToString();
                    if (Session["PAT_ADDRESS"] != null)
                    { stringPatientAddress = Session["PAT_ADDRESS"].ToString(); }

                    if (Session["ReqAdd_ADDRESS"] != null)
                    { stringRQQPatientAddress = Session["ReqAdd_ADDRESS"].ToString(); }

                    if (Session["MailAdd_ADDRESS"] != null)
                    { stringmailaddPatientAddress = Session["MailAdd_ADDRESS"].ToString(); }


                    if (rbtnrequestor.Checked)
                    {
                        stringADDRESS = stringRQQPatientAddress.Trim();
                        if (ViewState["REQUESTOR_SHORT_NAME"] != null)
                        {
                            stringRequestorname = ViewState["REQUESTOR_SHORT_NAME"].ToString();
                        }
                        if (ViewState["rptreq_id"] != null)
                        {
                            stringRequestid = ViewState["rptreq_id"].ToString();
                        }

                        if (ViewState["REQUEST_OTHERS"] != null)
                        {
                            stringRequetstorothers = ViewState["REQUEST_OTHERS"].ToString();
                        }
                    }
                    else if (rbtnpadientadd.Checked)
                    {
                        stringADDRESS = stringPatientAddress.Trim();
                    }
                    else if (rbtnrequestormail.Checked)
                    {
                        stringADDRESS = stringmailaddPatientAddress.Trim();
                        if (ViewState["REQUESTOR_SHORT_NAME"] != null)
                        {
                            stringRequestorname = ViewState["REQUESTOR_SHORT_NAME"].ToString();
                        }
                        if (ViewState["rptreq_id"] != null)
                        {
                            stringRequestid = ViewState["rptreq_id"].ToString();
                        }

                        if (ViewState["REQUEST_OTHERS"] != null)
                        {
                            stringRequetstorothers = ViewState["REQUEST_OTHERS"].ToString();
                        }
                    }
                    if (stringFORMID == "DOP700009R1V1")
                    {
                        stringInputs = new string[7];
                        stringInputs[0] = CommonFunctions.GETBussinessEntity();
                        stringInputs[1] = stringRequestID01;
                        stringInputs[2] = stringUserDisplayName.ToString();
                        stringInputs[3] = "";
                        stringInputs[4] = "";
                        stringInputs[5] = "";
                        stringInputs[6] = "";
                    }
                    else if (stringFORMID == "DOP700025R1V1")
                    {
                        stringInputs = new string[6];
                        stringInputs[0] = CommonFunctions.GETBussinessEntity();
                        stringInputs[1] = stringRequestID01;
                        stringInputs[2] = stringUserDisplayName.ToString();
                        stringInputs[3] = txtnomonths.Text.ToString();
                        stringInputs[4] = "";
                        stringInputs[5] = "";
                    }
                    else if (stringFORMID == "DOP700003R1V1")
                    {
                        stringInputs = new string[4];
                        stringInputs[0] = CommonFunctions.GETBussinessEntity();
                        stringInputs[1] = stringRequestID01;
                        stringInputs[2] = "";
                        stringInputs[3] = ""; 
                    }
                    else if (stringFORMID == "DOP700004R1V1")
                    {
                        stringInputs = new string[4];
                        stringInputs[0] = CommonFunctions.GETBussinessEntity();
                        stringInputs[1] = stringRequestID01;
                        stringInputs[2] = "";
                        stringInputs[3] = ""; 
                    }
                    else if (stringFORMID == "DOP700002R1V1")
                    {
                        stringInputs = new string[4];
                        stringInputs[0] = CommonFunctions.GETBussinessEntity();
                        stringInputs[1] = stringRequestID01;
                        stringInputs[2] = "";
                        stringInputs[3] = ""; 
                    }
                    else if (stringFORMID == "DOP700015R1V1")
                    {
                        stringInputs = new string[4];
                        stringInputs[0] = CommonFunctions.GETBussinessEntity();
                        stringInputs[1] = stringRequestID01;
                        stringInputs[2] = "";
                        stringInputs[3] = ""; 
                    }

                    else
                    {
                        stringInputs[0] = CommonFunctions.GETBussinessEntity();
                        stringInputs[1] = txtReqNo.Text.Trim();
                        stringInputs[2] = stringUserDisplayName.ToString();
                        stringInputs[3] = "";
                        stringInputs[4] = "";
                    }

                    if (Session["PAT_ADDRESS"] != null)
                    { stringPatientAddress = Session["PAT_ADDRESS"].ToString(); }
                    if (Session["ReqAdd_ADDRESS"] != null)
                    { stringRQQPatientAddress = Session["ReqAdd_ADDRESS"].ToString(); }

                    if (Session["MailAdd_ADDRESS"] != null)
                    { stringmailaddPatientAddress = Session["MailAdd_ADDRESS"].ToString(); }
                    if (rbtnrequestor.Checked)
                    {
                        stringADDRESS = stringRQQPatientAddress.Trim();
                        if (ViewState["REQUESTOR_SHORT_NAME"] != null)
                        {
                            stringRequestorname = ViewState["REQUESTOR_SHORT_NAME"].ToString();
                        }
                        if (ViewState["rptreq_id"] != null)
                        {
                            stringRequestid = ViewState["rptreq_id"].ToString();
                        }

                        if (ViewState["REQUEST_OTHERS"] != null)
                        {
                            stringRequetstorothers = ViewState["REQUEST_OTHERS"].ToString();
                        }
                    }
                    else if (rbtnpadientadd.Checked)
                    {
                        stringADDRESS = stringPatientAddress.Trim();
                    }
                    else if (rbtnrequestormail.Checked)
                    {
                        stringADDRESS = stringmailaddPatientAddress.Trim();
                        if (ViewState["REQUESTOR_SHORT_NAME"] != null)
                        {
                            stringRequestorname = ViewState["REQUESTOR_SHORT_NAME"].ToString();
                        }
                        if (ViewState["rptreq_id"] != null)
                        {
                            stringRequestid = ViewState["rptreq_id"].ToString();
                        }

                        if (ViewState["REQUEST_OTHERS"] != null)
                        {
                            stringRequetstorothers = ViewState["REQUEST_OTHERS"].ToString();
                        }
                    }
                    if (stringFORMID == "DOP700011R1V1" || stringFORMID == "DOP700028R1V1" || stringFORMID == "DOP700013R1V1" || stringFORMID == "DOP700007R1V1" || stringFORMID == "DOP700020R1V1" || stringFORMID == "DOP700008R1V1" || stringFORMID == "DOP700025R1V1" || stringFORMID == "DOP700003R1V1" || stringFORMID == "DOP700004R1V1" || stringFORMID == "DOP700022R1V1" || stringFORMID == "DOP700018R1V1" || stringFORMID == "DOP700019R1V1")
                    {
                        stringSettings = new string[21];
                    }

                    stringSettings[0] = stringbeid;
                    stringSettings[1] = stringaddress;
                    stringSettings[2] = "";
                    stringSettings[3] = "";
                    stringSettings[4] = "";
                    stringSettings[5] = "";
                    stringSettings[6] = ConfigurationManager.AppSettings["copyright"].ToString();
                    stringSettings[7] = stringFORMID;
                    stringSettings[8] = "PORTALBLEDOCFORMAT";


                    stringSettings[9] = stringreportname;
                    stringSettings[10] = "";
                    stringSettings[11] = "";
                    stringSettings[12] = stringTelephoneNo;
                    stringSettings[13] = "";
                    stringSettings[14] = stringreportname;

                    stringSettings[15] = "param_from_date" + "-->" + stringfromdate;
                    stringSettings[16] = "param_to_date" + "-->" + stringtodate;
                    stringSettings[17] = "LoginUserID" + "-->" + stringUserDisplayName.Trim();
                    stringSettings[18] = "pat_address" + "-->" + stringADDRESS.Trim();

                    string stringLofoFlag = LoadINSTLogo();
                    stringSettings[19] = "Print_flag" + "-->" + stringLofoFlag.ToString();
                    if (stringRequestid != null && stringRequestid == "SELF")
                    { 
                        stringSettings[20] = "PatientName" + "-->" + stringRequestorname.ToString();
                    }
                    else if (stringRequestid != null && stringRequestid == "OTHERS")
                    {
                        stringSettings[20] = "PatientName" + "-->" + stringRequetstorothers.ToString();
                    }
                    else if (stringRequestorname != null && stringRequestorname.Length > 0)
                    {
                        stringSettings[20] = "PatientName" + "-->" + stringRequestorname.ToString();
                    }
                    else
                    {
                        stringSettings[20] = "PatientName" + "-->" + txtPatientNameHEADER.Text.ToString();
                    }



                    objDatasetAppsVariables = (DataSet)Session["objDatasetlocaldeclaration"];
                    objDatasetAppsVariables.Tables[0].Rows[0]["FORM_ID"] = stringFORMID;
                    clsCertificateValidation.EnableTrustedHosts();

                    using (GSReportingService.ReportingServiceClient objSGHCCESServiceClient = new GSReportingService.ReportingServiceClient(CommonFunctions.CreateServiceBasicHttpBinding(), CommonFunctions.objEndpointAddressReportingService))
                    {
                        stringoutputresult = objSGHCCESServiceClient.GetDocumentReport(stringInputs, objDatasetAppsVariables, stringSettings, out objbytereturn, out intErrorCount, out stringOutputResult);
                        if (objSGHCCESServiceClient != null)
                            objSGHCCESServiceClient.Close();
                    }
                    if (intErrorCount == 0)
                    {
                        if (stringoutputresult != null && stringoutputresult.Length > 0)
                        {
                            if (txtReqNo.Text.Trim().Length > 0)
                            {
                                stringreqID = txtReqNo.Text.Trim().ToString().Replace('/', '_'); 
                            }
                            CommonFunctions.OpenExportedFileR1V1LETTERReport(this, objbytereturn, stringreqID, stringreportname.ToString(), "REPORT");
                            rbtnrequestormail.Checked = true;
                        }
                        else
                        {
                            CommonFunctions.ShowMessageboot(this, "Report Not Found");
                        }
                        mdlrbt.Show();

                    }
                    else
                    {
                        Errorpopup(stringOutputResult);
                        mdlrbt.Show();
                        pnlreportpopup.Visible = true; 
                    }
                    mdlrbt.Show();
                    pnlreportpopup.Visible = true;
                    txtnomonths.Text = "";
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            } 
        }
        private string LoadINSTLogo()
        {
            DataSet objDatasetResult = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            string[] stringOutputResult = null;
            string stringformid = "FA0034R1V1";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            objDatasetResult = new DataSet();
            string stringexp = "";
            string stringServiceType = "";
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {

                stringexp = "And INST.be_id= '" + stringbeid + "' And INST.INS_ID= '" + stringbeid + "'";
                stringServiceType = "List1R1V1";
                objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);
                if (interrorcount == 0)
                {
                    if (objDatasetResult.Tables["t1"] != null && objDatasetResult.Tables["t1"].Rows.Count > 0)
                    { 
                        return objDatasetResult.Tables["t1"].Rows[0]["DOC_GEN_LOGO_FLAG"].ToString(); 
                    }

                }
                else
                {
                    Errorpopup(stringOutputResult);
                }

                return "N";
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
                return "N";
            }
            finally
            {
                objDatasetResult = null;
                interrorcount = 0;
                intTotalRecord = 0;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                stringexp = null;
                stringServiceType = null;
                stringbeid = null;
            }
        }
        protected void btnclose_Click(object sender, EventArgs e)
        {
            try
            {
                mdlrbt.Hide();
                pnlreportpopup.Visible = false;
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }

        }
        private bool UpdateFirstReminderPrintDate(string stringRequestID) 
        {
            DataRow objdatarow = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FC0006R1V2";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            bool boolStatus = false;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                if (stringRequestID != null && stringRequestID.Trim().Length > 0)
                {

                    string stringServiceType = "DEFAULT";
                    string stringexp = "";
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                    if (objDatasetResult != null && objDatasetResult.Tables["t1"].Rows.Count == 0)
                    {

                        objdatarow = objDatasetResult.Tables["t1"].NewRow();

                        objdatarow["be_id"] = stringbeid;
                        objdatarow["request_id"] = stringRequestID.Trim().ToUpper();
                        // objdatarow["remarks"] = txtRemarks.Text.Trim().ToUpper();                     
                        objdatarow["delmark"] = "N";

                        if (Session["stringComputerName"] != null)
                            objdatarow["CREATED_AT"] = Session["stringComputerName"].ToString();
                        if (Session["stringUserID"] != null)
                            objdatarow["CREATED_BY"] = Session["stringUserID"].ToString();
                        objdatarow["CREATED_ON"] = DateTime.Now;
                        if (Session["stringComputerName"] != null)
                            objdatarow["MODIFIED_AT"] = Session["stringComputerName"].ToString();
                        if (Session["stringUserID"] != null)
                            objdatarow["MODIFIED_BY"] = Session["stringUserID"].ToString();
                        objdatarow["MODIFIED_ON"] = DateTime.Now;
                        objDatasetResult.Tables["t1"].Rows.Add(objdatarow);

                        boolStatus = true;

                        if (boolStatus == true)
                        {
                            objDatasetResult = objDatasetResult.GetChanges();
                            stringServiceType = "OperationServiceDML";
                            objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);

                            if (intErrorCount == 0)
                            {
                                return true;
                            }
                            else
                            {
                                Errorpopup(stringOutputResult);
                                return false;
                            }
                        }
                    } 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objdatarow = null;
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0;

            }


            return false;
        } 
        private bool UpdateSecondReminderPrintDate(string stringRequestID) 
        {

            DataRow objdatarow = null;
            int interrorcount = 0;
            int intTotalRecord = 0;
            DataSet objDatasetResult = null;
            string[] stringOutputResult = null;
            string stringformid = "FC0006R1V2";
            string stringOrderBy = "";
            int intFromRecord = 0;
            int intToRecord = int.MaxValue;
            bool boolStatus = false;
            string stringbeid = CommonFunctions.GETBussinessEntity();
            try
            {
                if (stringRequestID != null && stringRequestID.Trim().Length > 0)
                {

                    string stringServiceType = "DEFAULT";
                    string stringexp = "";
                    objDatasetResult = CommonFunctions.SelectionServiceClient(stringServiceType, stringformid, stringexp, stringOrderBy, intFromRecord, intToRecord, out intTotalRecord, out interrorcount, out stringOutputResult);

                    if (objDatasetResult != null && objDatasetResult.Tables["t2"].Rows.Count == 0)
                    {

                        objdatarow = objDatasetResult.Tables["t2"].NewRow();

                        objdatarow["be_id"] = stringbeid;
                        objdatarow["request_id"] = stringRequestID.Trim().ToUpper();                   
                        objdatarow["delmark"] = "N";

                        if (Session["stringComputerName"] != null)
                            objdatarow["CREATED_AT"] = Session["stringComputerName"].ToString();
                        if (Session["stringUserID"] != null)
                            objdatarow["CREATED_BY"] = Session["stringUserID"].ToString();
                        objdatarow["CREATED_ON"] = DateTime.Now;
                        if (Session["stringComputerName"] != null)
                            objdatarow["MODIFIED_AT"] = Session["stringComputerName"].ToString();
                        if (Session["stringUserID"] != null)
                            objdatarow["MODIFIED_BY"] = Session["stringUserID"].ToString();
                        objdatarow["MODIFIED_ON"] = DateTime.Now;
                        objDatasetResult.Tables["t2"].Rows.Add(objdatarow);

                        boolStatus = true;

                        if (boolStatus == true)
                        {
                            objDatasetResult = objDatasetResult.GetChanges();
                            stringServiceType = "OperationServiceDML";
                            objDatasetResult = CommonFunctions.DataManipulationR1V1(stringServiceType, objDatasetResult.GetChanges(), stringformid, out int intErrorCount, out stringOutputResult);

                            if (intErrorCount == 0)
                            {
                                return true;
                            }
                            else
                            {
                                Errorpopup(stringOutputResult);
                                return false;
                            }
                        }
                    } 
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objdatarow = null;
                interrorcount = 0;
                intTotalRecord = 0;
                objDatasetResult = null;
                stringOutputResult = null;
                stringformid = null;
                stringOrderBy = null;
                intFromRecord = 0;
                intToRecord = 0; 
            } 
            return false;
        } 
        private void SecondRemLetterPrint()
        {
            string stringreport = "";
            bool boolPrint = true;
            DateTime objDateTimeFirstRem;
            DateTime objDateTimeSecRem;
            try
            {
                stringreport = txtReqNo.Text.ToString();
                if (txtSecRemPrintedOn.Text.Trim().Length > 0)
                {
                    if (txtFirstRemPrintedOn.Text.Trim().Length > 0)
                    {
                        objDateTimeFirstRem = CommonFunctions.ConvertToDateTime(txtFirstRemPrintedOn.Text.Trim(), "dd-MM-yyyy");
                        objDateTimeSecRem = CommonFunctions.ConvertToDateTime(txtSecRemPrintedOn.Text.Trim(), "dd-MM-yyyy");

                        if (objDateTimeSecRem.Date > DateTime.Now.Date)
                        {
                            boolPrint = false;
                            CommonFunctions.ShowMessageboot(this, "First reminder printed on " + objDateTimeFirstRem.ToString("dd-MMM-yyyy") + ". You cannot print second reminder before " + objDateTimeSecRem.ToString("dd-MMM-yyyy"));
                            
                        }
                    }
                
                }

                if (boolPrint)
                {
                    if (txtSecRemPrintedOn.Text.Trim().Length == 0)
                    {
                        if (UpdateSecondReminderPrintDate(stringreport.Trim().ToUpper()))
                        { LoadData(stringreport, "NONLOAD", ""); }
                        LoadReports("DOP700004R1V1", "SecondReminderLetter");
                    }
                    else
                    {
                        LoadReports("DOP700004R1V1", "SecondReminderLetter");
                    }

                }
            }
            catch (Exception objException)
            {
                CommonFunctions.HandleException(objException);
            }
        }

        private void VerifyAccessRights()
        {

            DataSet objDatasetResult = null;

            string stringstatus = "";
            string[] stringOutputResult = null;
            string[] stringComponent = null;
            DataRow objDataRow = null;
            imgBtnPrint.Enabled = false;
            imgbtnSaveAsDraft.Enabled = false;
            imgbtnCONFIRM_MENU.Enabled = false;
            imgbtnInstTransfer.Enabled = false;
            try
            {

                stringComponent = new string[1];
                stringComponent[0] = "FC0001R1V1";
                objDatasetResult = CommonFunctions.verifyaccessrights(out stringstatus, out stringOutputResult, stringComponent);

                if (objDatasetResult != null && objDatasetResult.Tables["SystemAccess"] != null && objDatasetResult.Tables["SystemAccess"].Rows.Count > 0)
                {
                    objDataRow = objDatasetResult.Tables["SystemAccess"].Rows[0];
                    if (objDataRow != null && objDataRow["access_status"].ToString().ToUpper() == "ENABLED")
                    {
                        if (objDataRow["new"].ToString().ToUpper() == "ENABLED")
                        {
                        }
                        if (objDataRow["edit"].ToString().ToUpper() == "ENABLED")
                        {
                            imgbtnSaveAsDraft.Enabled = true;
                            imgbtnCONFIRM_MENU.Enabled = true;
                            imgbtnInstTransfer.Enabled = true;
                        }
                        if (objDataRow["delete"].ToString().ToUpper() == "ENABLED")
                        {
                        }
                        if (objDataRow["Export"].ToString().ToUpper() == "ENABLED")
                        {
                            imgBtnPrint.Enabled = true;
                        }
                    }
                    else
                    {
                        Response.Redirect("PageAccessDenied.aspx", true);
                    }
                }

                stringComponent = new string[1];
                stringComponent[0] = "FC0004R1V1";
                objDatasetResult = CommonFunctions.verifyaccessrights(out stringstatus, out stringOutputResult, stringComponent);

                if (objDatasetResult != null && objDatasetResult.Tables["SystemAccess"] != null && objDatasetResult.Tables["SystemAccess"].Rows.Count > 0)
                {
                    objDataRow = objDatasetResult.Tables["SystemAccess"].Rows[0];
                    if (objDataRow != null && objDataRow["access_status"].ToString().ToUpper() == "ENABLED")
                    {
                        lnkbtnAppoint.Enabled = true;
                    }
                    else
                    {
                        lnkbtnAppoint.Enabled = false;
                    }
                }

                stringComponent = new string[1];
                stringComponent[0] = "FC0003R1V1";
                objDatasetResult = CommonFunctions.verifyaccessrights(out stringstatus, out stringOutputResult, stringComponent);

                if (objDatasetResult != null && objDatasetResult.Tables["SystemAccess"] != null && objDatasetResult.Tables["SystemAccess"].Rows.Count > 0)
                {
                    objDataRow = objDatasetResult.Tables["SystemAccess"].Rows[0];
                    if (objDataRow != null && objDataRow["access_status"].ToString().ToUpper() == "ENABLED")
                    {
                        lnkbtnpayment.Enabled = true;
                    }
                    else
                    {
                        lnkbtnpayment.Enabled = false;
                    }
                }
                stringComponent = new string[1];
                stringComponent[0] = "FC0006R1V1";
                objDatasetResult = CommonFunctions.verifyaccessrights(out stringstatus, out stringOutputResult, stringComponent);

                if (objDatasetResult != null && objDatasetResult.Tables["SystemAccess"] != null && objDatasetResult.Tables["SystemAccess"].Rows.Count > 0)
                {
                    objDataRow = objDatasetResult.Tables["SystemAccess"].Rows[0];
                    if (objDataRow != null && objDataRow["access_status"].ToString().ToUpper() == "ENABLED")
                    {
                        lnkbtnCancel.Enabled = true;
                    }
                    else
                    {
                        lnkbtnCancel.Enabled = false;
                    }
                }
                stringComponent = new string[1];
                stringComponent[0] = "FC0010R1V1";
                objDatasetResult = CommonFunctions.verifyaccessrights(out stringstatus, out stringOutputResult, stringComponent);

                if (objDatasetResult != null && objDatasetResult.Tables["SystemAccess"] != null && objDatasetResult.Tables["SystemAccess"].Rows.Count > 0)
                {
                    objDataRow = objDatasetResult.Tables["SystemAccess"].Rows[0];
                    if (objDataRow != null && objDataRow["access_status"].ToString().ToUpper() == "ENABLED")
                    {
                        lnkbtnViewMedical.Enabled = true;
                    }
                    else
                    {
                        lnkbtnViewMedical.Enabled = false;
                    }
                }

                stringComponent = new string[1];
                stringComponent[0] = "FC0009R1V1";
                objDatasetResult = CommonFunctions.verifyaccessrights(out stringstatus, out stringOutputResult, stringComponent);

                if (objDatasetResult != null && objDatasetResult.Tables["SystemAccess"] != null && objDatasetResult.Tables["SystemAccess"].Rows.Count > 0)
                {
                    objDataRow = objDatasetResult.Tables["SystemAccess"].Rows[0];
                    if (objDataRow != null && objDataRow["access_status"].ToString().ToUpper() == "ENABLED")
                    {
                        lnkbtnrecalhistory.Enabled = true;
                    }
                    else
                    {
                        lnkbtnrecalhistory.Enabled = false;
                    }
                }

            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDatasetResult = null;
                stringstatus = null;
                stringOutputResult = null;
                stringComponent = null;
            }
        }
        #endregion

        protected void imgbtnAUDIT_Click(object sender, ImageClickEventArgs e)
        {
            DataRow[] objDataRow = null;
            try
            {
                if (Session["AuditLogFC0001R1V1"] != null)
                {
                    objDataRow = (DataRow[])Session["AuditLogFC0001R1V1"];
                    if (objDataRow != null)
                    {
                        CommonFunctions.AuditLog(this, objDataRow);
                    }
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
            finally
            {
                objDataRow = null;
            }
        }

        protected void ddlFinancialdte_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if(ddlFinancialdte.SelectedItem != null && ddlFinancialdte.SelectedValue.ToString().ToUpper() == "OTHERS")
                { 
                    txtWaiverrmk.CssClass = "form-control Manditory";
                }
                else
                {
                    txtWaiverrmk.CssClass = "form-control optional";
                }
            }
            catch (Exception objException)
            {
                CommonFunctions.ShowMessageboot02(objException);
            }
        }
    }
}